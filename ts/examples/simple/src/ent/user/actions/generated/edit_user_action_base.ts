// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  Action,
  saveBuilder,
  saveBuilderX,
  WriteOperation,
  Changeset,
} from "ent/action";
import { Viewer } from "ent/ent";
import User from "src/ent/user";
import { UserBuilder, UserInput } from "src/ent/user/actions/user_builder";

export interface UserEditInput {
  firstName?: string;
  lastName?: string;
  emailAddress?: string;
}

export class EditUserActionBase implements Action<User> {
  public readonly builder: UserBuilder;
  public readonly viewer: Viewer;
  private input: UserEditInput;

  constructor(viewer: Viewer, user: User, input: UserEditInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new UserBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      user,
    );
  }

  getFields(): UserInput {
    return {
      ...this.input,
      requiredFields: [],
    };
  }

  async changeset(): Promise<Changeset<User>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<User | null> {
    return await saveBuilder(this.builder);
  }

  async saveX(): Promise<User> {
    return await saveBuilderX(this.builder);
  }

  static create<T extends EditUserActionBase>(
    this: new (viewer: Viewer, user: User, input: UserEditInput) => T,
    viewer: Viewer,
    user: User,
    input: UserEditInput,
  ): EditUserActionBase {
    return new this(viewer, user, input);
  }
}
