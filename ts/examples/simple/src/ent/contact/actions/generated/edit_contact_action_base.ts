// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { Action, Builder, WriteOperation, Changeset } from "ent/action";
import { Viewer, ID } from "ent/ent";
import Contact from "src/ent/contact";
import User from "src/ent/user";
import {
  ContactBuilder,
  ContactInput,
} from "src/ent/contact/actions/contact_builder";

export interface ContactEditInput {
  emailAddress?: string;
  firstName?: string;
  lastName?: string;
  userID?: ID | Builder<User>;
}

export class EditContactActionBase implements Action<Contact> {
  public readonly builder: ContactBuilder;
  public readonly viewer: Viewer;
  private input: ContactEditInput;

  constructor(viewer: Viewer, contact: Contact, input: ContactEditInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new ContactBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      contact,
    );
  }

  getInput(): ContactInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<Contact>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Contact | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<Contact> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends EditContactActionBase>(
    this: new (viewer: Viewer, contact: Contact, input: ContactEditInput) => T,
    viewer: Viewer,
    contact: Contact,
    input: ContactEditInput,
  ): EditContactActionBase {
    return new this(viewer, contact, input);
  }
}
