// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  EdgeType,
  User,
  Event,
  Contact,
  EventToAttendingQuery,
  EventToDeclinedQuery,
  EventToHostsQuery,
  EventToInvitedQuery,
  EventToMaybeQuery,
  UserToCreatedEventsQuery,
  UserToDeclinedEventsQuery,
  UserToEventsAttendingQuery,
  UserToFriendsQuery,
  UserToInvitedEventsQuery,
  UserToMaybeEventsQuery,
  UserToSelfContactQuery,
  UserToHostedEventsQuery,
} from "src/ent/internal";
import { Viewer, EdgeQuerySource, BaseEdgeQuery } from "@lolopinto/ent";

export class UserToCreatedEventsQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToCreatedEvents, Event.loaderOptions());
  }

  static query<T extends UserToCreatedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}

export class UserToDeclinedEventsQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToDeclinedEvents, Event.loaderOptions());
  }

  static query<T extends UserToDeclinedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}

export class UserToEventsAttendingQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToEventsAttending, Event.loaderOptions());
  }

  static query<T extends UserToEventsAttendingQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}

export class UserToFriendsQueryBase extends BaseEdgeQuery<User, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToFriends, User.loaderOptions());
  }

  static query<T extends UserToFriendsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }
}

export class UserToInvitedEventsQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToInvitedEvents, Event.loaderOptions());
  }

  static query<T extends UserToInvitedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}

export class UserToMaybeEventsQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToMaybeEvents, Event.loaderOptions());
  }

  static query<T extends UserToMaybeEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}

export class UserToSelfContactQueryBase extends BaseEdgeQuery<User, Contact> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToSelfContact, Contact.loaderOptions());
  }

  static query<T extends UserToSelfContactQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }
}

export class UserToHostedEventsQueryBase extends BaseEdgeQuery<User, Event> {
  constructor(viewer: Viewer, src: EdgeQuerySource<User>) {
    super(viewer, src, EdgeType.UserToHostedEvents, Event.loaderOptions());
  }

  static query<T extends UserToHostedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<User>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<User>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}
