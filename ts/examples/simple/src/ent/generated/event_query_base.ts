// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  EdgeType,
  Event,
  User,
  UserToCreatedEventsQuery,
  UserToFriendsQuery,
  UserToSelfContactQuery,
  UserToHostedEventsQuery,
  UserToInvitedEventsQuery,
  UserToEventsAttendingQuery,
  UserToDeclinedEventsQuery,
  UserToMaybeEventsQuery,
} from "src/ent/internal";
import { Viewer, EdgeQuerySource, BaseEdgeQuery } from "@lolopinto/ent";

export class EventToHostsQueryBase extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToHosts, User.loaderOptions());
  }

  static query<T extends EventToHostsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToInvitedQueryBase extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToInvited, User.loaderOptions());
  }

  static query<T extends EventToInvitedQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToAttendingQueryBase extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToAttending, User.loaderOptions());
  }

  static query<T extends EventToAttendingQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToDeclinedQueryBase extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToDeclined, User.loaderOptions());
  }

  static query<T extends EventToDeclinedQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToMaybeQueryBase extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToMaybe, User.loaderOptions());
  }

  static query<T extends EventToMaybeQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): T {
    return new this(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToHostedEventsQuery {
    return UserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}
