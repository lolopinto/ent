// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  EdgeType,
  Event,
  User,
  UserToCreatedEventsQuery,
  UserToFriendsQuery,
  UserToSelfContactQuery,
  UserToUserToHostedEventsQuery,
  UserToInvitedEventsQuery,
  UserToEventsAttendingQuery,
  UserToDeclinedEventsQuery,
  UserToMaybeEventsQuery,
} from "src/ent/internal";
import { Viewer, EdgeQuerySource, BaseEdgeQuery } from "@lolopinto/ent";

export class EventToHostsQuery extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToHosts, User.loaderOptions());
  }

  static query(viewer: Viewer, src: EdgeQuerySource<Event>): EventToHostsQuery {
    return new EventToHostsQuery(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToUserToHostedEventsQuery {
    return UserToUserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToInvitedQuery extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToInvited, User.loaderOptions());
  }

  static query(
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): EventToInvitedQuery {
    return new EventToInvitedQuery(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToUserToHostedEventsQuery {
    return UserToUserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToAttendingQuery extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToAttending, User.loaderOptions());
  }

  static query(
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): EventToAttendingQuery {
    return new EventToAttendingQuery(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToUserToHostedEventsQuery {
    return UserToUserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToDeclinedQuery extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToDeclined, User.loaderOptions());
  }

  static query(
    viewer: Viewer,
    src: EdgeQuerySource<Event>,
  ): EventToDeclinedQuery {
    return new EventToDeclinedQuery(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToUserToHostedEventsQuery {
    return UserToUserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}

export class EventToMaybeQuery extends BaseEdgeQuery<Event, User> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Event>) {
    super(viewer, src, EdgeType.EventToMaybe, User.loaderOptions());
  }

  static query(viewer: Viewer, src: EdgeQuerySource<Event>): EventToMaybeQuery {
    return new EventToMaybeQuery(viewer, src);
  }

  queryCreatedEvents(): UserToCreatedEventsQuery {
    return UserToCreatedEventsQuery.query(this.viewer, this);
  }

  queryFriends(): UserToFriendsQuery {
    return UserToFriendsQuery.query(this.viewer, this);
  }

  querySelfContact(): UserToSelfContactQuery {
    return UserToSelfContactQuery.query(this.viewer, this);
  }

  queryUserToHostedEvents(): UserToUserToHostedEventsQuery {
    return UserToUserToHostedEventsQuery.query(this.viewer, this);
  }

  queryInvitedEvents(): UserToInvitedEventsQuery {
    return UserToInvitedEventsQuery.query(this.viewer, this);
  }

  queryEventsAttending(): UserToEventsAttendingQuery {
    return UserToEventsAttendingQuery.query(this.viewer, this);
  }

  queryDeclinedEvents(): UserToDeclinedEventsQuery {
    return UserToDeclinedEventsQuery.query(this.viewer, this);
  }

  queryMaybeEvents(): UserToMaybeEventsQuery {
    return UserToMaybeEventsQuery.query(this.viewer, this);
  }
}
