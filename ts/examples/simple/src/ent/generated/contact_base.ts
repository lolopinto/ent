// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  loadEnt,
  ID,
  Viewer,
  loadEntX,
  loadEnts,
  //  LoadEntOptions,
} from "ent/ent";
import { AlwaysDenyRule, PrivacyPolicy } from "ent/privacy";
import { Field, getFields } from "ent/schema";
import schema from "src/schema/contact";
import { NodeType } from "src/ent/const";
//import User from "src/ent/user";
import { UserLoader, ContactLoader } from "./loaders";
import { ContactInterface, UserInterface } from "src/ent/generated/interfaces";
//import Contact from "src/schema/contact";

//import
//const tableName = "contacts";

export class ContactBase implements ContactInterface {
  readonly nodeType = NodeType.Contact;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly emailAddress: string;
  readonly firstName: string;
  readonly lastName: string;
  readonly userID: ID;

  constructor(public viewer: Viewer, id: ID, data: {}) {
    this.id = id;
    // TODO don't double read id
    this.id = data["id"];
    this.createdAt = data["created_at"];
    this.updatedAt = data["updated_at"];
    this.emailAddress = data["email_address"];
    this.firstName = data["first_name"];
    this.lastName = data["last_name"];
    this.userID = data["user_id"];
  }

  // by default, we always deny and it's up to the ent
  // to overwrite this privacy policy in its subclasses

  privacyPolicy: PrivacyPolicy = {
    rules: [AlwaysDenyRule],
  };

  static async load<T extends ContactInterface>(
    this: new (viewer: Viewer, id: ID, data: {}) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return loadEnt(viewer, id, ContactLoader.loaderOptions());
  }

  static async loadX<T extends ContactInterface>(
    this: new (viewer: Viewer, id: ID, data: {}) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return loadEntX(viewer, id, ContactLoader.loaderOptions());
  }

  static async loadMany<T extends ContactInterface>(
    //    this: new (viewer: Viewer, id: ID, data: {}) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<T[]> {
    return loadEnts(viewer, ContactLoader.loaderOptions(), ...ids);
  }

  // static loaderOptions<T extends ContactBase>(
  //   this: new (viewer: Viewer, id: ID, data: {}) => T,
  // ): LoadEntOptions<T> {
  //   return {
  //     tableName: tableName,
  //     fields: ContactBase.getFields(),
  //     ent: this,
  //   };
  // }

  // private static getFields(): string[] {
  //   return [
  //     "id",
  //     "created_at",
  //     "updated_at",
  //     "email_address",
  //     "first_name",
  //     "last_name",
  //     "user_id",
  //   ];
  // }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (ContactBase.schemaFields != null) {
      return ContactBase.schemaFields;
    }
    return (ContactBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return ContactBase.getSchemaFields().get(key);
  }

  // this could be an interface
  loadUser(): Promise<UserInterface | null> {
    return loadEnt(this.viewer, this.userID, UserLoader.loaderOptions());
  }

  loadUserX(): Promise<UserInterface> {
    return loadEntX(this.viewer, this.userID, UserLoader.loaderOptions());
  }
}
