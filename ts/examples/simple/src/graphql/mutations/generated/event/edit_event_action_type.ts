// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { Context } from "src/graphql/context";
import { GraphQLTime } from "ent/graphql/scalars/time";
import { EventType } from "src/graphql/resolvers/generated/event_type.ts";
import { EventEditInput } from "src/ent/event/actions/edit_event_action";
import Event from "src/ent/event";
import EditEventAction from "src/ent/event/actions/edit_event_action";

export const EventEditInputType = new GraphQLInputObjectType({
  name: "EventEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventID: {
      type: GraphQLNonNull(GraphQLID),
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    createdAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    updatedAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    creatorID: {
      type: GraphQLNonNull(GraphQLString),
    },
    startTime: {
      type: GraphQLNonNull(GraphQLTime),
    },
    endTime: {
      type: GraphQLTime,
    },
    eventLocation: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});
interface EventEditResponse {
  event: Event;
}

export const EventEditResponseType = new GraphQLObjectType({
  name: "EventEditResponse",
  fields: (): GraphQLFieldConfigMap<Event, Context> => ({
    event: {
      type: GraphQLNonNull(EventType),
    },
  }),
});

export const EventEditType: GraphQLFieldConfig<
  undefined,
  Context,
  EventEditInput
> = {
  type: GraphQLNonNull(EventEditResponseType),
  args: {
    input: {
      description: "input for action",
      type: GraphQLNonNull(EventEditInputType),
    },
  },
  resolve: async (
    _source,
    args: EventEditInput,
    context: Context,
    _info: GraphQLResolveInfo,
  ): Promise<EventEditResponse> => {},
};
