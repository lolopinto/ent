// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
} from "graphql";
import { Context } from "src/graphql/context";
import { GraphQLTime } from "ent/graphql/scalars/time";
import { EventType } from "src/graphql/resolvers/generated/event_type.ts";
import Event from "src/ent/event";

export const eventCreateInputType = new GraphQLObjectType({
  name: "eventCreateInput",
  fields: (): GraphQLFieldConfigMap<Event, Context> => ({
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    createdAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    updatedAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    creatorID: {
      type: GraphQLNonNull(GraphQLString),
    },
    startTime: {
      type: GraphQLNonNull(GraphQLTime),
    },
    endTime: {
      type: GraphQLTime,
    },
    eventLocation: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});
interface eventCreateResponse {
  event: Event;
}

export const eventCreateResponseType = new GraphQLObjectType({
  name: "eventCreateResponse",
  fields: (): GraphQLFieldConfigMap<Event, Context> => ({
    event: {
      type: GraphQLNonNull(EventType),
    },
  }),
});

export const eventCreateType: GraphQLFieldConfig<
  undefined,
  Context,
  eventCreateInput
> = {
  type: GraphQLNonNull(eventCreateResponseType),
  args: {
    input: {
      description: "input for action",
      type: GraphQLNonNull(eventCreateInputType),
    },
  },
  resolve: async (
    _source,
    args: eventCreateInput,
    context: Context,
    _info: GraphQLResolveInfo,
  ) => {},
};
