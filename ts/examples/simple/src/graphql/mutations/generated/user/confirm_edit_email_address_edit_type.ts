// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { ID, RequestContext } from "@lolopinto/ent";
import { User } from "src/ent/";
import { UserType } from "src/graphql/resolvers/";
import ConfirmEditEmailAddressAction, {
  ConfirmEditEmailAddressInput,
} from "src/ent/user/actions/confirm_edit_email_address_action";

interface customConfirmEditEmailAddressEditInput
  extends ConfirmEditEmailAddressInput {
  userID: ID;
}

interface ConfirmEditEmailAddressEditResponse {
  user: User;
}

export const ConfirmEditEmailAddressEditInputType = new GraphQLInputObjectType({
  name: "ConfirmEditEmailAddressEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    userID: {
      type: GraphQLNonNull(GraphQLID),
    },
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    code: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});

export const ConfirmEditEmailAddressEditResponseType = new GraphQLObjectType({
  name: "ConfirmEditEmailAddressEditResponse",
  fields: (): GraphQLFieldConfigMap<
    ConfirmEditEmailAddressEditResponse,
    RequestContext
  > => ({
    user: {
      type: GraphQLNonNull(UserType),
    },
  }),
});

export const ConfirmEditEmailAddressEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customConfirmEditEmailAddressEditInput }
> = {
  type: GraphQLNonNull(ConfirmEditEmailAddressEditResponseType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(ConfirmEditEmailAddressEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<ConfirmEditEmailAddressEditResponse> => {
    let user = await ConfirmEditEmailAddressAction.saveXFromID(
      context.getViewer(),
      input.userID,
      {
        emailAddress: input.emailAddress,
        code: input.code,
      },
    );
    return { user: user };
  },
};
