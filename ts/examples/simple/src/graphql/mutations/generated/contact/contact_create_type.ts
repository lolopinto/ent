// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { ContactType } from "src/graphql/resolvers/generated/contact_type";
import CreateContactAction, {
  ContactCreateInput,
} from "src/ent/contact/actions/create_contact_action";
import Contact from "src/ent/contact";

interface ContactCreateResponse {
  contact: Contact;
}

export const ContactCreateInputType = new GraphQLInputObjectType({
  name: "ContactCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    userID: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});

export const ContactCreateResponseType = new GraphQLObjectType({
  name: "ContactCreateResponse",
  fields: (): GraphQLFieldConfigMap<ContactCreateResponse, RequestContext> => ({
    contact: {
      type: GraphQLNonNull(ContactType),
    },
  }),
});

export const ContactCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: ContactCreateInput }
> = {
  type: GraphQLNonNull(ContactCreateResponseType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(ContactCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<ContactCreateResponse> => {
    let contact = await CreateContactAction.create(context.getViewer(), {
      emailAddress: input.emailAddress,
      firstName: input.firstName,
      lastName: input.lastName,
      userID: input.userID,
    }).saveX();
    return { contact: contact };
  },
};
