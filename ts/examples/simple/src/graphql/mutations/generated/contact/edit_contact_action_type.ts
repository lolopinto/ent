// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
} from "graphql";
import { Context } from "src/graphql/context";
import { GraphQLTime } from "ent/graphql/scalars/time";
import { ContactType } from "src/graphql/resolvers/generated/contact_type.ts";
import Contact from "src/ent/contact";

export const contactEditInputType = new GraphQLObjectType({
  name: "contactEditInput",
  fields: (): GraphQLFieldConfigMap<Contact, Context> => ({
    contactID: {
      type: GraphQLNonNull(GraphQLID),
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    createdAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    updatedAt: {
      type: GraphQLNonNull(GraphQLTime),
    },
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    userID: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});
interface contactEditResponse {
  contact: Contact;
}

export const contactEditResponseType = new GraphQLObjectType({
  name: "contactEditResponse",
  fields: (): GraphQLFieldConfigMap<Contact, Context> => ({
    contact: {
      type: GraphQLNonNull(ContactType),
    },
  }),
});

export const contactEditType: GraphQLFieldConfig<
  undefined,
  Context,
  contactEditInput
> = {
  type: GraphQLNonNull(contactEditResponseType),
  args: {
    input: {
      description: "input for action",
      type: GraphQLNonNull(contactEditInputType),
    },
  },
  resolve: async (
    _source,
    args: contactEditInput,
    context: Context,
    _info: GraphQLResolveInfo,
  ) => {},
};
