// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { ID } from "ent/ent";
import { Context } from "src/graphql/context";
import { ContactType } from "src/graphql/resolvers/generated/contact_type";
import { ContactEditInput } from "src/ent/contact/actions/edit_contact_action";
import Contact from "src/ent/contact";
import EditContactAction from "src/ent/contact/actions/edit_contact_action";

interface customContactEditInput extends ContactEditInput {
  contactID: ID;
}

interface ContactEditResponse {
  contact: Contact;
}

export const ContactEditInputType = new GraphQLInputObjectType({
  name: "ContactEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    contactID: {
      type: GraphQLNonNull(GraphQLID),
    },
    emailAddress: {
      type: GraphQLString,
    },
    firstName: {
      type: GraphQLString,
    },
    lastName: {
      type: GraphQLString,
    },
    userID: {
      type: GraphQLString,
    },
  }),
});

export const ContactEditResponseType = new GraphQLObjectType({
  name: "ContactEditResponse",
  fields: (): GraphQLFieldConfigMap<Contact, Context> => ({
    contact: {
      type: GraphQLNonNull(ContactType),
    },
  }),
});

export const ContactEditType: GraphQLFieldConfig<
  undefined,
  Context,
  { [input: string]: customContactEditInput }
> = {
  type: GraphQLNonNull(ContactEditResponseType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(ContactEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: Context,
    _info: GraphQLResolveInfo,
  ): Promise<ContactEditResponse> => {
    let contact = await EditContactAction.saveXFromID(
      context.viewer,
      input.contactID,
      {
        emailAddress: input.emailAddress,
        firstName: input.firstName,
        lastName: input.lastName,
      },
    );
    return { contact: contact };
  },
};
