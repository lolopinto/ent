type Query {
  address(id: ID!): Address
  contact(id: ID!): Contact
  event(id: ID!): Event
  user(id: ID!): User
  viewer: Viewer!
}

type Address {
  id: ID!
  streetName: String!
  city: String!
  zip: String!
}

type Contact {
  user: User
  id: ID!
  emailAddress: String!
  firstName: String!
  lastName: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String
  accountStatus: String
  createdEvents: [Event!]!
  friends: [User!]!
  selfContact: Contact
  userToHostedEvents: [Event!]!
  invitedEvents: [Event!]!
  eventsAttending: [Event!]!
  declinedEvents: [Event!]!
  maybeEvents: [Event!]!
  contacts: [Contact!]!
  fullName: String!
  bar: String
  contactSameDomain: Contact
  contactsSameDomain: [Contact!]!
  contactsSameDomainNullable: [Contact!]
  contactsSameDomainNullableContents: [Contact]!
  contactsSameDomainNullableContentsAndList: [Contact]
}

type Event {
  creator: User
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  eventLocation: String!
  hosts: [User!]!
  invited: [User!]!
  attending: [User!]!
  declined: [User!]!
  maybe: [User!]!
}

"""Time scalar type"""
scalar Time

type Viewer {
  viewerID: ID
  user: User
}

type Mutation {
  contactCreate(input: ContactCreateInput!): ContactCreateResponse!
  contactDelete(input: ContactDeleteInput!): ContactDeleteResponse!
  contactEdit(input: ContactEditInput!): ContactEditResponse!
  eventAddHost(input: EventAddHostInput!): EventAddHostResponse!
  eventCreate(input: EventCreateInput!): EventCreateResponse!
  eventDelete(input: EventDeleteInput!): EventDeleteResponse!
  eventEdit(input: EventEditInput!): EventEditResponse!
  userAuth(input: UserAuthInput!): UserAuthResponse!
  userAuthJWT(input: UserAuthJWTInput!): UserAuthJWTResponse!
  userCreate(input: UserCreateInput!): UserCreateResponse!
  userDelete(input: UserDeleteInput!): UserDeleteResponse!
  userEdit(input: UserEditInput!): UserEditResponse!
}

type ContactCreateResponse {
  contact: Contact!
}

input ContactCreateInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  userID: String!
}

type ContactDeleteResponse {
  deletedContactID: ID
}

input ContactDeleteInput {
  contactID: ID!
}

type ContactEditResponse {
  contact: Contact!
}

input ContactEditInput {
  contactID: ID!
  emailAddress: String
  firstName: String
  lastName: String
  userID: String
}

type EventAddHostResponse {
  event: Event!
}

input EventAddHostInput {
  eventID: ID!
  hostID: ID!
}

type EventCreateResponse {
  event: Event!
}

input EventCreateInput {
  name: String!
  creatorID: String!
  startTime: Time!
  endTime: Time
  eventLocation: String!
}

type EventDeleteResponse {
  deletedEventID: ID
}

input EventDeleteInput {
  eventID: ID!
}

type EventEditResponse {
  event: Event!
}

input EventEditInput {
  eventID: ID!
  name: String
  creatorID: String
  startTime: Time
  endTime: Time
  eventLocation: String
}

type UserAuthResponse {
  token: String!
  viewerID: ID!
}

input UserAuthInput {
  emailAddress: String!
  password: String!
}

type UserAuthJWTResponse {
  token: String!
  viewerID: ID!
}

input UserAuthJWTInput {
  emailAddress: String!
  password: String!
}

type UserCreateResponse {
  user: User!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String
  password: String
}

type UserDeleteResponse {
  deletedUserID: ID
}

input UserDeleteInput {
  userID: ID!
}

type UserEditResponse {
  user: User!
}

input UserEditInput {
  userID: ID!
  firstName: String
  lastName: String
}
