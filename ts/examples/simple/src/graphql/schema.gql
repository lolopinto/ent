type Query {
  node(id: ID!): Node
  viewer: Viewer!
}

"""node interface"""
interface Node {
  id: ID!
}

type Viewer {
  viewerID: ID
  user: User
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String
  accountStatus: String
  bio: String
  createdEvents(first: Int, after: String, last: Int, before: String): UserToCreatedEventsConnection!
  declinedEvents(first: Int, after: String, last: Int, before: String): UserToDeclinedEventsConnection!
  eventsAttending(first: Int, after: String, last: Int, before: String): UserToEventsAttendingConnection!
  friends(first: Int, after: String, last: Int, before: String): UserToFriendsConnection!
  invitedEvents(first: Int, after: String, last: Int, before: String): UserToInvitedEventsConnection!
  maybeEvents(first: Int, after: String, last: Int, before: String): UserToMaybeEventsConnection!
  selfContact: Contact
  userToHostedEvents(first: Int, after: String, last: Int, before: String): UserToHostedEventsConnection!
  contacts(first: Int, after: String, last: Int, before: String): UserToContactsConnection!
  fullName: String!
  bar: String
  contactSameDomain: Contact
  contactsSameDomain: [Contact!]!
  contactsSameDomainNullable: [Contact!]
  contactsSameDomainNullableContents: [Contact]!
  contactsSameDomainNullableContentsAndList: [Contact]
}

type UserToCreatedEventsConnection implements Connection {
  edges: [UserToCreatedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type UserToCreatedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type Event implements Node {
  creator: User
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  eventLocation: String!
  attending(first: Int, after: String, last: Int, before: String): EventToAttendingConnection!
  declined(first: Int, after: String, last: Int, before: String): EventToDeclinedConnection!
  hosts(first: Int, after: String, last: Int, before: String): EventToHostsConnection!
  invited(first: Int, after: String, last: Int, before: String): EventToInvitedConnection!
  maybe(first: Int, after: String, last: Int, before: String): EventToMaybeConnection!
  viewerRsvpStatus: EventRsvpStatus
}

"""Time scalar type"""
scalar Time

type EventToAttendingConnection implements Connection {
  edges: [EventToAttendingEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToAttendingEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToDeclinedConnection implements Connection {
  edges: [EventToDeclinedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToDeclinedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToHostsConnection implements Connection {
  edges: [EventToHostsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToHostsEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToInvitedConnection implements Connection {
  edges: [EventToInvitedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToInvitedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToMaybeConnection implements Connection {
  edges: [EventToMaybeEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToMaybeEdge implements Edge {
  node: User!
  cursor: String!
}

enum EventRsvpStatus {
  ATTENDING
  DECLINED
  MAYBE
  INVITED
  CAN_RSVP
}

type UserToDeclinedEventsConnection implements Connection {
  edges: [UserToDeclinedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToDeclinedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToEventsAttendingConnection implements Connection {
  edges: [UserToEventsAttendingEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToEventsAttendingEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToFriendsConnection implements Connection {
  edges: [UserToFriendsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToFriendsEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToInvitedEventsConnection implements Connection {
  edges: [UserToInvitedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToInvitedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToMaybeEventsConnection implements Connection {
  edges: [UserToMaybeEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToMaybeEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type Contact implements Node {
  user: User
  id: ID!
  emailAddress: String!
  firstName: String!
  lastName: String!
  fullName: String!
}

type UserToHostedEventsConnection implements Connection {
  edges: [UserToHostedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToHostedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToContactsConnection implements Connection {
  edges: [UserToContactsEdge!]!
  nodes: [Contact!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToContactsEdge implements Edge {
  node: Contact!
  cursor: String!
}

type Mutation {
  addressCreate(input: AddressCreateInput!): AddressCreatePayload!
  confirmEmailAddressEdit(input: ConfirmEmailAddressEditInput!): ConfirmEmailAddressEditPayload!
  confirmPhoneNumberEdit(input: ConfirmPhoneNumberEditInput!): ConfirmPhoneNumberEditPayload!
  contactCreate(input: ContactCreateInput!): ContactCreatePayload!
  contactDelete(input: ContactDeleteInput!): ContactDeletePayload!
  contactEdit(input: ContactEditInput!): ContactEditPayload!
  emailAddressEdit(input: EmailAddressEditInput!): EmailAddressEditPayload!
  eventAddHost(input: EventAddHostInput!): EventAddHostPayload!
  eventCreate(input: EventCreateInput!): EventCreatePayload!
  eventDelete(input: EventDeleteInput!): EventDeletePayload!
  eventEdit(input: EventEditInput!): EventEditPayload!
  holidayCreate(input: HolidayCreateInput!): HolidayCreatePayload!
  hoursOfOperationCreate(input: HoursOfOperationCreateInput!): HoursOfOperationCreatePayload!
  phoneNumberEdit(input: PhoneNumberEditInput!): PhoneNumberEditPayload!
  userAuth(input: UserAuthInput!): UserAuthPayload!
  userAuthJWT(input: UserAuthJWTInput!): UserAuthJWTPayload!
  userCreate(input: UserCreateInput!): UserCreatePayload!
  userDelete(input: UserDeleteInput!): UserDeletePayload!
  userEdit(input: UserEditInput!): UserEditPayload!
}

type AddressCreatePayload {
  address: Address!
}

type Address implements Node {
  id: ID!
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String!
}

input AddressCreateInput {
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String
}

type ConfirmEmailAddressEditPayload {
  user: User!
}

input ConfirmEmailAddressEditInput {
  userID: ID!
  emailAddress: String!
  code: String!
}

type ConfirmPhoneNumberEditPayload {
  user: User!
}

input ConfirmPhoneNumberEditInput {
  userID: ID!
  phoneNumber: String!
  code: String!
}

type ContactCreatePayload {
  contact: Contact!
}

input ContactCreateInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  userID: ID!
}

type ContactDeletePayload {
  deletedContactID: ID
}

input ContactDeleteInput {
  contactID: ID!
}

type ContactEditPayload {
  contact: Contact!
}

input ContactEditInput {
  contactID: ID!
  emailAddress: String
  firstName: String
  lastName: String
  userID: ID
}

type EmailAddressEditPayload {
  user: User!
}

input EmailAddressEditInput {
  userID: ID!
  newEmail: String!
}

type EventAddHostPayload {
  event: Event!
}

input EventAddHostInput {
  eventID: ID!
  hostID: ID!
}

type EventCreatePayload {
  event: Event!
}

input EventCreateInput {
  name: String!
  creatorID: ID!
  startTime: Time!
  endTime: Time
  eventLocation: String!
}

type EventDeletePayload {
  deletedEventID: ID
}

input EventDeleteInput {
  eventID: ID!
}

type EventEditPayload {
  event: Event!
}

input EventEditInput {
  eventID: ID!
  name: String
  creatorID: ID
  startTime: Time
  endTime: Time
  eventLocation: String
}

type HolidayCreatePayload {
  holiday: Holiday!
}

type Holiday implements Node {
  id: ID!
  label: String!
  date: Time!
}

input HolidayCreateInput {
  label: String!
  date: Time!
}

type HoursOfOperationCreatePayload {
  hoursOfOperation: HoursOfOperation!
}

type HoursOfOperation implements Node {
  id: ID!
  dayOfWeek: dayOfWeek!
  open: String!
  close: String!
}

enum dayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input HoursOfOperationCreateInput {
  dayOfWeek: dayOfWeek!
  open: String!
  close: String!
}

type PhoneNumberEditPayload {
  user: User!
}

input PhoneNumberEditInput {
  userID: ID!
  newPhoneNumber: String!
}

type UserAuthPayload {
  viewerID: ID!
}

input UserAuthInput {
  emailAddress: String!
  password: String!
}

type UserAuthJWTPayload {
  token: String!
  viewerID: ID!
}

input UserAuthJWTInput {
  emailAddress: String!
  password: String!
}

type UserCreatePayload {
  user: User!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String!
  password: String!
}

type UserDeletePayload {
  deletedUserID: ID
}

input UserDeleteInput {
  userID: ID!
}

type UserEditPayload {
  user: User!
}

input UserEditInput {
  userID: ID!
  firstName: String
  lastName: String
}
