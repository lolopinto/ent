// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLList,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
} from "graphql";
import { ID, RequestContext } from "@lolopinto/ent";
import { GraphQLEdgeConnection } from "@lolopinto/ent/graphql";
import {
  ContactType,
  UserToCreatedEventsConnectionType,
  UserToFriendsConnectionType,
  UserToHostedEventsConnectionType,
  UserToInvitedEventsConnectionType,
  UserToEventsAttendingConnectionType,
  UserToDeclinedEventsConnectionType,
  UserToMaybeEventsConnectionType,
} from "src/graphql/resolvers/";
import {
  User,
  UserToCreatedEventsQuery,
  UserToFriendsQuery,
  UserToHostedEventsQuery,
  UserToInvitedEventsQuery,
  UserToEventsAttendingQuery,
  UserToDeclinedEventsQuery,
  UserToMaybeEventsQuery,
} from "src/ent/";

interface UserQueryArgs {
  id: ID;
}

export const UserType = new GraphQLObjectType({
  name: "User",
  fields: (): GraphQLFieldConfigMap<User, RequestContext> => ({
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    phoneNumber: {
      type: GraphQLString,
    },
    accountStatus: {
      type: GraphQLString,
    },
    createdEvents: {
      type: GraphQLNonNull(UserToCreatedEventsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToCreatedEventsQuery,
        );
      },
    },
    friends: {
      type: GraphQLNonNull(UserToFriendsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(user.viewer, user, UserToFriendsQuery);
      },
    },
    selfContact: {
      type: ContactType,
      resolve: (user: User) => {
        return user.loadSelfContact();
      },
    },
    userToHostedEvents: {
      type: GraphQLNonNull(UserToHostedEventsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToHostedEventsQuery,
        );
      },
    },
    invitedEvents: {
      type: GraphQLNonNull(UserToInvitedEventsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToInvitedEventsQuery,
        );
      },
    },
    eventsAttending: {
      type: GraphQLNonNull(UserToEventsAttendingConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToEventsAttendingQuery,
        );
      },
    },
    declinedEvents: {
      type: GraphQLNonNull(UserToDeclinedEventsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToDeclinedEventsQuery,
        );
      },
    },
    maybeEvents: {
      type: GraphQLNonNull(UserToMaybeEventsConnectionType()),
      resolve: (user: User) => {
        return new GraphQLEdgeConnection(
          user.viewer,
          user,
          UserToMaybeEventsQuery,
        );
      },
    },
    contacts: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(ContactType))),
      resolve: (user: User) => {
        return user.loadContacts();
      },
    },
    fullName: {
      type: GraphQLNonNull(GraphQLString),
    },
    bar: {
      type: GraphQLString,
      resolve: (user: User) => {
        return user.getUserBar();
      },
    },
    contactSameDomain: {
      type: ContactType,
      resolve: async (user: User) => {
        return user.getFirstContactSameDomain();
      },
    },
    contactsSameDomain: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(ContactType))),
      resolve: async (user: User) => {
        return user.getContactsSameDomain();
      },
    },
    contactsSameDomainNullable: {
      type: GraphQLList(GraphQLNonNull(ContactType)),
      resolve: async (user: User) => {
        return user.getContactsSameDomainNullable();
      },
    },
    contactsSameDomainNullableContents: {
      type: GraphQLNonNull(GraphQLList(ContactType)),
      resolve: async (user: User) => {
        return user.getContactsSameDomainNullableContents();
      },
    },
    contactsSameDomainNullableContentsAndList: {
      type: GraphQLList(ContactType),
      resolve: async (user: User) => {
        return user.getContactsSameDomainNullableContentsAndList();
      },
    },
  }),
});

export const UserQuery: GraphQLFieldConfig<
  undefined,
  RequestContext,
  UserQueryArgs
> = {
  type: UserType,
  args: {
    id: {
      description: "",
      type: GraphQLNonNull(GraphQLID),
    },
  },
  resolve: async (
    _source,
    args: UserQueryArgs,
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ) => {
    return User.load(context.getViewer(), args.id);
  },
};
