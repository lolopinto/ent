// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLInt,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
} from "graphql";
import { ID, RequestContext } from "@lolopinto/ent";
import {
  GraphQLTime,
  GraphQLNodeInterface,
  GraphQLEdgeConnection,
} from "@lolopinto/ent/graphql";
import {
  UserType,
  EventToHostsConnectionType,
  EventToInvitedConnectionType,
  EventToAttendingConnectionType,
  EventToDeclinedConnectionType,
  EventToMaybeConnectionType,
} from "src/graphql/resolvers/";
import {
  Event,
  EventToHostsQuery,
  EventToInvitedQuery,
  EventToAttendingQuery,
  EventToDeclinedQuery,
  EventToMaybeQuery,
} from "src/ent/";

interface EventQueryArgs {
  id: ID;
}

export const EventType = new GraphQLObjectType({
  name: "Event",
  fields: (): GraphQLFieldConfigMap<Event, RequestContext> => ({
    creator: {
      type: UserType,
      resolve: (event: Event, args: {}) => {
        return event.loadCreator();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    startTime: {
      type: GraphQLNonNull(GraphQLTime),
    },
    endTime: {
      type: GraphQLTime,
    },
    eventLocation: {
      type: GraphQLNonNull(GraphQLString),
      resolve: (event: Event, args: {}) => {
        return event.location;
      },
    },
    hosts: {
      type: GraphQLNonNull(EventToHostsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (event: Event, args: {}) => {
        return new GraphQLEdgeConnection(
          event.viewer,
          event,
          EventToHostsQuery,
          args,
        );
      },
    },
    invited: {
      type: GraphQLNonNull(EventToInvitedConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (event: Event, args: {}) => {
        return new GraphQLEdgeConnection(
          event.viewer,
          event,
          EventToInvitedQuery,
          args,
        );
      },
    },
    attending: {
      type: GraphQLNonNull(EventToAttendingConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (event: Event, args: {}) => {
        return new GraphQLEdgeConnection(
          event.viewer,
          event,
          EventToAttendingQuery,
          args,
        );
      },
    },
    declined: {
      type: GraphQLNonNull(EventToDeclinedConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (event: Event, args: {}) => {
        return new GraphQLEdgeConnection(
          event.viewer,
          event,
          EventToDeclinedQuery,
          args,
        );
      },
    },
    maybe: {
      type: GraphQLNonNull(EventToMaybeConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (event: Event, args: {}) => {
        return new GraphQLEdgeConnection(
          event.viewer,
          event,
          EventToMaybeQuery,
          args,
        );
      },
    },
  }),
  interfaces: [GraphQLNodeInterface],
});

export const EventQuery: GraphQLFieldConfig<
  undefined,
  RequestContext,
  EventQueryArgs
> = {
  type: EventType,
  args: {
    id: {
      description: "",
      type: GraphQLNonNull(GraphQLID),
    },
  },
  resolve: async (
    _source,
    args: EventQueryArgs,
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ) => {
    return Event.load(context.getViewer(), args.id);
  },
};
