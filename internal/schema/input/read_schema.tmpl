{{/* for now we are hardcoding to where this currently is. we should be better about this */ -}}
import Schema, {Field} from "{{.SchemaPath}}"

{{ range $schema := .Schemas -}}
  import {{$schema.Name}} from "./{{$schema.Path}}"
{{end -}}

let potentialSchemas = {
{{ range $schema := .Schemas -}}

  "{{$schema.Name}}": {{$schema.Name}},
{{end -}}
};

let schemas = {};

for (const key in potentialSchemas) {
  const value = potentialSchemas[key];
  let schema: Schema;
  if (value.constructor == Object) {
    schema = value;
  } else {
    schema = new value();
  }

  // let's put patterns first just so we have id, created_at, updated_at first
  // ¯\_(ツ)_/¯
  let fields: Field[] = [];
  //  let fields = [...schema.fields];
  if (schema.patterns) {
    for (const pattern of schema.patterns) {
      fields = fields.concat(pattern.fields);
    }
  }
  fields = fields.concat(schema.fields);

  schemas[key] = {
    tableName: schema.tableName,
    fields: fields,
  };
}

console.log(JSON.stringify(schemas));
