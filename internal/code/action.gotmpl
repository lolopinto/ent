{{ reserveImport "context"}} 

{{ reserveImport "github.com/lolopinto/ent/ent" }}
{{ reserveImport "github.com/lolopinto/ent/ent/actions" }}
{{ reserveImport "github.com/lolopinto/ent/ent/viewer" }}

{{$action := .Action -}}
{{$nodeInfo := nodeInfo $action -}}

{{with .Config -}}

	{{reserveImport .GetQuotedImportPathToModels}}
  {{reserveImport .GetQuotedImportPathToConfigs}}

  {{$builderPath := .AppendPathToModels $nodeInfo.NodeInstance }}
  {{reserveImport $builderPath "builder"}}

{{end -}}

{{$actionName := $action.GetActionName}}

{{$builderName := printf "%sMutationBuilder" $nodeInfo.Node -}}
{{$builderType := printf "*builder.%s" $builderName -}}

{{$nonEntFields := nonEntFields $action}}

type {{$actionName}} struct {
  builder {{$builderType}}
}

{{$actionMethodName := actionMethodName $action}}

// {{$actionMethodName}}FromContext is the factory method to get an ...
func {{$actionMethodName}}FromContext( {{actionMethodContextArgs $action}}) *{{$actionName}} {
  v, err := viewer.ForContext(ctx)
	if err != nil {
    panic("tried to perform mutation without a viewer")
	}
  return {{$actionMethodName}}({{argsToViewerMethod $action}})
}

// {{$actionMethodName}} is the factory method to get an ...
func {{$actionMethodName}}( {{actionMethodArgs $action}}) *{{$actionName}} {
  action := &{{$actionName}}{}
  {{/* TODO the best long term thing here probably is to push this into the builder and have EventMutationBuilder use an EdgeGroupMutationBuilder for example instead of an EntMutationBuilder however need to make it work for multiple group statuses in the same mutation so doing it this way instead for now */ -}}
  builder := builder.NewMutationBuilder(
    v,
    {{writeOperation $action}},
    action.requiredFields(),
    {{ if $action.MutatingExistingObject -}}
      actions.ExistingEnt({{$nodeInfo.NodeInstance}}),
    {{ end -}}
  )
  action.builder = builder
  return action
}

func (action *{{$actionName}}) GetBuilder() ent.MutationBuilder {
  return action.builder
}

func (action *{{$actionName}}) GetTypedBuilder() {{$builderType}} {
  return action.builder
}

func (action *{{$actionName}}) GetViewer() viewer.ViewerContext {
  return action.builder.GetViewer()
}

func (action *{{$actionName}}) SetBuilderOnTriggers(triggers []actions.Trigger) {
	action.builder.SetTriggers(triggers)
}

func (action *{{$actionName}}) SetBuilderOnObservers(observers []actions.Observer) {
  action.builder.SetObservers(observers)
}

func (action *{{$actionName}}) SetBuilderOnValidators(validators []actions.Validator) {
  action.builder.SetValidators(validators)
}

func (action *{{$actionName}}) GetChangeset() (ent.Changeset, error) {
  return actions.GetChangeset(action)
}

func (action *{{$actionName}}) Entity() ent.Entity {
  {{ if returnsObjectInstance $action -}}
    return action.builder.Get{{$nodeInfo.Node}}()
  {{ else -}}
    return nil
  {{end -}}
}

func (action *{{$actionName}}) ExistingEnt() ent.Entity {
  return action.builder.ExistingEnt()
}

{{$fields := fields $action}}

{{ range $field := $fields -}}
// {{$field.SetterMethodName}} sets the {{$field.FieldName}} while editing the {{$nodeInfo.Node}} ent 
func (action *{{$actionName}}) {{$field.SetterMethodName}}({{$field.InstanceName}} {{$field.InstanceType}}) *{{$actionName}} {
  action.builder.{{$field.SetterMethodName}}({{$field.InstanceName}})
  return action
}

  {{if $field.Field.Nullable -}}
  // {{$field.NullableSetterMethodName}} sets the {{$field.FieldName}} while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$field.NullableSetterMethodName}}({{$field.InstanceName}} *{{$field.InstanceType}}) *{{$actionName}} {
    action.builder.{{$field.NullableSetterMethodName}}({{$field.InstanceName}})
    return action
  }
  {{end -}}

  {{ if $field.Field.IDField -}}
  // {{$field.SetterMethodName}}Builder sets the {{$field.FieldName}} while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$field.SetterMethodName}}Builder(builder ent.MutationBuilder) *{{$actionName}} {
    action.builder.{{$field.SetterMethodName}}Builder(builder)
    return action
  }

  {{end -}}

{{end -}}

{{ range $field := $nonEntFields -}}
// {{$field.SetterMethodName}} sets the {{$field.FieldName}} while editing the {{$nodeInfo.Node}} ent 
func (action *{{$actionName}}) {{$field.SetterMethodName}}({{$field.InstanceName}} {{$field.InstanceType}}) *{{$actionName}} {
  {{ if $field.IsStatusEnum -}}
    action.builder.SetEnumValue({{$field.InstanceName}})
  {{ end -}}
  {{ if $field.IsGroupID -}}
    action.builder.SetIDValue({{$field.InstanceName}}, {{$field.NodeType}})
  {{ end -}}
  return action
}

{{end -}}

{{ $edges := edges $action}}

{{ range $edge := $edges -}}
  {{ if removeEdgeAction $action -}}
  // {{$edge.RemoveEntMethodName}} removes an instance of {{$edge.Node}} from the {{$edge.EdgeName}} edge while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$edge.RemoveEntMethodName}}({{$edge.InstanceName}}s ...{{$edge.InstanceType}}) *{{$actionName}} {
    action.builder.{{$edge.RemoveEntMethodName}}({{$edge.InstanceName}}s...)
    return action
  }

  // {{$edge.RemoveSingleIDMethodName}} removes an instance of {{$edge.Node}}ID from the {{$edge.EdgeName}} edge while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$edge.RemoveSingleIDMethodName}}({{$edge.InstanceName}}ID string) *{{$actionName}} {
    action.builder.{{$edge.RemoveSingleIDMethodName}}({{$edge.InstanceName}}ID)
    return action
  }

  {{ else -}}
  // {{$edge.AddEntMethodName}} adds an instance of {{$edge.Node}} to the {{$edge.EdgeName}} edge while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$edge.AddEntMethodName}}({{$edge.InstanceName}}s ...{{$edge.InstanceType}}) *{{$actionName}} {
    action.builder.{{$edge.AddEntMethodName}}({{$edge.InstanceName}}s...)
    return action
  }

  // {{$edge.AddSingleIDMethodName}} adds an instance of {{$edge.Node}}ID to the {{$edge.EdgeName}} edge while editing the {{$nodeInfo.Node}} ent 
  func (action *{{$actionName}}) {{$edge.AddSingleIDMethodName}}({{$edge.InstanceName}}ID string, options ...func(*ent.EdgeOperation)) *{{$actionName}} {
    action.builder.{{$edge.AddSingleIDMethodName}}({{$edge.InstanceName}}ID, options...)
    return action
  }
  {{end -}}
{{end -}}

func (action *{{$actionName}}) requiredFields() []string {
  return []string{
  {{ range $field := $fields -}}
    {{ if requiredField $action $field.Field -}}
      {{$field.QuotedFieldName}},
    {{ end -}}
  {{end -}}  
  }
}

// Validate returns an error if the current state of the action is not valid
func (action *{{$actionName}}) Validate() error {
  return action.builder.Validate()
}

// Save is the method called to execute this action and save change
func (action * {{$actionName}}) Save() {{saveActionType $action}} {
  {{ if returnsObjectInstance $action -}}
    err := actions.Save(action)
    if err != nil {
      return nil, err
    }
    return action.builder.Get{{$nodeInfo.Node}}(), err
  {{else -}}
    return actions.Save(action)
  {{end -}}
}

var _ actions.Action = &{{$actionName}}{}

