{{reserveImport "context"}}
{{reserveImport "errors"}} 
{{reserveImport "strings"}}
{{reserveImport "sync"}}

{{reserveImport	"github.com/google/uuid" }}
{{reserveImport	"github.com/lolopinto/ent/ent" }}
{{reserveImport	"github.com/lolopinto/ent/ent/cast" }}
{{reserveImport	"github.com/lolopinto/ent/ent/privacy" }}
{{reserveImport	"github.com/lolopinto/ent/ent/sql" }}
{{reserveImport	"github.com/lolopinto/ent/ent/viewer" }}
{{reserveImport "golang.org/x/crypto/bcrypt" }}

{{reserveImport .Config.GetQuotedImportPathToConfigs}}

{{with .NodeData -}}
{{ $constGroup := .ConstantGroups -}}

{{with .GetSortedConstantGroups -}}

{{ range . -}}
  {{if .CreateNewType -}}
  type {{.ConstType}} string
  {{end -}}
{{end -}}

const (
  {{ range . -}}
    {{$constType := .ConstType -}}
    {{range .GetSortedConstants -}}
      // {{.Comment}}
      {{.ConstName}} {{$constType}} = {{.ConstValue}}
    {{end}}

  {{end -}}
)
{{end -}}

{{with . -}}
  {{$currentNodeInstance := .NodeInstance}}
  {{$currentNode := .Node}}
  {{$currentPackageName := .PackageName}}
  {{$currentConfig := .EntConfig}}
  {{$currentLoader := .NewNodeLoader}}

  // {{.Node}} represents the `{{.Node}}` model 
  type {{.Node}} struct {
    ent.Node
    {{/* TODO, this needs to be configurable but this is fine for now */ -}}
    privacy.AlwaysDenyPrivacyPolicy
    {{ range $field := .FieldInfo.Fields -}} 
      {{if $field.TopLevelStructField -}}
        {{$field.GetFieldNameInStruct}} {{fTypeString $field}} {{$field.GetFieldTag}}
      {{end -}}
    {{end -}}
    viewer viewer.ViewerContext
  }

  type {{.Nodes}} map[string]*{{.Node}}


  // {{.NodeResult}} stores the result of loading a {{.Node}}. It's a tuple type which has 2 fields: 
  // a {{.Node}} and an error
  type {{.NodeResult}} struct {
    {{.Node}} *{{.Node}}
    Err error
  }

  func (res *{{.NodeResult}}) Error() string {
    return res.Err.Error()
  }

  // {{.NodesResult}} stores the result of loading a slice of {{.Node}}s. It's a tuple type which has 2 fields: 
  // a {{.NodesSlice}} and an error
  type {{.NodesResult}} struct {
    {{.Nodes}} {{.NodesSlice}}
    Err error
  }

  func (res *{{.NodesResult}}) Error() string {
    return res.Err.Error()
  }

  // {{.NodeLoader}} is an ent.PrivacyBackedLoader which is used to 
  // load {{.Node}}
  type {{.NodeLoader}} struct {
    nodes map[string]*{{.Node}}
    errs map[string]error
    results {{.NodesSlice}}
    v viewer.ViewerContext
    m sync.Mutex
  }

  func (res *{{.NodeLoader}}) GetNewInstance() ent.DBObject {
    return res.GetNew{{.Node}}()
  }

  func (res *{{.NodeLoader}}) GetNew{{.Node}}() *{{.Node}} {
    var {{.NodeInstance}} {{.Node}}
    {{.NodeInstance}}.viewer = res.v
    return &{{.NodeInstance}}
  }

  func (res *{{.NodeLoader}}) GetConfig() ent.Config {
    return {{.EntConfig}}
  }

  func (res *{{.NodeLoader}}) SetPrivacyResult(id string, obj ent.DBObject, err error) {
    res.m.Lock()
    defer res.m.Unlock()
    if err != nil {
      res.errs[id] = err
    } else if obj != nil {
      // TODO kill results?
      ent := obj.(*{{.Node}})
      res.nodes[id] = ent
      res.results = append(res.results, ent)
    }
  }

  func (res *{{.NodeLoader}}) GetEntForID(id string) *{{.Node}} {
    return res.nodes[id]
  }

  // hmm make private...
  func (res *{{.NodeLoader}}) List() {{.NodesSlice}} {
    return res.results
  }

  func (res *{{.NodeLoader}}) getFirstInstance() *{{.Node}} {
    if len(res.results) == 0 {
      return nil
    }
    return res.results[0]
  }

  func (res *{{.NodeLoader}}) getFirstErr() error {
    for _, err := range res.errs {
      return err
    }
	  return nil
  }

  // {{.NewNodeLoader}} returns a new {{.NodeLoader}} which is used to load one or more {{.Nodes}}
  func {{.NewNodeLoader}}(v viewer.ViewerContext) *{{.NodeLoader}} {
    return &{{.NodeLoader}}{
      nodes: make(map[string]*{{.Node}}),
      errs: make(map[string]error),
      v: v,
    }
  }

  // IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
  func ({{.NodeInstance}} {{.Node}}) IsNode() {}

  // GetType returns the NodeType of this entity. In this case: ContactType
  func ({{.NodeInstance}} *{{.Node}}) GetType() ent.NodeType {
    return {{.NodeType}}
  }

  // GetViewer returns the viewer for this entity.
  func ({{.NodeInstance}} *{{.Node}}) GetViewer() viewer.ViewerContext {
    return {{.NodeInstance}}.viewer
  }

  // Load{{.Node}}FromContext loads the given {{.Node}} given the context and id
  func Load{{.Node}}FromContext(ctx context.Context, id string) (*{{.Node}}, error) {
    v, err := viewer.ForContext(ctx)
    if err != nil {
      return nil, err
    }
    return Load{{.Node}}(v, id)
  }

  // GenLoad{{.Node}}FromContext loads the given {{.Node}} given the context and id
  func GenLoad{{.Node}}FromContext(ctx context.Context, id string) <-chan *{{.NodeResult}} {
    res := make(chan *{{.NodeResult}})
    go func() {
      {{.NodeInstance}}, err := Load{{.Node}}FromContext(ctx, id)
      res <- &{{.NodeResult}}{
        Err: err,
        {{.Node}}: {{.NodeInstance}},
      }
    }()
    return res
  }

  // Load{{.Node}} loads the given {{.Node}} given the viewer and id
  func Load{{.Node}}(v viewer.ViewerContext, id string) (*{{.Node}}, error) {
    loader := {{.NewNodeLoader}}(v)
    err := ent.LoadNode(v, id, loader)
    return loader.nodes[id], err
  }

  // GenLoad{{.Node}} loads the given {{.Node}} given the id
  func GenLoad{{.Node}}(v viewer.ViewerContext, id string) <-chan *{{.NodeResult}}{
    res := make(chan *{{.NodeResult}})
    go func() {
      {{.NodeInstance}}, err := Load{{.Node}}(v, id)
      res <- &{{.NodeResult}}{
        Err: err,
        {{.Node}}: {{.NodeInstance}},
      }
    }()
    return res
  }

  // Load{{.Nodes}} loads multiple {{.Nodes}} given the ids
  func Load{{.Nodes}}(v viewer.ViewerContext, ids ...string) ({{.NodesSlice}}, error) {
    loader := {{.NewNodeLoader}}(v)
    err := ent.LoadNodes(v, ids, loader)
    return loader.results, err
  }

  // GenLoad{{.Nodes}} loads multiple {{.Nodes}} given the ids
  func GenLoad{{.Nodes}}(v viewer.ViewerContext, ids ...string) <-chan *{{.NodesResult}} {
    res := make(chan *{{.NodesResult}})
    go func() {
      results, err := Load{{.Nodes}}(v, ids...)
      res <- &{{.NodesResult}}{
        Err: err,
        {{.Nodes}}: results,
      }
    }()
    return res
  }

  {{ range $field := .FieldInfo.Fields -}} 
    {{if or $field.Index $field.Unique -}}
      func Load{{$currentNode}}IDFrom{{$field.FieldName}}({{$field.InstanceFieldName}}  {{notNullableTypeString $field}}) ({{notNullableTypeString $field}}, error) {
        loader := {{$currentLoader}}(viewer.LoggedOutViewer())
        data, err := ent.LoadNodeRawDataViaQueryClause(
          loader,
          sql.Eq({{$field.GetQuotedDBColName}}, {{$field.InstanceFieldName}}),
        )
        if err != nil {
          return "", err
        }
        return cast.ToUUIDString(data["id"])
      }

      func Load{{$currentNode}}From{{$field.FieldName}}(v viewer.ViewerContext, {{$field.InstanceFieldName}} {{notNullableTypeString $field}}) (*{{$currentNode}}, error) {
        loader := {{$currentLoader}}(v)
        err := ent.LoadNodeViaQueryClause(v, loader, sql.Eq({{$field.GetQuotedDBColName}}, {{$field.InstanceFieldName}}))
        if err != nil {
          return nil, err
        }
        return loader.getFirstInstance(), loader.getFirstErr()
      } 

    {{end -}}
  {{end -}}

  {{ if $combo := .FieldInfo.GetEmailPasswordCombo -}}
    {{$emailField := $combo.Email -}}
    {{$passwordField := $combo.Password -}}
    func ValidateEmailPassword(emailAddress, password string) (string, error) {
      loader := {{$currentLoader}}(viewer.LoggedOutViewer())
      data, err := ent.LoadNodeRawDataViaQueryClause(
        loader,
        sql.Eq({{$emailField.GetQuotedDBColName}}, emailAddress),
      )
      if err != nil {
        return "", err
      }
      storedHashedPassword, err := cast.ToString(data[{{$passwordField.GetQuotedDBColName}}])
      if err != nil {
        return "", err
      }

      if err := bcrypt.CompareHashAndPassword([]byte(storedHashedPassword), []byte(password)); err != nil {
        return "", err
      }
      
      return cast.ToUUIDString(data["id"])
    }
  {{ end -}}

  {{/* todo: deal with importing right packages above and circular dependency all that jazz*/}}
  {{/* this should be user/factory. user/config? user/query user/privacy etc. */}}
  {{with .EdgeInfo}}
    {{range $edge := .FieldEdges -}}
      {{$edgeName := .EdgeName -}}
      {{with .NodeInfo -}}
        // Gen{{$edgeName}} returns the {{$edgeName}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}() <-chan *{{.NodeResult}}{
          return GenLoad{{.Node}}({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.{{$edge.FieldName}})
        }

        // Load{{$edgeName}} returns the {{$edgeName}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() (*{{.Node}}, error) {
          return Load{{.Node}}({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.{{$edge.FieldName}})
        }
      {{end}}
    {{end}}
    {{range $edge := .DestinationEdges -}}
      {{$edgeName := .GetEdgeName -}}
      {{with .GetNodeInfo -}}
        // Gen{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}() <-chan *{{.NodesResult}} {
          res := make(chan *{{.NodesResult}})
          go func() {
            loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
            err := ent.LoadNodesViaQueryClause({{$currentNodeInstance}}.viewer, loader, sql.Eq({{$edge.QuotedDBColName}}, {{$currentNodeInstance}}.ID))
            res <- &{{.NodesResult}}{
              Err: err,
              {{.Nodes}}: loader.results,
            }
          }()
          return res
        }

        // Load{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() ({{.NodesSlice}}, error) {
          loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
          err := ent.LoadNodesViaQueryClause({{$currentNodeInstance}}.viewer, loader, sql.Eq({{$edge.QuotedDBColName}}, {{$currentNodeInstance}}.ID))
          return loader.results, err
        }
      {{end}}
    {{end}}
    {{range $edge := .Associations -}}
      {{$edgeName := .EdgeName -}}
      {{$uniqueEdge := .Unique -}}
      {{with .NodeInfo -}}

        {{ if $uniqueEdge -}}
          // Load{{$edgeName}}Edge returns the {{$edgeName}} edge associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}Edge() (*ent.AssocEdge, error) {
            return ent.LoadUniqueEdgeByType({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}})
          }

          // Gen{{$edgeName}}Edge returns the {{$edgeName}} edge associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}Edge() <-chan *ent.AssocEdgeResult {
            return ent.GenLoadUniqueEdgeByType({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}})
          }

          // Gen{{$edgeName}} returns the {{.Node}} associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}() <-chan *{{.NodeResult}} {
            res := make(chan *{{.NodeResult}})
            go func() {
              loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
              err := ent.LoadUniqueNodeByType({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, loader)
              res <- &{{.NodeResult}}{
                Err: err,
                {{.Node}}: loader.getFirstInstance(),
              }
            }()
            return res
          }

          // Load{{$edgeName}} returns the {{.Node}} associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() (*{{.Node}}, error) {
            loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
            err := ent.LoadUniqueNodeByType({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, loader)
            return loader.getFirstInstance(), err
          }
        {{else -}}
          // Load{{$edgeName}}Edges returns the {{$edgeName}} edges associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}Edges() ([]*ent.AssocEdge, error) {
            return ent.LoadEdgesByType({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}})
          }

          // Gen{{$edgeName}}Edges returns the {{.Node}} edges associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}Edges() <-chan *ent.AssocEdgesResult {
            return ent.GenLoadEdgesByType({{$currentNodeInstance}}.ID, {{$edge.EdgeConst}})
          }

          // Gen{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}() <-chan *{{.NodesResult}} {
            res := make(chan *{{.NodesResult}})
            go func() {
              loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
              err := ent.LoadNodesByType({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, loader)
              res <- &{{.NodesResult}}{
                Err: err,
                {{.Nodes}}: loader.results,
              }
            }()
            return res
          }

          // Load{{$edgeName}} returns the {{.Nodes}} associated with the {{$currentNode}} instance
          func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edgeName}}() ({{.NodesSlice}}, error) {
            loader := {{.NewNodeLoader}}({{$currentNodeInstance}}.viewer)
            err := ent.LoadNodesByType({{$currentNodeInstance}}.viewer, {{$currentNodeInstance}}.ID, {{$edge.EdgeConst}}, loader)
            return loader.results, err
          }
        {{end -}}


        // Load{{$edge.Singular}}EdgeFor loads the ent.AssocEdge between the current node and the given id2 for the {{$edgeName}} edge.
        func ({{$currentNodeInstance}} *{{$currentNode}}) Load{{$edge.Singular}}EdgeFor(id2 string) (*ent.AssocEdge, error) {
          return ent.LoadEdgeByType({{$currentNodeInstance}}.ID, id2, {{$edge.EdgeConst}})
        }

        // Gen{{$edge.Singular}}EdgeFor provides a concurrent API to load the ent.AssocEdge between the current node and the given id2 for the {{$edgeName}} edge.
        func ({{$currentNodeInstance}} *{{$currentNode}}) GenLoad{{$edge.Singular}}EdgeFor(id2 string) <-chan *ent.AssocEdgeResult {
          return ent.GenLoadEdgeByType({{$currentNodeInstance}}.ID, id2, {{$edge.EdgeConst}})
        }
      {{end}}
    {{end }}

    {{range $assocEdgeGroup := .AssocGroups -}}
      {{- $const := $assocEdgeGroup.ConstType -}}
      {{$funcName := $assocEdgeGroup.GetStatusFuncName -}}
      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$funcName}}() (*{{$const}}, error) {
        if !viewer.HasIdentity({{$currentNodeInstance}}.viewer) {
          ret := {{$assocEdgeGroup.GetConstNameForUnknown}}
      		return &ret, nil
        }
        statusMap := {{$currentNodeInstance}}.{{$assocEdgeGroup.GroupStatusName}}Map()
        edges := make(map[string]*ent.AssocEdge)
        errs := make(map[string]error)
        for key, data := range statusMap {
          // TODO concurrent versions
          edges[key], errs[key] = ent.LoadEdgeByType({{$currentNodeInstance}}.ID, {{$currentNodeInstance}}.viewer.GetViewerID(), data.Edge)
        }
        for _, err := range errs {
          if err != nil {
            return nil, err
          }
        }
        var ret {{$const}}
        for key, edge := range edges {
          // TODO better zero value behavior at some point
      		if edge != nil && edge.ID1 != "" {
            var ok bool
            ret, ok = statusMap[key].ConstName.({{$const}})
            if !ok {
      				return nil, errors.New("error casting constant to {{$const}}")
      			}
            break
          }
        }
        return &ret, nil
      }

      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$funcName}}ForGQL() (*string, error) {
        enum, err := {{$currentNodeInstance}}.{{$assocEdgeGroup.GetStatusFuncName}}()
        if err != nil {
          return nil, err
        }
        str := string(*enum)
        return &str, nil
      }

      func ({{$currentNodeInstance}} *{{$currentNode}}) {{$assocEdgeGroup.GroupStatusName}}Map() ent.AssocStatusMap {
        {{ $constInfo := index $constGroup $const -}}
        return ent.AssocStatusMap {
        {{ range $assocEdge := $assocEdgeGroup.Edges -}}
          {{ $edgeName := $assocEdge.EdgeName -}}
          {{ $constName := $assocEdgeGroup.GetConstNameForEdgeName $edgeName -}}
          {{ $constInfo := index $constInfo.Constants $constName -}}
          {{ $constInfo.ConstValue}}: &ent.AssociationEdgeGroupStatusInfo{
            EdgeName: "{{$edgeName}}",
            Edge: {{$assocEdge.EdgeConst}},
            ConstName: {{$constName}},
            {{ if $assocEdgeGroup.UseEdgeInStatusAction $edgeName -}}
              UseInStatusAction: true,
            {{ else -}}
              UseInStatusAction: false,
            {{ end -}}
          },
        {{ end -}}
        }
      }
    {{ end -}}
  {{end}}

// DBFields is used by the ent framework to load the ent from the underlying database
func ({{$currentNodeInstance}} *{{$currentNode}}) DBFields() ent.DBFields {
  return ent.DBFields {
    {{/* TODO don't hardcode these three when we make this flexible*/ -}}
    "id": func(v interface{}) error {
      var err error
      {{$currentNodeInstance}}.ID, err = cast.ToUUIDString(v)
      return err
    },
    "created_at": func(v interface{}) error {
      var err error
      {{$currentNodeInstance}}.CreatedAt, err = cast.ToTime(v)
      return err
    },
    "updated_at": func(v interface{}) error {
      var err error
      {{$currentNodeInstance}}.UpdatedAt, err = cast.ToTime(v)
      return err
    },
    {{ range $field := .FieldInfo.Fields -}}
      {{if $field.TopLevelStructField -}}
        "{{$field.GetDbColName}}": func(v interface{}) error {
          {{if ne $field.GetCastToMethod "cast.UnmarshallJSON" -}}
            var err error
            {{$currentNodeInstance}}.{{$field.GetFieldNameInStruct}}, err = {{$field.GetCastToMethod}}(v)
            return err
          {{else -}}
            return cast.UnmarshallJSON(v, &{{$currentNodeInstance}}.{{$field.GetFieldNameInStruct}})
          {{end -}}
        },
      {{end -}}
    {{end -}}
  }
}

{{if or .HasJSONField .HasPrivateField -}}
  // UnsupportedScan flags that we can't call StructScan() on the ent to get data out of the db, have to always use MapScan() and DBFields() method above
  func ({{$currentNodeInstance}} *{{$currentNode}}) UnsupportedScan() bool {
    return true
  }
{{end -}}

{{end}}

var _ ent.Entity = &{{.Node}}{}

{{end -}}
