{{reserveImport .Config.GetQuotedImportPathToModels}}
{{reserveImport .Config.GetQuotedImportPathToConfigs}}

{{ reserveImport "github.com/lolopinto/ent/ent/viewer"}}


// {{.VCName}} represents who's logged in (if any) at any given time
type {{.VCName}} struct {
  viewerID string 
  user *models.{{.NodeName}}
}

// GetViewerID returns the ID of the logged in viewer
func (v *{{.VCName}}) GetViewerID() string {
  return v.viewerID
}

// GetViewer returns the logged in entity
func (v *{{.VCName}}) GetViewer() viewer.LoggedInEntity {
  return v.{{.InstanceName}}
}

// Get{{.NodeName}} returns the {{.NodeName}} associated with {{.VCName}}
func (v *{{.VCName}})Get{{.NodeName}}() *models.{{.NodeName}} {
  return v.{{.InstanceName}}
}

// NewViewerContext takes a viewer id and returns a viewer context mapping to said user
func NewViewerContext(viewerID string) (viewer.ViewerContext, error) {
  // init viewer
  v := &{{.VCName}}{viewerID: viewerID}
  // pass viewer to load function presumably the privacy model of this object allows viewer to 
  // see themselves...
  {{/* TODO this can be part of the general init method. Allows user to see themselves, creates user.go with said privacy change in there */ -}}
  {{/* this probably also helps to fix the bug right now where we don't check privacy of object after creation */ -}}
  {{.InstanceName}}, err := models.Load{{.NodeName}}(v, viewerID)
  if err != nil {
    return nil, err
  }
  v.{{.InstanceName}} = {{.InstanceName}}
  return v, nil
}