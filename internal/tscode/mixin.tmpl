{{ reserveImport .Package.PackagePath "loadEnt" "ID" "Data"  "loadEntX" "loadEnts" "LoadEntOptions" "loadNodesByEdge" "loadRow" "loadRows" "loadRowX" "loadUniqueEdge" "loadUniqueNode" "AllowIfViewerPrivacyPolicy" "PrivacyPolicy" "query" "Ent" "getEdgeTypeInGroup" "ObjectLoaderFactory" "Context" "loadEntViaKey" "loadEntXViaKey" "CustomQuery" "loadCustomEnts" "loadCustomData" "applyPrivacyPolicy" "Ent" "Viewer" "Data"}}

{{$p := .Pattern}}
{{$cfg := .Config}}
{{$schema := .Schema}}

{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := useImport $viewerInfo.GetImport -}}

{{ reserveImport $p.GetImportPathForMixinBase  $p.GetMixinBaseName $p.GetPatternMethod $p.GetMixinInterfaceBaseName -}}

export interface {{$p.GetMixinInterfaceName}} <TViewer extends {{useImport $viewerType}} = {{useImport $viewerType}}>
  extends {{useImport $p.GetMixinInterfaceBaseName }}<TViewer> {

  {{$p.GetPatternMethod}}(): boolean;

  // add custom fields

}

type Constructor<T extends {{$p.GetMixinInterfaceName}} = {{$p.GetMixinInterfaceName}}> = new (...args: any[]) => T;

export function {{$p.GetPatternMethod}}(ent: unknown): ent is {{$p.GetMixinInterfaceName}} {
  const o = ent as {{$p.GetMixinInterfaceName}};
  return o.{{$p.GetPatternMethod}} && o.{{$p.GetPatternMethod}}() ?? false;
}

{{ range $p.GetImportsForMixin $schema $cfg -}} 
  {{ reserveImportPath . false -}}
{{ end}}


export function {{$p.GetMixinName}}<T extends Constructor>(BaseClass: T) {
  return class {{$p.GetMixinName}} extends {{useImport $p.GetMixinBaseName}}(BaseClass) implements {{$p.GetMixinInterfaceName}} {

    {{$p.GetPatternMethod}}() {
      return true;
    }

    // add custom fields implementation
  };
}