{{ reserveImport .Package.PackagePath "loadEnt" "ID" "Data"  "loadEntX" "loadEnts" "LoadEntOptions" "loadNodesByEdge" "loadRow" "loadRows" "loadRowX" "loadUniqueEdge" "loadUniqueNode" "AllowIfViewerPrivacyPolicy" "PrivacyPolicy" "query" "Ent" "getEdgeTypeInGroup" "ObjectLoaderFactory" "Context" "loadEntViaKey" "loadEntXViaKey" "CustomQuery" "loadCustomEnts" "loadCustomData" "applyPrivacyPolicy" "Ent" "Viewer" "Data"}}

{{$p := .Pattern}}
{{$cfg := .Config}}
{{$schema := .Schema}}

{{ range $p.GetImportsForMixin $schema $cfg -}} 
  {{ reserveImportPath . false -}}
{{ end}}

export interface {{$p.GetMixinInterfaceBaseName}}<TViewer extends {{useImport "Viewer"}} = Viewer> extends {{useImport "Ent" }}<TViewer> {
  {{ range $field := $p.FieldInfo.EntFields -}}
    {{ range $field.GetTsTypeImports -}}
      {{ if ($p.ForeignImport .Import) -}}
        {{ reserveImportPath . false -}}
      {{end -}}
      {{$typ := useImportMaybe .Import -}}
    {{end -}}
    {{$field.TsFieldName $cfg}}: {{$field.TsFieldType $cfg}};
  {{end -}}
  {{/* no easy way to guarantee this from the mixin so we'll just do it from the ent side */ -}}
  {{range $edge := $p.AssocEdges -}}
    {{$edgeName := .CamelCaseEdgeName -}}
    {{$queryName := useImport $edge.TsEdgeQueryName -}}
    query{{$edgeName}}(): {{$queryName}};
  {{end -}}
}

type Constructor<T extends {{$p.GetMixinInterfaceBaseName}} = {{$p.GetMixinInterfaceBaseName}}> = new (...args: any[]) => T;


{{ if $p.HasFields -}}
  function extractFromArgs<TViewer extends {{useImport "Viewer"}}, TData extends {{useImport "Data"}}>(
    args: any[],
  ): { viewer: TViewer; data: TData } {
    if (args.length !== 2) {
      throw new Error("args should be length 2");
    }
    return {
      viewer: args[0],
      data: args[1],
    };
  }
{{ end}}


export function {{$p.GetMixinBaseName}}<T extends Constructor>(BaseClass: T) {
  return class {{$p.GetMixinBaseName}} extends BaseClass {

    {{ range $field := $p.FieldInfo.EntFields -}}
      readonly {{$field.TsFieldName $cfg}}: {{$field.TsFieldType $cfg}};
    {{end -}}
  
    constructor(...args: any[]) {
      super(...args);
      {{ if $p.HasFields -}}
        const { data } = extractFromArgs(args);
      {{ end -}}

      {{ range $field := $p.FieldInfo.EntFields -}}
        {{$val := printf "data.%s" $field.GetDbColName -}}
        this.{{$field.TsFieldName $cfg}} = {{callAndConvertFunc $field $cfg  $val }}
      {{end -}}
    }
  };
}