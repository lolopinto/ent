{{ reserveImport .Package.PackagePath "loadEnt" "ID" "Data" "Viewer" "loadEntX" "loadEnts" "LoadEntOptions" "AssocEdge" "loadNodesByEdge" "loadRow" "loadRows" "loadRowX" "loadUniqueEdge" "loadUniqueNode" "AllowIfViewerPrivacyPolicy" "PrivacyPolicy" "query" "Ent" "getEdgeTypeInGroup" "ObjectLoaderFactory" "Context" "IndexLoaderFactory" "loadEntViaKey" "loadEntXViaKey" "CustomQuery" "loadCustomEnts" "loadCustomData"}}
{{ reserveImport .Package.SchemaPackagePath "Field" "getFields"}}
{{ reserveImport .Package.InternalImportPath "EdgeType" "NodeType" }}
{{ reserveImport "src/ent/generated/loadAny" "loadEntByType" "loadEntXByType"}}
{{ reserveImport .PrivacyConfig.Path .PrivacyConfig.PolicyName }}

{{ $privacyCfg := .PrivacyConfig -}}

{{with .NodeData -}}

{{ range .GetImportsForBaseFile -}} 
  {{ if .DefaultImport -}}
    {{ reserveDefaultImport .PackagePath .Import}}
  {{ else -}}
    {{ reserveImport .PackagePath .Import}}
  {{end -}}
{{ end}}

{{$viewerType := useImport "Viewer"}}
{{$idType := useImport "ID" }}
{{$dataType := useImport "Data" }}
{{$loaderName := printf "%sLoader" .NodeInstance }}
{{$this := .}}

const tableName = "{{.TableName}}";
const fields = [
  {{range $field := .FieldInfo.Fields -}}
    '{{$field.GetDbColName}}',
  {{end}}
];

{{$baseClass := printf "%sBase" .Node -}}
{{$constructor := "arg: new (viewer: Viewer, data: Data) => T"}}
{{$thisType := "new (viewer: Viewer, data: Data) => T"}}

{{ range .GetTSEnums -}}
  {{if not .Imported -}}
    {{ template "enum.tmpl" . -}}
  {{end -}}
{{ end}}

export class {{$baseClass}} {

  readonly nodeType = {{useImport "NodeType"}}.{{.Node}};
  {{range $field := .FieldInfo.Fields -}}
    {{ range $imp := $field.ForeignImports -}}
      {{$typ := useImportMaybe $imp -}}
    {{end -}}
    {{ if $field.Private -}}
      protected readonly {{$field.TsFieldName}}: {{$field.TsType}};
    {{ else -}}
      readonly {{$field.TsFieldName}}: {{$field.TsType}};
    {{end -}}
  {{end}}

  constructor(public viewer: {{$viewerType}}, protected data:{{$dataType}}) {
    {{range $field := .FieldInfo.Fields -}}
      {{$val := printf "data.%s" $field.GetDbColName -}}
      {{$convertType := convertFunc $field.GetFieldType -}}
      {{if $convertType -}} 
        {{/* could be BigInt which isn't reserved */ -}}
        this.{{$field.TsFieldName}} = {{useImportMaybe $convertType}}({{$val}});
      {{ else -}}
        this.{{$field.TsFieldName}} = {{$val}};
      {{end -}}
    {{end}}
  }

  {{ if $privacyCfg.Class }}
    privacyPolicy: {{useImport "PrivacyPolicy"}} = new {{useImport $privacyCfg.PolicyName}}();
  {{ else }}
    privacyPolicy: {{useImport "PrivacyPolicy"}} = {{useImport $privacyCfg.PolicyName}};
  {{ end }}

  static async load<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}}, 
    id: {{$idType}},
  ): Promise<T | null>{
    return await {{useImport "loadEnt"}}(
      viewer, 
      id, 
      {{$baseClass}}.loaderOptions.apply(this),
    ) as T | null;
  }

  static async loadX<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}}, 
    id: {{$idType}},
  ): Promise<T> {
    return await {{useImport "loadEntX"}}(
      viewer, 
      id, 
      {{$baseClass}}.
      loaderOptions.apply(this),
    ) as T;
  }

  static async loadMany<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}},
    ...ids: {{$idType}}[]
  ): Promise<T[]> {
    return await {{useImport "loadEnts"}}(
      viewer, 
      {{$baseClass}}.loaderOptions.apply(this), 
      ...ids,
    ) as T[];
  }

  static async loadCustom<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}},
    query: {{useImport "CustomQuery"}},
  ): Promise<T[]> {
    return await {{useImport "loadCustomEnts"}}(
      viewer,
      {{$baseClass}}.loaderOptions.apply(this),
      query,
    ) as T[];
  }

  static async loadCustomData<T extends {{$baseClass}}>(
    this: {{$thisType}},
    query: {{useImport "CustomQuery"}},
    context?: {{useImport "Context"}}
  ): Promise<Data[]> {
    return {{useImport "loadCustomData"}}(
      {{$baseClass}}.loaderOptions.apply(this),
      query,
      context,
    );
  }

  static async loadRawData<T extends {{$baseClass}}>(
    this: {{$thisType}},
    id: ID,
    context?: {{useImport "Context"}},
  ): Promise<{{$dataType}} | null> {
    return {{$loaderName}}.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends {{$baseClass}}>(
    this: {{$thisType}},
    id: ID,
    context?: {{useImport "Context"}},
  ): Promise<{{$dataType}}> {
    const row = await {{$loaderName}}.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }


  {{ range $field := .FieldInfo.Fields -}}
    {{ if $field.Unique  -}}
      {{$fieldLoader := $this.GetFieldLoaderName $field -}}
      static async loadFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: {{$viewerType}},
        {{$field.TsFieldName}}: {{$field.GetNotNullableTsType}},
      ): Promise<T | null> {
        return await {{useImport "loadEntViaKey"}}(
          viewer, 
          {{$field.TsFieldName}},
          {
            ...{{$baseClass}}.loaderOptions.apply(this), 
            loaderFactory: {{$fieldLoader}},
          },
        ) as T | null;
      }

      static async loadFrom{{$field.CamelCaseName}}X<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: Viewer,
        {{$field.TsFieldName}}: {{$field.GetNotNullableTsType}},
      ): Promise<T> {
        return await {{useImport "loadEntXViaKey"}}(
          viewer, 
          {{$field.TsFieldName}},
          {
            ...{{$baseClass}}.loaderOptions.apply(this), 
            loaderFactory: {{$fieldLoader}},
          },
        ) as T;
      }

      static async loadIDFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        {{$field.TsFieldName}}: {{$field.GetNotNullableTsType}},
        context?: {{useImport "Context"}},
      ): Promise<{{$idType}} | undefined> {
        const row = await {{$fieldLoader}}.createLoader(context).load({{$field.TsFieldName}});
        return row?.id;
      }

      static async loadRawDataFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        {{$field.TsFieldName}}: {{$field.GetNotNullableTsType}},
        context?: {{useImport "Context"}},
      ): Promise<{{$dataType}} | null> {
        return {{$fieldLoader}}.createLoader(context).load({{$field.TsFieldName}});
      }
    {{ else if $field.QueryFromEnt -}}
      {{$queryName := useImport ($this.GetFieldQueryName $field) -}}
      static queryFrom{{$field.QueryFromEntName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: {{$viewerType}},
        ent: {{useImport "Ent"}},
      ): {{$queryName}} {
        return {{$queryName}}.query(viewer, ent);
      }
    {{ else if $field.QueryFrom -}}
    // TODO index {{$field.FieldName}} not id... we want an indexQueryLoader...
    {{end}}
  {{end -}}

  static loaderOptions<T extends {{$baseClass}}>(
    this: new (viewer: {{$viewerType}}, data: Data) => T,
  ): {{useImport "LoadEntOptions"}}<T> {
    return {
      tableName,
      fields,
      ent: this,
      loaderFactory: {{$loaderName}},
    };
  }

  private static schemaFields: Map<string, {{useImport "Field"}}>;

  private static getSchemaFields(): Map<string, {{useImport "Field"}}> {
    if ({{$baseClass}}.schemaFields != null) {
      return {{$baseClass}}.schemaFields;
    }
    return {{$baseClass}}.schemaFields = {{useImport "getFields"}}({{useImport "schema"}});
  }

  static getField(key: string): {{useImport "Field"}} | undefined{
    return {{$baseClass}}.getSchemaFields().get(key);
  }

  {{ range $group := .EdgeInfo.AssocGroups -}}
    {{if $group.NullStateFn -}}
    // this should be overwritten by subclasses as needed. 
    protected async {{$group.NullStateFn}}() {
      return {{$group.ConstType}}.{{$group.DefaultNullState}};
    }
    {{end}}

    {{$group.GetStatusMapMethod}}() {
      let m:Map<{{$group.ConstType}}, {{useImport "EdgeType"}}> = new Map();
      {{range $k, $v := $group.GetStatusMap -}}
        m.set({{$group.ConstType}}.{{$k}}, {{useImport "EdgeType"}}.{{$v}});
      {{end -}}
      return m;
    }

    async {{$group.GetStatusMethod}}(): Promise<{{$group.ConstType}}> {
      {{if $group.NullStateFn -}}
        const ret = await this.{{$group.NullStateFn}}();
      {{else -}}
        const ret= {{$group.ConstType}}.{{$group.DefaultNullState}};
      {{end -}}
      if (!this.viewer.viewerID) {
        return ret;
      }
      const g = await {{useImport "getEdgeTypeInGroup"}}(
        this.viewer,
        this.id,
        this.viewer.viewerID!,
        this.get{{$group.ConstType}}Map(),
      );
      if (g) {
        return g[0];
      }
      return ret;
    }
  {{end -}}

  {{/* load edges and load objects */ -}}
  {{range $edge := .EdgeInfo.Associations -}}
    {{$edgeName := .CamelCaseEdgeName -}}
    {{$uniqueEdge := .Unique -}}
    {{with .NodeInfo -}}
     {{ if $uniqueEdge -}}
      {{$assocEdgeType := useImport "AssocEdge"}}
      {{$edgeType := useImport "EdgeType"}}
      load{{$edgeName}}Edge(): Promise<{{$assocEdgeType}} | null> {
        return {{useImport "loadUniqueEdge"}}({
          id1: this.id, 
          edgeType: {{$edgeType}}.{{$edge.TsEdgeConst}},
          context: this.viewer.context,
        });
      }

      load{{$edgeName}}(): Promise<{{useImport .Node}} | null> {
        return {{useImport "loadUniqueNode"}}(
          this.viewer, 
          this.id, 
          {{$edgeType}}.{{$edge.TsEdgeConst}}, 
          {{.Node}}.loaderOptions(),
        );
      }

     {{ else -}}

      {{$queryName := useImport $edge.TsEdgeQueryName}}
      query{{$edgeName}}(): {{$queryName}} {
        {{/* TODO change entquery to NodeBase and use this instead of id here? */}}
        return {{$queryName}}.query(this.viewer, this.id);
      }
     {{end}}
    {{end -}}
  {{end -}}

  {{ range $edge := .EdgeInfo.DestinationEdges -}}
    {{$edgeName := .CamelCaseEdgeName -}}
    {{$queryName := useImport .TsEdgeQueryName -}}

    {{ if .UniqueEdge -}}
      {{$fNode := .NodeInfo.Node -}}

      async load{{$edge.Singular}}(): Promise<{{useImport $fNode}} | null> {
        const nodes = await {{useImport $fNode}}.loadFrom{{$edge.TsFieldName}}(this.viewer, this.id);
        return nodes[0];
      }

    {{ else -}}
      {{$queryName := useImport .TsEdgeQueryName -}}
      query{{$edgeName}}(): {{useImport $queryName}} {
        return {{$queryName}}.query(this.viewer, this.id);
      }

    {{end -}}
  {{end -}}

  {{ range $edge := .EdgeInfo.FieldEdges -}}
    {{  $edgeName := .CamelCaseEdgeName -}}
    {{ if $edge.Polymorphic}}
      async load{{$edgeName}}(): Promise<{{useImport "Ent"}}| null>{
        {{ if $edge.Nullable -}}
          if (!this.{{$edge.TSFieldName}}) {
            return null;
          }
        {{end -}}
        return {{useImport "loadEntByType"}}(
          this.viewer,
          this.{{$edge.Polymorphic.NodeTypeField}} as unknown as {{useImport "NodeType"}},
          this.{{$edge.TSFieldName}},
        );
      }
      
      {{ if not $edge.Nullable -}}
        load{{$edgeName}}X(): Promise<{{useImport "Ent"}}> {
        return {{useImport "loadEntXByType"}}(
          this.viewer, 
          this.{{$edge.Polymorphic.NodeTypeField}} as unknown as {{useImport "NodeType"}},
          this.{{$edge.TSFieldName}},
        );
      }
      {{end -}}
    {{ else -}}
      {{with .NodeInfo -}}
        async load{{$edgeName}}(): Promise<{{useImport .Node}}|null> {
          {{ if $edge.Nullable -}}
            if (!this.{{$edge.TSFieldName}}) {
              return null;
            }
          {{end -}}
          return {{useImport "loadEnt"}}(
            this.viewer, 
            this.{{$edge.TSFieldName}},
            {{useImport .Node}}.loaderOptions(),
          );
        }

        {{if not $edge.Nullable -}}
          load{{$edgeName}}X(): Promise<{{useImport .Node}}> {
            return {{useImport "loadEntX"}}(
              this.viewer, 
              this.{{$edge.TSFieldName}},
              {{useImport .Node}}.loaderOptions(),
            );
          }
        {{end -}}
      {{end}}
    {{end}}
  {{end}}
}

{{range .GetNodeLoaders -}}
  export const {{.Name}} = new {{useImport "ObjectLoaderFactory"}}({
    tableName,
    fields,
    key: {{.Pkey}},
  });

{{end}}

{{$loaders := .GetNodeLoaders -}}
{{ range $loader := $loaders -}}
  {{ range $loader2 := $loaders -}}
    {{if ne $loader.Name $loader2.Name -}}
      {{$loader.Name}}.addToPrime({{$loader2.Name}});
    {{end -}}
  {{end -}}
{{end -}}

{{end -}}

