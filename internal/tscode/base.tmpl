{{ reserveImport .Package.PackagePath "loadEnt" "ID" "Data"  "loadEntX" "loadEnts" "LoadEntOptions" "loadNodesByEdge" "loadRow" "loadRows" "loadRowX" "loadUniqueEdge" "loadUniqueNode" "AllowIfViewerPrivacyPolicy" "PrivacyPolicy" "query" "Ent" "getEdgeTypeInGroup" "ObjectLoaderFactory" "Context" "IndexLoaderFactory" "loadEntViaKey" "loadEntXViaKey" "CustomQuery" "loadCustomEnts" "loadCustomData" "loadCustomCount" "applyPrivacyPolicy" "Ent"}}
{{ reserveImport .Package.SchemaPackagePath "Field" "getFields" "getFieldsWithPrivacy"}}
{{ reserveImport .Package.InternalImportPath "EdgeType" "NodeType" }}
{{ reserveImport "src/ent/generated/loadAny" "loadEntByType" "loadEntXByType"}}
{{ reserveImport .PrivacyConfig.Path .PrivacyConfig.PolicyName }}

{{ $privacyCfg := .PrivacyConfig -}}
{{ $cfg := .CodePath -}}
{{ $schema := .Schema -}}
{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := useImport $viewerInfo.GetImport -}}

{{with .NodeData -}}
{{$loaderInfo := printf "%sLoaderInfo" .NodeInstance -}}
{{$loaderName := .GetLoaderName -}}
{{ reserveImport "src/ent/generated/loaders" $loaderInfo -}}

{{ range .GetNodeLoaders -}}
  {{range . }}
    {{ reserveImport "src/ent/generated/loaders" .Name -}}
  {{ end }}
{{ end -}}

{{ range .GetImportsForBaseFile $schema -}} 
  {{ reserveImportPath . false -}}
{{ end}}

{{$idType := useImport "ID" }}
{{$this := .}}

{{$baseClass := printf "%sBase" .Node -}}
{{$ignore := useImport "Data" -}}
{{$thisType := printf ("new (viewer: %s, data: Data) => T") $viewerType}}

{{ range .GetTSEnums -}}
  {{if not .Imported -}}
    {{ template "enum.tmpl" . -}}
  {{end -}}
{{ end}}
{{$nodeData := .}}

{{$dataType := printf "%sDBData" .Node -}}

interface {{$dataType}} {
  {{range $field := .FieldInfo.Fields -}}
    {{ range $field.GetTsTypeImports -}}
      {{ if ($nodeData.ForeignImport .Import) -}}
        {{ reserveImportPath . false -}}
      {{end -}}
      {{$typ := useImportMaybe .Import -}}
    {{end -}}

    {{$field.GetDbColName}}: {{$field.TsType}};
  {{ end -}}
}

{{range $field := .FieldInfo.Fields -}}
  {{ if $field.FetchOnDemand -}}
    const {{$field.TSPublicAPIName}}Loader = new {{useImport "ObjectLoaderFactory"}}({
      tableName: {{useImport $loaderInfo}}.tableName,
      {{/* TODO "id" https://github.com/lolopinto/ent/issues/1064 */ -}}
      fields: ["id", "{{$field.GetDbColName}}"],
      key: "id",
      instanceKey: `${ {{$loaderInfo}}.tableName}-{{$field.GetDbColName}}`,
    });
  {{ end -}}
{{ end}}


{{$hasMixins := .HasMixins -}}
{{$mixinInfo := .GetMixinInfo $schema -}}

export class {{$baseClass}} 
{{ if $hasMixins -}}
  {{ range $mixinInfo.Imports -}}
    {{ $ignore := useImport .Import -}}
  {{end -}}
  extends {{$mixinInfo.Extends }}
{{ end -}}

implements {{useImport "Ent"}}<{{$viewerType}}> 
{{ if $mixinInfo.Implements }}
  , {{$mixinInfo.Implements}}
{{ end -}}
{

  readonly nodeType = {{useImport "NodeType"}}.{{.Node}};
  {{range $field := .FieldInfo.Fields -}}
    {{ range $field.GetTsTypeImports -}}
      {{ if ($nodeData.ForeignImport .Import) -}}
        {{ reserveImportPath . false -}}
      {{end -}}
      {{$typ := useImportMaybe .Import -}}
    {{end -}}
    {{ if not ($schema.PatternFieldWithMixin $field) -}}
      {{ if $field.Private $cfg -}}
        {{ if $field.FetchOnDemand -}}
          protected {{$field.TsFieldName $cfg}}: {{$field.TsFieldType $cfg}};
        {{ else -}}
          protected readonly {{$field.TsFieldName $cfg}}: {{$field.TsFieldType $cfg}};
        {{ end -}} 
      {{ else -}}
        readonly {{$field.TsFieldName $cfg}}: {{$field.TsFieldType $cfg}};
      {{end -}}
    {{ end -}}
  {{end}}

  constructor(public viewer: {{$viewerType}}, protected data:Data) {
    {{ if $hasMixins -}}
      // @ts-ignore pass to mixin
      super(viewer, data);
    {{ end -}}
    {{range $field := .FieldInfo.Fields -}}
      {{ if fieldLoadedInBaseClass $schema $field -}}
        {{$val := printf "data.%s" $field.GetDbColName -}}
        this.{{$field.TsFieldName $cfg}} = {{callAndConvertFunc $field $cfg $val }}
      {{ end -}}
    {{end}}
  }
  
  getPrivacyPolicy(): {{useImport "PrivacyPolicy"}}<this, {{$viewerType}}> {
    {{ if $privacyCfg.Class }}
      return new {{useImport $privacyCfg.PolicyName}}();
    {{ else }}
      return {{useImport $privacyCfg.PolicyName}};
    {{ end }}
  }

  {{$node := .Node}}
  {{range $field := .FieldInfo.Fields -}}
    {{ if $field.HasAsyncAccessor $cfg -}}
      async {{$field.TSPublicAPIName}}(): Promise<{{$field.TsType}}> {
        {{ $fieldName := $field.TsFieldName $cfg -}}
        {{ if $field.FetchOnDemand -}}
          if (this.{{$fieldName}} === undefined) {
            const row = await {{$field.TSPublicAPIName}}Loader.createLoader(this.viewer.context).load(this.id);
            this.{{$fieldName}} = row?.{{$field.GetDbColName}} ?? null;
          }
        {{ end -}}

        {{ if $field.HasFieldPrivacy -}}
          {{/* if underlying field can be null, we check for null */}}
          {{ if $field.Nullable -}}
            if (this.{{$fieldName}} === null) {
              return null;
            }
          {{ end -}}
          const m = {{useImport "getFieldsWithPrivacy"}}({{useImport "schema"}},{{useImport $loaderInfo}}.fieldInfo);
          const p = m.get("{{$field.GetDbColName}}");
          if (!p) {
            throw new Error(`couldn't get field privacy policy for {{$field.TSPublicAPIName}}`);
          }
          const v = await {{useImport "applyPrivacyPolicy"}}(this.viewer, p, this);
          return v ? this.{{$fieldName}} : null;
        {{ else -}}
          {{$val := printf "this.%s ?? null" $fieldName -}}
          return {{callAndConvertFunc $field $cfg $val }};
        {{ end -}}
      }
    {{ end }}
  {{ end -}}

  static async load<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}}, 
    id: {{$idType}},
  ): Promise<T | null>{
    return await {{useImport "loadEnt"}}(
      viewer, 
      id, 
      {{$baseClass}}.loaderOptions.apply(this),
    ) as T | null;
  }

  static async loadX<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}}, 
    id: {{$idType}},
  ): Promise<T> {
    return await {{useImport "loadEntX"}}(
      viewer, 
      id, 
      {{$baseClass}}.
      loaderOptions.apply(this),
    ) as T;
  }

  {{ if .TransformsSelect }}
    {{$noTransformLoader := useImport .GetLoaderNoTransformName -}}
    // loadNoTransform and loadNoTransformX exist to load the data from the db 
    // with no transformations which are currently done implicitly
    // we don't generate the full complement of read-APIs 
    // but can easily query the raw data with {{$noTransformLoader}}
    static async loadNoTransform<T extends {{$baseClass}}>(
      this: {{$thisType}},
      viewer: {{$viewerType}}, 
      id: {{$idType}},
    ): Promise<T | null>{
      const opts = {
        ...{{$baseClass}}.loaderOptions.apply(this),
        loaderFactory: {{$noTransformLoader}},
      };

      return await {{useImport "loadEnt"}}(
        viewer, 
        id, 
        opts,
      ) as T | null;
    }

    static async loadNoTransformX<T extends {{$baseClass}}>(
      this: {{$thisType}},
      viewer: {{$viewerType}}, 
      id: {{$idType}},
    ): Promise<T> {
      const opts = {
        ...{{$baseClass}}.loaderOptions.apply(this),
        loaderFactory: {{$noTransformLoader}},
      };
      return await {{useImport "loadEntX"}}(
        viewer, 
        id, 
        opts,
      ) as T;
    }
  {{ end}}

  static async loadMany<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}},
    ...ids: {{$idType}}[]
  ): Promise<Map<ID, T>> {
    return await {{useImport "loadEnts"}}(
      viewer, 
      {{$baseClass}}.loaderOptions.apply(this), 
      ...ids,
    ) as Map<ID, T>;
  }

  static async loadCustom<T extends {{$baseClass}}>(
    this: {{$thisType}},
    viewer: {{$viewerType}},
    query: {{useImport "CustomQuery"}},
  ): Promise<T[]> {
    return await {{useImport "loadCustomEnts"}}(
      viewer,
      {
      ...{{$baseClass}}.loaderOptions.apply(this),
        prime: true,
      },
      query,
    ) as T[];
  }

  static async loadCustomData<T extends {{$baseClass}}>(
    this: {{$thisType}},
    query: {{useImport "CustomQuery"}},
    context?: {{useImport "Context"}}
  ): Promise<{{$dataType}}[]> {
    return  await {{useImport "loadCustomData"}}(
      {
        ...{{$baseClass}}.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    ) as {{$dataType}}[];
  }

  static async loadCustomCount<T extends {{$baseClass}}>(
    this: {{$thisType}},
    query: {{useImport "CustomQuery"}},
    context?: {{useImport "Context"}}
  ): Promise<number> {
    return {{useImport "loadCustomCount"}}(
      {
        ...{{$baseClass}}.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends {{$baseClass}}>(
    this: {{$thisType}},
    id: ID,
    context?: {{useImport "Context"}},
  ): Promise<{{$dataType}} | null> {
    const row = await {{useImport $loaderName}}.createLoader(context).load(id);
    if (!row) {
      return null;
    }
    return row as {{$dataType}};
  }

  static async loadRawDataX<T extends {{$baseClass}}>(
    this: {{$thisType}},
    id: ID,
    context?: {{useImport "Context"}},
  ): Promise<{{$dataType}}> {
    const row = await {{useImport $loaderName}}.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row as {{$dataType}};
  }


  {{ range $field := .FieldInfo.Fields -}}
    {{ if $field.Unique  -}}
      {{$fieldLoader := useImport ($this.GetFieldLoaderName $field) -}}
      static async loadFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: {{$viewerType}},
        {{$field.TsFieldName $cfg}}: {{$field.GetNotNullableTsType}},
      ): Promise<T | null> {
        return await {{useImport "loadEntViaKey"}}(
          viewer, 
          {{$field.TsFieldName $cfg}},
          {
            ...{{$baseClass}}.loaderOptions.apply(this), 
            loaderFactory: {{$fieldLoader}},
          },
        ) as T | null;
      }

      static async loadFrom{{$field.CamelCaseName}}X<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: {{$viewerType}},
        {{$field.TsFieldName $cfg}}: {{$field.GetNotNullableTsType}},
      ): Promise<T> {
        return await {{useImport "loadEntXViaKey"}}(
          viewer, 
          {{$field.TsFieldName $cfg}},
          {
            ...{{$baseClass}}.loaderOptions.apply(this), 
            loaderFactory: {{$fieldLoader}},
          },
        ) as T;
      }

      static async loadIDFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        {{$field.TsFieldName $cfg}}: {{$field.GetNotNullableTsType}},
        context?: {{useImport "Context"}},
      ): Promise<{{$idType}} | undefined> {
        const row = await {{$fieldLoader}}.createLoader(context).load({{$field.TsFieldName $cfg}});
        return row?.id;
      }

      static async loadRawDataFrom{{$field.CamelCaseName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        {{$field.TsFieldName $cfg}}: {{$field.GetNotNullableTsType}},
        context?: {{useImport "Context"}},
      ): Promise<{{$dataType}} | null> {
        const row = await {{$fieldLoader}}.createLoader(context).load({{$field.TsFieldName $cfg}});
        if (!row) {
          return null;
        }
        return row as {{$dataType}};
      }
    {{ else if $field.QueryFromEnt -}}
      {{$queryName := useImport ($this.GetFieldQueryName $field) -}}
      static queryFrom{{$field.QueryFromEntName}}<T extends {{$baseClass}}>(
        this: {{$thisType}},
        viewer: {{$viewerType}},
        ent: {{useImport "Ent"}}<{{$viewerType}}>,
      ): {{$queryName}} {
        return {{$queryName}}.query(viewer, ent);
      }
    {{ else if $field.QueryFrom -}}
    {{end}}
  {{end -}}

  static loaderOptions<T extends {{$baseClass}}>(
    this: new (viewer: {{$viewerType}}, data: Data) => T,
  ): {{useImport "LoadEntOptions"}}<T, {{$viewerType}}> {
    return {
      tableName: {{useImport $loaderInfo}}.tableName,
      fields: {{useImport $loaderInfo}}.fields,
      ent: this,
      loaderFactory: {{useImport $loaderName}},
      {{if .OnEntLoadFieldPrivacy $cfg -}}
        fieldPrivacy: {{useImport "getFieldsWithPrivacy"}}({{useImport "schema"}}, {{useImport $loaderInfo}}.fieldInfo),
      {{end -}}
    };
  }

  private static schemaFields: Map<string, {{useImport "Field"}}>;

  private static getSchemaFields(): Map<string, {{useImport "Field"}}> {
    if ({{$baseClass}}.schemaFields != null) {
      return {{$baseClass}}.schemaFields;
    }
    return {{$baseClass}}.schemaFields = {{useImport "getFields"}}({{useImport "schema"}});
  }

  static getField(key: string): {{useImport "Field"}} | undefined{
    return {{$baseClass}}.getSchemaFields().get(key);
  }

  {{ range $group := .EdgeInfo.AssocGroups -}}
    {{if $group.NullStateFn -}}
    // this should be overwritten by subclasses as needed. 
    protected async {{$group.NullStateFn}}() {
      return {{$group.ConstType}}.{{$group.DefaultNullState}};
    }
    {{end}}

    {{$group.GetStatusMapMethod}}() {
      let m:Map<{{$group.ConstType}}, {{useImport "EdgeType"}}> = new Map();
      {{range $k, $v := $group.GetStatusMap -}}
        m.set({{$group.ConstType}}.{{$k}}, {{useImport "EdgeType"}}.{{$v}});
      {{end -}}
      return m;
    }

    async {{$group.GetStatusMethod}}(): Promise<{{$group.ConstType}}> {
      {{if $group.NullStateFn -}}
        const ret = await this.{{$group.NullStateFn}}();
      {{else -}}
        const ret= {{$group.ConstType}}.{{$group.DefaultNullState}};
      {{end -}}
      if (!this.viewer.viewerID) {
        return ret;
      }
      const g = await {{useImport "getEdgeTypeInGroup"}}(
        this.viewer,
        this.id,
        this.viewer.viewerID!,
        this.get{{$group.ConstType}}Map(),
      );
      if (g) {
        return g[0];
      }
      return ret;
    }
  {{end -}}

  {{/* load edges and load objects */ -}}
  {{range $edge := .EdgeInfo.Associations -}}
    {{$edgeName := .CamelCaseEdgeName -}}
    {{$uniqueEdge := .Unique -}}
    {{with .NodeInfo -}}
     {{ if $uniqueEdge -}}
       {{ $imp := $edge.AssocEdgeBaseImport $cfg}}
       {{ reserveImportPath $imp false }}
      {{$assocEdgeType := useImport $imp.Import }}
      {{$edgeType := useImport "EdgeType"}}
      load{{$edgeName}}Edge(): Promise<{{$assocEdgeType}} | null> {
        return {{useImport "loadUniqueEdge"}}({
          id1: this.id, 
          edgeType: {{$edgeType}}.{{$edge.TsEdgeConst}},
          context: this.viewer.context,
        });
      }

      load{{$edgeName}}(): Promise<{{useImport .Node}} | null> {
        return {{useImport "loadUniqueNode"}}(
          this.viewer, 
          this.id, 
          {{$edgeType}}.{{$edge.TsEdgeConst}}, 
          {{.Node}}.loaderOptions(),
        );
      }

     {{ else -}}

      {{$queryName := useImport $edge.TsEdgeQueryName}}
      query{{$edgeName}}(): {{$queryName}} {
        {{/* TODO change entquery to NodeBase and use this instead of id here? */}}
        return {{$queryName}}.query(this.viewer, this.id);
      }
     {{end}}
    {{end -}}
  {{end -}}

  {{ range $edge := .EdgeInfo.DestinationEdges -}}
    {{$edgeName := .CamelCaseEdgeName -}}
    {{$queryName := useImport .TsEdgeQueryName -}}

    {{ if .UniqueEdge -}}
      {{$fNode := .NodeInfo.Node -}}

      async load{{$edge.Singular}}(): Promise<{{useImport $fNode}} | null> {
        const nodes = await {{useImport $fNode}}.loadFrom{{$edge.TsFieldName}}(this.viewer, this.id);
        return nodes[0];
      }

    {{ else -}}
      {{$queryName := useImport .TsEdgeQueryName -}}
      query{{$edgeName}}(): {{useImport $queryName}} {
        return {{$queryName}}.query(this.viewer, this.id);
      }

    {{end -}}
  {{end -}}

  {{ range $edge := .EdgeInfo.FieldEdges -}}
    {{  $edgeName := .CamelCaseEdgeName -}}
    {{ if $edge.Polymorphic}}
      async load{{$edgeName}}(): Promise<{{useImport "Ent"}}| null>{
        {{ if $edge.Nullable -}}
          if (!this.{{$edge.TSFieldName}}) {
            return null;
          }
        {{end -}}
        return {{useImport "loadEntByType"}}(
          this.viewer,
          this.{{$edge.Polymorphic.NodeTypeField}} as unknown as {{useImport "NodeType"}},
          this.{{$edge.TSFieldName}},
        );
      }
      
      {{ if not $edge.Nullable -}}
        load{{$edgeName}}X(): Promise<{{useImport "Ent"}}> {
        return {{useImport "loadEntXByType"}}(
          this.viewer, 
          this.{{$edge.Polymorphic.NodeTypeField}} as unknown as {{useImport "NodeType"}},
          this.{{$edge.TSFieldName}},
        );
      }
      {{end -}}
    {{end -}}

    {{if $edge.IsList -}}
      {{$edgeNode := .NodeInfo.Node -}}
      {{if $edge.Nullable -}} 
        async load{{$edgeName}}(): Promise<{{useImport $edgeNode}}[]|null> {
          if (!this.{{$edge.TSFieldName}}) {
            return null;
          } 
          const ents = await {{useImport "loadEnts"}}(
            this.viewer, 
            {{useImport $edgeNode}}.loaderOptions(),
            ...this.{{$edge.TSFieldName}},
          );
          return Array.from(ents.values());
        }
      {{ else -}}
        async load{{$edgeName}}(): Promise<{{useImport $edgeNode}}[]> {
          const ents = await {{useImport "loadEnts"}}(
            this.viewer, 
            {{useImport $edgeNode}}.loaderOptions(),
            ...this.{{$edge.TSFieldName}},
          );
          return Array.from(ents.values());
        }
      {{ end -}}
    {{ end -}}

    {{ if $edge.NonPolymorphicList -}}
      {{with .NodeInfo -}}
        {{ $field := $nodeData.GetFieldByName $edge.FieldName -}}
          async load{{$edgeName}}(): Promise<{{useImport .Node}}|null> {
          {{ if and $field ($field.HasAsyncAccessor $cfg) -}}
            const {{$edge.TSFieldName}} = await this.{{$edge.TSFieldName}}();
            if (!{{$edge.TSFieldName}}) {
              return null;
            }
          {{ else -}}
            {{ if $edge.Nullable -}}
              if (!this.{{$edge.TSFieldName}}) {
                return null;
              }
          {{end -}}
        {{ end}}
          return {{useImport "loadEnt"}}(
            this.viewer, 
            {{ if and $field ($field.HasAsyncAccessor $cfg) -}}
              {{$edge.TSFieldName}},
            {{ else -}}
              this.{{$edge.TSFieldName}},
            {{end -}}
            {{useImport .Node}}.loaderOptions(),
          );
        }

        {{if not $edge.Nullable -}}
          load{{$edgeName}}X(): Promise<{{useImport .Node}}> {
            return {{useImport "loadEntX"}}(
              this.viewer, 
              this.{{$edge.TSFieldName}},
              {{useImport .Node}}.loaderOptions(),
            );
          }
        {{end -}}
      {{end}}
    {{end}}
  {{end}}
}

{{end -}}

