{{$edgeName := .Edge.TsEdgeQueryEdgeName -}}
{{$name := .Edge.TsEdgeQueryName -}}
{{$base := .Edge.EdgeQueryBase -}}

{{ reserveImport .Package.InternalImportPath $base $edgeName -}}
{{ $assocEdgeBase := .Edge.AssocEdgeBase -}} 
{{/* TODO this should be generalized eventually but it's either a base class or AssocEdge so it's fine for now */ -}}
{{ if eq $assocEdgeBase "AssocEdge" -}}
  {{ reserveImport .Package.PackagePath "AssocEdge" -}}
{{ else -}}
  {{ reserveImport "src/ent/internal" $assocEdgeBase -}}
{{ end -}}

export class {{$edgeName}} extends {{useImport $assocEdgeBase}} {}

{{ if eq .SourceNode "Ent" -}}
export abstract class {{$name}} extends {{useImport $base}} {
{{ else -}}
export class {{$name}} extends {{useImport $base}} {
{{ end -}}
  {{if .Edge.GenerateSourceLoadEntOptions -}}
  {{reserveImport .Package.ExternalImportPath .SourceNode -}}
    getSourceLoadEntOptions() {
      return {{useImport .SourceNode}}.loaderOptions();
    }
  {{end -}}
}
