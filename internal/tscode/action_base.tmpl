{{ reserveImport .Package.ActionPackagePath "Action" "Builder" "WriteOperation" "Changeset" "Builder" "setEdgeTypeInGroup" }}
{{ reserveImport .Package.PackagePath "Viewer" "ID" "Ent" "AssocEdgeInputOptions" "PrivacyPolicy"}}
{{ reserveImport "src/ent/" "NodeType"}}
{{ reserveImport .PrivacyConfig.Path .PrivacyConfig.PolicyName }}

{{ range .NodeData.GetImportPathsForDependencies -}}
  {{ if .DefaultImport -}}
    {{ reserveDefaultImport .PackagePath .Import}}
  {{ else -}}
    {{ reserveImport .PackagePath .Import}}
  {{ end -}}
{{ end -}}

{{ $builderName := printf "%sBuilder" .NodeData.Node -}}
{{ $builderInput := printf "%sInput" .NodeData.Node -}}

{{ reserveImport .BuilderPath $builderName $builderInput}}

{{ $action := .Action -}}
{{ $actionName := printf "%sBase" $action.GetActionName -}}

{{ range $action.GetTSEnums -}}
  {{if not .Imported -}}
    {{ template "enum.tmpl" . -}}
  {{end -}}
{{ end}}

{{ range $int := $action.GetCustomInterfaces -}}
  interface {{$int.TSType}} {
    {{ range $field := $int.Fields -}}
      {{$type := $field.TsBuilderType -}}
      {{range $import := $field.TsBuilderImports -}}
        {{ $ignore := useImport $import -}}
      {{end -}}
      {{if $field.ForceRequiredInAction -}}
        {{$field.TsFieldName}}: {{$type}};
      {{else -}}
        {{$field.TsFieldName}}?: {{$type}};
      {{end -}}
    {{end -}}
    {{ range $field := $int.NonEntFields -}}
      {{$type := $field.GetTsType -}}
      {{if $field.Required -}}
        {{$field.TsFieldName}}: {{$type}};
      {{else -}}
        {{$field.TsFieldName}}?: {{$type}};
      {{end -}}
    {{end -}}
  }
  
{{end -}}

{{ $node := useImport .NodeData.Node -}}
{{ $viewer := useImport "Viewer"}}

{{$hasInput := hasInput $action -}}
{{$inputName := "" -}}
{{ if $hasInput -}}
  {{$inputName = $action.GetInputName -}}

  export interface {{$inputName}} {
    {{ range $field := $action.GetFields -}}
      {{ if $field.EditableField -}}
        {{$type := $field.TsBuilderType -}}
        {{range $import := $field.TsBuilderImports -}}
          {{ $ignore := useImport $import -}}
        {{end -}}
        {{if isRequiredField $action $field -}}
          {{$field.TsFieldName}}: {{$type}};
        {{else -}}
          {{$field.TsFieldName}}?: {{$type}};
        {{end -}}
      {{end -}}
    {{end -}}

    {{ range $field := $action.GetNonEntFields -}}
      {{$type := $field.GetTsType -}}
      {{if $field.Required -}}
        {{$field.TsFieldName}}: {{$type}};
      {{else -}}
        {{$field.TsFieldName}}?: {{$type}};
      {{end -}}
    {{end -}}
  }
{{end}}

{{ $constructor := "" }}
{{ $newArgs := ""}}
{{ $instance := .NodeData.NodeInstance}}
{{ $hasSaveFromID := false }}

{{/* edit, whole shebang */ -}}
{{ if and $action.MutatingExistingObject $hasInput -}}
  {{ $constructor = printf "viewer: %s, %s: %s, input: %s" $viewer $instance $node $inputName -}}
  {{ $newArgs = printf "viewer, %s, input" $instance -}}
  {{ $hasSaveFromID = true}}
{{/* create, no editing */ -}}
{{ else if $hasInput -}} 
  {{ $constructor = printf "viewer: %s, input: %s"  $viewer $inputName -}}
  {{ $newArgs = "viewer, input" }}
{{/* delete, no input */ -}}
{{ else -}}
  {{ $constructor = printf "viewer: %s, %s: %s" $viewer $instance $node -}}
  {{ $newArgs = printf "viewer, %s" $instance -}}
  {{ $hasSaveFromID = true}}
{{end -}}

export class {{$actionName}} implements {{useImport "Action"}}<{{$node}}> {
  public readonly builder: {{useImport $builderName}};
  public readonly viewer: {{$viewer}}
  {{ if $hasInput -}}
    protected input: {{$inputName}};
  {{end -}}
  {{if $action.MutatingExistingObject -}}
    protected {{$instance}}: {{$node}};
  {{end}}

  constructor({{$constructor}}) {
    this.viewer = viewer;
    {{ if $hasInput -}}
      this.input = input;
    {{end -}}
    this.builder = new {{$builderName}}(
      this.viewer,
      {{useImport "WriteOperation"}}.{{getWriteOperation $action}},
      this,
      {{ if $action.MutatingExistingObject -}}
        {{$instance}},
      {{end -}}
    );
    {{if $action.MutatingExistingObject -}}
      this.{{$instance}} = {{$instance}};
    {{end -}}
  }

  getPrivacyPolicy(): {{useImport "PrivacyPolicy"}} {
    {{ if .PrivacyConfig.Class }}
      return new {{useImport .PrivacyConfig.PolicyName}}();
    {{ else -}}
      return {{useImport .PrivacyConfig.PolicyName}};
    {{ end -}}
  };

  getInput(): {{useImport $builderInput}} {
    {{ if $hasInput -}}
      {{ if hasOnlyActionOnlyFields $action}}
        // we use a type assertion to override the weak type detection here
        return this.input as {{useImport $builderInput}};
      {{ else -}}
        return this.input;
      {{end -}}
    {{ else -}}
      return {};
    {{end -}}
  }

  {{ $edges := edges $action}}
  {{ range $edge := $edges -}}
    {{ $node := useImport $edge.Node -}}
    {{ if removeEdgeAction $action -}}
      {{$edge.TSRemoveMethodName}}(...nodes: ({{useImport "ID"}} | {{$node}})[]): this{
        nodes.forEach(node => this.builder.{{$edge.TSRemoveMethodName}}(node));
        return this;
      }
    {{ else -}}
      {{$edge.TSAddMethodName}}(...nodes: ({{useImport "ID"}} | {{$node}} | {{useImport "Builder"}}<{{$node}}>)[]): this{
        nodes.forEach(node => this.builder.{{$edge.TSAddMethodName}}(node));
        return this;
      }

      {{$edge.TSAddIDMethodName}}(id: {{useImport "ID"}} | {{useImport "Builder"}}<{{$node}}>, options?: {{useImport "AssocEdgeInputOptions"}}): this {
        this.builder.{{$edge.TSAddIDMethodName}}(id, options);
        return this;
      }
    {{end -}}
  {{end -}}

  async changeset(): Promise<{{useImport "Changeset"}}<{{$node}}>> {
    return this.builder.build();
  }

  {{ if edgeGroupAction $action -}}
    {{$edgeGroup := $action.GetEdgeGroup -}}
    private async setEdgeType() {
      await {{useImport "setEdgeTypeInGroup"}}(
        this.builder.orchestrator,
        this.input.{{$edgeGroup.TSGroupStatusName}},
        this.{{$instance}}.id,
        this.input.{{$edgeGroup.GetIDArg}},
        {{useImport "NodeType"}}.{{$edgeGroup.NodeInfo.Node}},
        this.{{$instance}}.{{$edgeGroup.GetStatusMapMethod}}(),
      );
    }
  {{end}}

  async valid(): Promise<boolean> {
    {{if edgeGroupAction $action }}
      await this.setEdgeType();
    {{ end -}}
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    {{ if edgeGroupAction $action }}
      await this.setEdgeType();
    {{ end -}}
    await this.builder.validX();
  }

  {{ if $action.IsDeletingNode -}}
    async save(): Promise<void> {
      await this.builder.save();
  {{ else -}}
    async save(): Promise<{{$node}} | null> {
      {{ if edgeGroupAction $action }}
        await this.setEdgeType();
      {{ end -}}
      await this.builder.save();
      return this.builder.editedEnt();
  {{ end -}}
  }

  {{ if $action.IsDeletingNode -}}
    async saveX(): Promise<void> {
      await this.builder.saveX();
  {{ else -}}
    async saveX(): Promise<{{$node}}> {
      {{ if edgeGroupAction $action }}
        await this.setEdgeType();
      {{ end -}}
      await this.builder.saveX();
      return this.builder.editedEntX();
  {{ end -}}
  }

  static create<T extends {{$actionName}}>(
    this: new ({{$constructor}}) => T,
    {{$constructor}},
  ): T {
    return new this({{$newArgs}});
  }

  {{if $hasSaveFromID -}}
    static async saveXFromID<T extends {{$actionName}}>(
      this: new ({{$constructor}}) => T,
      viewer: {{useImport "Viewer"}},
      id: {{useImport "ID"}},
      {{if $hasInput -}}
        input: {{$inputName}},
      {{else if edgeAction $action -}}
        {{ range $edge := $edges -}}
          {{/* TODO this assumes there is only one edge */ -}}
          {{$edge.TSGraphQLNodeID}}: {{useImport "ID"}},
        {{end -}}
      {{ end -}}
      {{ if $action.IsDeletingNode -}}
        ): Promise<void> {
      {{else -}}
        ): Promise<{{$node}}> {
      {{end -}}
      const {{$instance}} = await {{$node}}.loadX(viewer, id);
      {{if $hasInput -}}
        return new this(viewer, {{$instance}}, input).saveX();
      {{else if edgeAction $action -}}
        return new this(viewer, {{$instance}})
        {{ range $edge := $edges -}}
          {{/* TODO this assumes there is only one edge */ -}}
          {{if removeEdgeAction $action -}}
            .{{$edge.TSRemoveMethodName}}({{$edge.TSGraphQLNodeID}})
          {{else -}}
            .{{$edge.TSAddMethodName}}({{$edge.TSGraphQLNodeID}})
          {{end -}}
        {{end -}}
        .saveX();
      {{else -}}
        return new this(viewer, {{$instance}}).saveX();
      {{end -}}
    } 
  {{end -}}
}