{{ reserveImport .Package.ActionPackagePath "Action" "Builder" "WriteOperation" "Changeset" "Builder" }}
{{ reserveImport .Package.PackagePath "Viewer" "ID" "Ent" "AssocEdgeInputOptions" }}

{{ range .NodeData.GetUniqueNodesForceSelf -}} 
  {{$packagePath := printf "src/ent/%s" .PackageName }}
  {{ reserveDefaultImport $packagePath .Node}}
{{ end}}

{{ $builderName := printf "%sBuilder" .NodeData.Node -}}
{{ $builderInput := printf "%sInput" .NodeData.Node -}}

{{ reserveImport .BuilderPath $builderName $builderInput}}

{{ $action := .Action -}}
{{ $actionName := printf "%sBase" $action.GetActionName -}}

{{ $node := useImport .NodeData.Node -}}
{{ $viewer := useImport "Viewer"}}

{{$hasInput := hasInput $action -}}
{{$inputName := "" -}}
{{ if $hasInput -}}
  {{$inputName = $action.GetInputName -}}

  export interface {{$inputName}} {
    {{ range $field := $action.GetFields -}}
      {{ if $field.EditableField -}}
        {{$type := $field.TsBuilderType -}}
        {{range $import := $field.TsBuilderImports -}}
          {{ $ignore := useImport $import -}}
        {{end -}}
        {{if isRequiredField $action $field -}}
          {{$field.TsFieldName}}: {{$type}};
        {{else -}}
          {{$field.TsFieldName}}?: {{$type}};
        {{end -}}
      {{end -}}
    {{end -}}
  }
{{end}}

{{ $constructor := "" }}
{{ $newArgs := ""}}
{{ $instance := .NodeData.NodeInstance}}
{{ $hasSaveFromID := false }}

{{/* edit, whole shebang */ -}}
{{ if and $action.MutatingExistingObject $hasInput -}}
  {{ $constructor = printf "viewer: %s, %s: %s, input: %s" $viewer $instance $node $inputName -}}
  {{ $newArgs = printf "viewer, %s, input" $instance -}}
  {{ $hasSaveFromID = true}}
{{/* create, no editing */ -}}
{{ else if $hasInput -}} 
  {{ $constructor = printf "viewer: %s, input: %s"  $viewer $inputName -}}
  {{ $newArgs = "viewer, input" }}
{{/* delete, no input */ -}}
{{ else -}}
  {{ $constructor = printf "viewer: %s, %s: %s" $viewer $instance $node -}}
  {{ $newArgs = printf "viewer, %s" $instance -}}
  {{ $hasSaveFromID = true}}
{{end -}}

export class {{$actionName}} implements {{useImport "Action"}}<{{$node}}> {
  public readonly builder: {{useImport $builderName}};
  public readonly viewer: {{$viewer}}
  {{ if $hasInput -}}
    private input: {{$inputName}};
  {{end}}

  constructor({{$constructor}}) {
    this.viewer = viewer;
    {{ if $hasInput -}}
      this.input = input;
    {{end -}}
    this.builder = new {{$builderName}}(
      this.viewer,
      {{useImport "WriteOperation"}}.{{getWriteOperation $action}},
      this,
      {{ if $action.MutatingExistingObject -}}
        {{$instance}},
      {{end -}}
    );
  }

  getInput(): {{useImport $builderInput}} {
    {{ if $hasInput -}}
      return this.input;
      {{ else -}}
      return {};
    {{end -}}
  }

  {{ $edges := edges $action}}
  {{ range $edge := $edges -}}
    {{$singular := $edge.Edge.Singular -}}
    {{ $node := useImport $edge.Node -}}

    {{ if removeEdgeAction $action -}}
      remove{{$singular}}(...ids: {{useImport "ID"}}[]): this;
      remove{{$singular}}(...nodes: {{$node}}[]): this;
      remove{{$singular}}(...nodes: {{useImport "ID"}}[] | {{$node}}[]): this{
        nodes.forEach(node => this.builder.add{{$singular}}(node));
        return this;
      }
    {{ else -}}
      add{{$singular}}(...ids: {{useImport "ID"}}[]): this;
      add{{$singular}}(...nodes: {{$node}}[]): this;
      add{{$singular}}(...nodes: {{useImport "Builder"}}<{{$node}}>[]): this;
      add{{$singular}}(...nodes: {{useImport "ID"}}[] | {{$node}}[] | {{useImport "Builder"}}<{{$node}}>[]): this{
        nodes.forEach(node => this.builder.add{{$singular}}(node));
        return this;
      }

      add{{$singular}}ID(id: {{useImport "ID"}} | {{useImport "Builder"}}<{{$node}}>, options?: {{useImport "AssocEdgeInputOptions"}}): this {
        this.builder.add{{$singular}}ID(id, options);
        return this;
      }
    {{end -}}
  {{end -}}

  async changeset(): Promise<{{useImport "Changeset"}}<{{$node}}>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  {{ if $action.IsDeletingNode -}}
    async save(): Promise<void> {
      await this.builder.save();
  {{ else -}}
    async save(): Promise<{{$node}} | null> {
      await this.builder.save();
      return await this.builder.editedEnt();
  {{ end -}}
  }

  {{ if $action.IsDeletingNode -}}
    async saveX(): Promise<void> {
      await this.builder.saveX();
  {{ else -}}
    async saveX(): Promise<{{$node}}> {
      await this.builder.saveX();
      return await this.builder.editedEntX();
  {{ end -}}
  }

  static create<T extends {{$actionName}}>(
    this: new ({{$constructor}}) => T,
    {{$constructor}},
  ): {{$actionName}} {
    return new this({{$newArgs}});
  }

  {{if $hasSaveFromID -}}
    static async saveXFromID<T extends {{$actionName}}>(
      this: new ({{$constructor}}) => T,
      viewer: {{useImport "Viewer"}},
      id: {{useImport "ID"}},
      {{if $hasInput -}}
        input: {{$inputName}},
      {{else if edgeAction $action -}}
        {{ range $edge := $edges -}}
          {{$singular := $edge.Edge.Singular -}}
          {{/* TODO this assumes there is only one edge */}}
          {{$singular}}ID: {{useImport "ID"}},
        {{end -}}
      {{ end -}}
      {{ if $action.IsDeletingNode -}}
        ): Promise<void> {
      {{else -}}
        ): Promise<{{$node}}> {
      {{end -}}
      let {{$instance}} = await {{$node}}.loadX(viewer, id);
      {{if $hasInput -}}
        return await new this(viewer, {{$instance}}, input).saveX();
      {{else -}}
        return await new this(viewer, {{$instance}}).saveX();
      {{end -}}
    } 
  {{end -}}
}