{{reserveImport "./types" "NodeType" }}
{{ reserveImport .Package.PackagePath "ObjectLoaderFactory" }}
{{ reserveImport .Package.SchemaPackagePath "getObjectLoaderProperties"}}

{{ range .Schema.Nodes -}}
{{ with .NodeData}}
  {{$nodeData := . }}
  {{$instance := printf "%sLoaderInfo" .NodeInstance -}}
  {{$table := printf "%sTable" .NodeInstance -}}
  {{$fields := printf "%sFields" .NodeInstance -}}

  {{$dataType := .GetRawDBDataName -}}
  export interface {{$dataType}} {
    {{range $field := .FieldInfo.EntFields -}}
      {{ range $field.GetTsTypeImports -}}
        {{ if ($nodeData.ForeignImport .Import) -}}
          {{ reserveImportPath . false -}}
        {{end -}}
        {{$typ := useImportMaybe .Import -}}
      {{end -}}

      {{$field.GetDbColName}}: {{$field.TsActualType}};
    {{ end -}}
  }

  const {{$table}} = '{{.TableName}}';
  const {{$fields}} = [
    {{range $field := .FieldInfo.EntFields -}}
      {{if $field.FetchOnLoad -}}
        '{{$field.GetDbColName}}',
      {{end -}}
    {{end}}
  ];

  {{ $groups := .GetNodeLoaders }}
  {{range $loaders := $groups}}
    {{ range $loaders }}
      export const {{.Name}} = new {{useImport "ObjectLoaderFactory"}}<{{$dataType}}>({
        tableName: {{$table}},
        fields: {{$fields}},
        key: {{.Pkey}},
        {{$transformsLoaderCodegen := .TransformsLoaderCodegen -}}
        {{ if $transformsLoaderCodegen -}}
          {{ range $transformsLoaderCodegen.Imports -}}
            {{reserveImportPath . false -}}
            {{ $ignore := useImport .Import -}}
          {{ end -}}
          clause: {{$transformsLoaderCodegen.Code}},
          instanceKey: '{{printf "%s:transformedReadClause" $nodeData.TableName}}', 
        {{ else if .AddTransformedClause -}}
          {{ reserveDefaultImport $nodeData.GetSchemaPath $nodeData.GetSchemaConst -}}
          ... {{useImport "getObjectLoaderProperties"}}({{useImport $nodeData.GetSchemaConst}}, {{$table}}),
        {{ end -}}
      });
    {{end}}
  {{end}}

  export const {{$instance}} = {
    tableName: {{$table}},
    fields: {{$fields}},
    nodeType: {{useImport "NodeType"}}.{{.Node}},
    loaderFactory: {{printf "%sLoader" .NodeInstance }},
    fieldInfo: {
      {{range $field := .FieldInfo.EntFields -}}
      {{$field.FieldName}}: {
        dbCol: '{{$field.GetDbColName}}',
        inputKey: '{{$field.TsBuilderFieldName}}',
        },
      {{end}}
    },
  }

  {{ range $loaders := $groups }}
    {{ range $loader := $loaders -}}
      {{ range $loader2 := $loaders -}}
        {{if ne $loader.Name $loader2.Name -}}
          {{$loader.Name}}.addToPrime({{$loader2.Name}});
        {{end -}}
      {{end -}}
    {{end}}
  {{ end -}}
{{ end -}}
{{ end }}


  export function getLoaderInfoFromSchema(schema: string) {
    switch (schema) {
      {{ range .Schema.Nodes -}}
        case "{{.NodeData.Node }}":
          {{$instance := printf "%sLoaderInfo" .NodeData.NodeInstance -}}
          return {{$instance}};
      {{ end -}}
      default:
        throw new Error(`invalid schema ${schema} passed to getLoaderInfoFromSchema`);
    }
  }

  export function getLoaderInfoFromNodeType(nodeType: {{useImport "NodeType"}}) {
    switch (nodeType) {
      {{ range .Schema.Nodes -}}
        case {{useImport "NodeType"}}.{{.NodeData.Node}}:
          {{$instance := printf "%sLoaderInfo" .NodeData.NodeInstance -}}
          return {{$instance}};
      {{ end -}}
      default:
        throw new Error(`invalid nodeType ${nodeType} passed to getLoaderInfoFromNodeType`);
    }
  }