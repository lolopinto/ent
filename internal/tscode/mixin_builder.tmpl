{{ reserveImport .Package.PackagePath "loadEnt" "ID" "Data"  "loadEntX" "loadEnts" "LoadEntOptions" "loadNodesByEdge" "loadRow" "loadRows" "loadRowX" "loadUniqueEdge" "loadUniqueNode" "AllowIfViewerPrivacyPolicy" "PrivacyPolicy" "query" "Ent" "getEdgeTypeInGroup" "ObjectLoaderFactory" "Context" "loadEntViaKey" "loadEntXViaKey" "CustomQuery" "loadCustomEnts" "loadCustomData" "applyPrivacyPolicy" "Ent" "Viewer" "Data" "AssocEdgeInputOptions" }}
{{reserveImport .Package.ActionPackagePath "Action" "Builder" "WriteOperation" "Changeset" "saveBuilder" "saveBuilderX" "Orchestrator"}}

{{$p := .Pattern}}
{{ $cfg := .Config -}}
{{ $schema := .Schema -}}
{{ $pkg := .Package -}}

{{ reserveImport "src/ent/generated/types" "EdgeType" "NodeType" }}

{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := useImport $viewerInfo.GetImport -}}
{{ reserveImport .Package.InternalImportPath $p.GetMixinInterfaceName -}}

{{ range .Imports }}
  {{reserveImportPath . false}}
{{ end}}

export interface {{$p.GetBuilderInterfaceName}}<T extends {{useImport $p.GetMixinInterfaceName}}> {
  {{/* if the logic in here changes, also have to update edge_builder.tmpl */ -}}
  {{ $edgeInfos := edgeInfos $p.GetSortedEdges -}}
  {{ range $edge := $edgeInfos -}}  
    {{ $node := useImport .Node -}}
    {{ $polymorphicEdge := $edge.Edge.PolymorphicEdge -}}
    {{ if $polymorphicEdge -}}
      {{$edge.TSAddMethodName}}(...nodes: ({{$node}} | Builder<{{$node}}, any>)[]): this;
    {{ else -}}
    {{/* for PolymorphicEdges, this API doesn't work since we don't know the type. callers should call addLikerID in a map */}}  
      {{$edge.TSAddMethodName}}(...nodes: (ID | {{$node}} | Builder<{{$node}}, any>)[]): this;
    {{ end -}}
    {{$edge.TSAddIDMethodName}}(
      id: {{useImport "ID"}} | Builder<{{$node}}, any>, 
      {{ if $polymorphicEdge -}}
        nodeType: {{useImport "NodeType"}},
      {{ end -}}
      options?: {{useImport "AssocEdgeInputOptions"}}
    ): this;
    {{$edge.TSRemoveMethodName}}(...nodes: (ID | {{$node}})[]): this;
  {{end -}}
}

{{$builderName := printf "%sIsh" $p.GetBuilderName }}

// come back
type Constructor<T extends {{$p.GetMixinInterfaceName}}<{{$viewerType}}> = {{$p.GetMixinInterfaceName}}<{{$viewerType}}>> = new (...args: any[]) => T;

interface BuilderConstructor<T extends {{$p.GetMixinInterfaceName}}<{{$viewerType}}>, C = {}> {
  orchestrator: {{useImport "Orchestrator"}}<T, any, {{$viewerType}}>;
  isBuilder<T extends {{useImport "Ent"}}>(
    node: {{useImport "ID"}} | T | {{useImport "Builder"}}<T, any>,
  ): node is {{useImport "Builder"}}<T, any>;
};

{{$ishName := printf "%sIsh" $p.GetBuilderName -}} 

export type {{$ishName}}<T extends {{$p.GetMixinInterfaceName}}<{{$viewerType}}>> = Constructor<
  // @ts-ignore TODO fix
  BuilderConstructor<T>
>;


export function {{$p.GetBuilderName}}<
  TEnt extends {{$p.GetMixinInterfaceName}}<{{$viewerType}}>,
  TBase extends {{$ishName}}<TEnt>,
>(BaseClass: TBase) {
  return class {{$p.GetBuilderName}}
    extends BaseClass
    implements {{$p.GetBuilderInterfaceName}}<TEnt>
  {
    constructor(...args: any[]) {
      super(...args);
    }

  {{ template "edge_builder.tmpl" (dict "Edges" $p.GetSortedEdges "Schema" $schema "Package" $pkg) -}}
  }
}