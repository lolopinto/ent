{{ reserveImport .Package.InternalImportPath "EdgeType" "NodeType" }}
{{ reserveImport .Package.PackagePath "Ent" "ID" "Data" "Viewer" "EdgeQuerySource" "BaseEdgeQuery" "AssocEdge" "AssocEdgeQueryBase" "CustomEdgeQueryBase" "query" "RawCountLoaderFactory" "AssocEdgeCountLoaderFactory" "AssocEdgeLoaderFactory" "IndexLoaderFactory"}}
{{$importPath := .Package.InternalImportPath -}}
{{reserveImport "src/ent/generated/loadAny" "getLoaderOptions" -}}

{{$schema := .Schema}}

{{with .Info -}}

  {{ range .Imports }} 
    {{ if .DefaultImport -}}
      {{ reserveDefaultImport .PackagePath .Import}}
    {{ else -}}
      {{ reserveImport .PackagePath .Import}}
    {{end -}}
  {{ end}}

  {{$node := useImport .Node}}

  {{range $edge := .AssocEdges}}
    {{$edgeType := printf "%s.%s" (useImport "EdgeType") $edge.TsEdgeConst -}}
    {{ reserveImport $importPath $edge.TsEdgeQueryEdgeName -}}
    {{$edgeName := useImport $edge.TsEdgeQueryEdgeName -}}
    export const {{$edge.GetCountFactoryName}} = new {{useImport "AssocEdgeCountLoaderFactory"}}(
      {{$edgeType}},
    );
    export const {{$edge.GetDataFactoryName}} = new {{useImport "AssocEdgeLoaderFactory"}}(
      {{$edgeType}},
      () => {{$edgeName}},
    );

  {{end -}}

  {{range $edge := .IndexedEdges -}}
    {{$node := useImport $edge.GetNodeInfo.Node -}}
      export const {{$edge.GetCountFactoryName}} = new {{useImport "RawCountLoaderFactory"}}({
        ...{{$node}}.loaderOptions(),
        groupCol: {{$edge.QuotedDBColName}},
      });
      export const {{$edge.GetDataFactoryName}} = new {{useImport "IndexLoaderFactory"}}(
        {{$node}}.loaderOptions(),
        {{$edge.QuotedDBColName}},
        {
          toPrime: [{{useImport (printf "%sLoader" $edge.GetNodeInfo.NodeInstance)}}],
        }
      );
  {{end -}}

  {{range $edge := .AssocEdges}}
    {{$name := printf "%sBase" $edge.TsEdgeQueryName -}}
    {{ reserveImport $importPath $edge.TsEdgeQueryEdgeName -}}
    {{$edgeName := useImport $edge.TsEdgeQueryEdgeName -}}
    {{$thisType := printf "new (viewer: Viewer, src: EdgeQuerySource<%s>) => T" $node }}

  export class {{$name}} extends {{useImport "AssocEdgeQueryBase"}}<{{$node}}, {{useImport .NodeInfo.Node}}, {{$edgeName}}> {
    constructor(viewer: {{useImport "Viewer"}}, src: {{useImport "EdgeQuerySource"}}<{{$node}}>) {
      super(
        viewer, 
        src, 
        {{$edge.GetCountFactoryName}},
        {{$edge.GetDataFactoryName}},
        {{ if $edge.PolymorphicEdge -}}
          (str) => {{useImport "getLoaderOptions"}}(str as {{useImport "NodeType"}}),
        {{ else -}}
        {{useImport .NodeInfo.Node}}.loaderOptions(),
        {{ end -}}
      );
    }

    static query<T extends {{$name}}>(
      this: {{$thisType}},
      viewer: {{useImport "Viewer"}},
      src: {{useImport "EdgeQuerySource"}}<{{$node}}>,
    ): T {
      return new this(viewer, src);
    }

    {{if not $edge.PolymorphicEdge -}}
      {{$fNodeData := $schema.GetNodeDataForNode .NodeInfo.Node}}
      {{ range $fEdge := $fNodeData.EdgeInfo.Associations -}}
        {{$queryName := useImport $fEdge.TsEdgeQueryName -}}
        query{{$fEdge.CamelCaseEdgeName}}(): {{$queryName}} {
          return {{$queryName}}.query(this.viewer, this);
        }

    {{end -}}
    {{ end -}}
  }
  {{end}}

  {{range $edge := .IndexedEdges -}}
    {{$name := printf "%sBase" $edge.TsEdgeQueryName -}}
    {{$srcNode := useImport $edge.GetSourceNodeName -}}
    {{$node := useImport $edge.GetNodeInfo.Node -}}
    {{$thisType := printf "new (viewer: Viewer, src: %s | ID ) => T" $srcNode }}

    export class {{$name}} extends {{useImport "CustomEdgeQueryBase"}}<{{$srcNode}}, {{$node}}> {
      constructor(viewer: {{useImport "Viewer"}}, src: {{$srcNode}} | {{useImport "ID"}}) {
        super(viewer, {
          src: src, 
          countLoaderFactory: {{$edge.GetCountFactoryName}},
          dataLoaderFactory: {{$edge.GetDataFactoryName}},
          options:{{$node}}.loaderOptions(), 
        });
      }

      static query<T extends {{$name}}>(
        this: {{$thisType}},
        viewer: {{useImport "Viewer"}},
        src: {{$srcNode}} | {{useImport "ID"}},
      ): T {
        return new this(viewer, src);
      }
    }

  {{end }}
{{end -}}