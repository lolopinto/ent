{{ reserveImport .Package.TypesImportPath "EdgeType" "NodeType" }}
{{ reserveImport .Package.PackagePath "Ent" "ID" "Data" "Viewer" "EdgeQuerySource" "BaseEdgeQuery" "AssocEdgeQueryBase" "CustomEdgeQueryBase" "query" "RawCountLoaderFactory" "AssocEdgeCountLoaderFactory" "AssocEdgeLoaderFactory" "IndexLoaderFactory" "loadEnt" "LoadEntOptions" "OrderBy"}}
{{$importPath := .Package.InternalImportPath -}}
{{reserveImport "src/ent/generated/loadAny" "getLoaderOptions" -}}
{{ reserveImport .Package.SchemaPackagePath "getTransformedReadClause" }}

{{$schema := .Schema}}

{{ $cfg := .Config }}
{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := useImport $viewerInfo.GetImport -}}

{{with .Info -}}

  {{ range .Imports }} 
    {{reserveImportPath . false}}
  {{ end}}

  {{$node := useImport .Node}}
  {{$sourcePolymorphic := .SourcePolymorphic }}

  {{range $edge := .AssocEdges}}
    {{$edgeType := printf "%s.%s" (useImport "EdgeType") $edge.TsEdgeConst -}}
    {{ reserveImport $importPath $edge.TsEdgeQueryEdgeName -}}
    {{$edgeName := useImport $edge.TsEdgeQueryEdgeName -}}
    export const {{$edge.GetCountFactoryName}} = new {{useImport "AssocEdgeCountLoaderFactory"}}(
      {{$edgeType}},
    );
    export const {{$edge.GetDataFactoryName}} = new {{useImport "AssocEdgeLoaderFactory"}}(
      {{$edgeType}},
      () => {{$edgeName}},
    );

  {{end -}}

  {{range $edge := .AssocEdges}}
    {{$name := printf "%sBase" $edge.TsEdgeQueryName -}}
    {{ reserveImport $importPath $edge.TsEdgeQueryEdgeName -}}
    {{$edgeName := useImport $edge.TsEdgeQueryEdgeName -}}
    {{$destNode := useImport .NodeInfo.Node -}}
    {{$srcNode := $node -}}
    {{ if eq $srcNode "Ent" -}}
      {{$srcNode = printf "%s<%s>" $srcNode $viewerType -}}
    {{ end -}}
    {{ if eq $destNode "Ent" -}}
      {{$destNode = printf "%s<%s>" $destNode  $viewerType -}}
    {{ end -}}
    {{$thisType := printf "new (viewer: %s, src: EdgeQuerySource<%s, %s>) => T" $viewerType $srcNode $destNode}}

  export abstract class {{$name}} extends {{useImport "AssocEdgeQueryBase"}}<{{$srcNode}}, {{$destNode}}, {{$edgeName}}, {{$viewerType}}> {
    constructor(
      viewer: {{$viewerType}}, 
      src: {{useImport "EdgeQuerySource"}}<{{$srcNode}}, {{$destNode}}, {{$viewerType}}>,
    ) {
      super(
        viewer, 
        src, 
        {{$edge.GetCountFactoryName}},
        {{$edge.GetDataFactoryName}},
        {{ if $edge.PolymorphicEdge -}}
          (str) => {{useImport "getLoaderOptions"}}(str as {{useImport "NodeType"}}),
        {{ else -}}
        {{useImport .NodeInfo.Node}}.loaderOptions(),
        {{ end -}}
      );
    }

    static query<T extends {{$name}}>(
      this: {{$thisType}},
      viewer: {{$viewerType}},
      src: {{useImport "EdgeQuerySource"}}<{{$srcNode}}, {{$destNode}}>,
    ): T {
      return new this(viewer, src);
    }

    {{ if $schema.GlobalSchemaTransformsEdges -}}
      withoutTransformations(): this {
        this.configureEdgeQueryableDataOptions({ disableTransformations: true });
      return this;
    }

    {{end }}

    {{ if $sourcePolymorphic -}}
      protected abstract getSourceLoadEntOptions(): {{useImport "LoadEntOptions"}}<{{useImport "Ent"}}<{{$viewerType}}>, {{$viewerType}}>;
    {{ end }}

    sourceEnt(id: {{useImport "ID"}}) {
      {{if $sourcePolymorphic -}}
        return {{useImport "loadEnt"}}(this.viewer, id, this.getSourceLoadEntOptions());
      {{ else -}}
        return {{$node}}.load(this.viewer, id);
      {{ end -}}
    }

    {{if not $edge.PolymorphicEdge -}}
      {{$fNodeData := $schema.GetNodeDataForNode .NodeInfo.Node}}
      {{ range $fEdge := $fNodeData.EdgeInfo.Associations -}}
        {{$queryName := useImport $fEdge.TsEdgeQueryName -}}
        query{{$fEdge.CamelCaseEdgeName}}(): {{$queryName}} {
          return {{$queryName}}.query(this.viewer, this);
        }

    {{end -}}
    {{ end -}}
  }
  {{end}}

  {{range $edge := .IndexedEdges -}}
    {{ if $edge.GenerateBaseClass -}}
      {{$name := printf "%sBase" $edge.TsEdgeQueryName -}}
      {{$srcNode := useImport $edge.GetSourceNodeName -}}
      {{$node := useImport $edge.GetNodeInfo.Node -}}
      {{$srcPoly := $edge.SourceIsPolymorphic -}}
      {{$srcType := printf "%s | %s " "TEnt" (useImport "ID") }}
      {{ if eq $srcNode "Ent" -}}
        {{$srcNode = printf "%s<%s>" $srcNode $viewerType -}}
      {{ end -}}
      {{ if eq $node "Ent" -}}
        {{$node = printf "%s<%s>" $node  $viewerType -}}
      {{ end -}}
      {{ if $srcPoly -}}
        {{$srcType = "TEnt" }}
      {{ end -}}

      {{$thisType := printf "new (viewer: %s, src: %s  ) => T" $viewerType $srcType }}

      export class {{$name}}<TEnt extends {{$srcNode}} = {{$srcNode}}> extends {{useImport "CustomEdgeQueryBase"}}<TEnt, {{$node}}, {{$viewerType}}> {
      {{ if $srcPoly -}}
        constructor(viewer: {{$viewerType}}, private srcEnt: {{$srcType }}, sortColumn?: string | {{useImport "OrderBy"}}) {
          super(viewer, {
            src: srcEnt, 
      {{ else -}}
        constructor(viewer: {{$viewerType}}, src: {{$srcType }}, sortColumn?: string | {{useImport "OrderBy"}}) {
          super(viewer, {
            src: src, 
      {{ end -}}
            groupCol: {{$edge.QuotedDBColName}},
            loadEntOptions: {{$node}}.loaderOptions(),
            name: "{{$edge.TsEdgeQueryName}}",
            sortColumn: typeof sortColumn === 'string' ? sortColumn : undefined,
            orderby: typeof sortColumn === 'string' ? undefined : sortColumn,
          });
        }

        static query<T extends {{$name}}, TEnt extends {{$srcNode}} = {{$srcNode}}>(
          this: {{$thisType}},
          viewer: {{$viewerType}},
          src: {{$srcType}},
        ): T {
          return new this(viewer, src);
        }

        {{ if $srcPoly -}}
          async sourceEnt(_id: ID) {
            return this.srcEnt;
        {{ else -}}
          async sourceEnt(id: ID) {
            return {{$srcNode}}.load(this.viewer, id);
        {{ end -}}
        }
      }
    {{ end -}}

  {{end }}
{{end -}}