{{reserveImport .Package.ActionPackagePath "AssocEdgeOptions" }}

{{ $edgeInfos := edgeInfos .Edges -}}
{{ $schema := .Schema -}}

{{/* if the logic in here changes, also have to update mixin_builder.tmpl */ -}}
{{ range $edge := $edgeInfos -}}  
  {{ $node := useImport .Node -}}
  {{ $polymorphicEdge := $edge.Edge.PolymorphicEdge -}}
  {{ if $polymorphicEdge -}}
    {{$edge.TSAddMethodName}}(...nodes: ({{$node}} | Builder<{{$node}}, any>)[]): this {
  {{ else -}}
  {{/* for PolymorphicEdges, this API doesn't work since we don't know the type. callers should call addLikerID in a map */}}  
    {{$edge.TSAddMethodName}}(...nodes: (ID | {{$node}} | Builder<{{$node}}, any>)[]): this {
  {{ end -}}
  for (const node of nodes) {
    {{ if $polymorphicEdge -}}
      if (this.isBuilder(node)) {
        this.orchestrator.addOutboundEdge(
          node, 
          {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}},
          // nodeType will be gotten from Executor later
          "",
        );
      } else {
        this.orchestrator.addOutboundEdge(
          node.id, 
          {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}},
          node.nodeType,
        );
      }
    {{ else -}}
      if (this.isBuilder(node)) {
        this.{{$edge.TSAddIDMethodName}}(node);
      } else if (typeof node === "object") {
        this.{{$edge.TSAddIDMethodName}}(node.id);
      } else {
        this.{{$edge.TSAddIDMethodName}}(node);
      }
    {{ end -}}
  }
  return this;
}

  {{$edge.TSAddIDMethodName}}(
    id: {{useImport "ID"}} | Builder<{{$node}}, any>, 
    {{ if $polymorphicEdge -}}
      nodeType: {{useImport "NodeType"}},
    {{ end -}}
    options?: {{useImport "AssocEdgeInputOptions"}}
  ): this {
    {{/* TODO need inbound edges also */}}
    this.orchestrator.addOutboundEdge(
      id, 
      {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}},
      {{ if $polymorphicEdge -}}
        nodeType,
      {{ else -}}
        {{useImport "NodeType"}}.{{.Node}},
      {{end -}}
      options,
    );
    return this;
  }

  {{ if $schema.GlobalSchemaTransformsEdges -}}
    {{$edge.TSRemoveIDMethodName}}(id: ID, opts?: {{useImport "AssocEdgeOptions"}}): this {
      this.orchestrator.removeOutboundEdge(id, {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}}, opts);
      return this;
    }
  {{end}}

  {{$edge.TSRemoveMethodName}}(...nodes: (ID | {{$node}})[]): this {
    for (const node of nodes) {
      if (typeof node === "object") {
        this.orchestrator.removeOutboundEdge(node.id, {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}});
      } else {
        this.orchestrator.removeOutboundEdge(node, {{useImport "EdgeType"}}.{{$edge.TSEdgeConst}});
      }
    }
    return this;
  }

{{end -}}