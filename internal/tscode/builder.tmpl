{{reserveImport .Package.PackagePath "Viewer" "ID" "Ent" "AssocEdgeInputOptions"}}
{{reserveImport .Package.ActionPackagePath "Action" "Builder" "WriteOperation" "Changeset" "saveBuilder" "saveBuilderX" "Orchestrator" "OrchestratorOptions" "ChangesetOptions"}}

{{ $cfg := .CodePath -}}
{{ $schema := .Schema -}}
{{ $pkg := .Package -}}

{{define "inverseEdge" -}}
  {{ $field := .Field -}}
  {{ $inverseEdge := .InverseEdge -}}
  {{ $cfg := .Config -}}
  {{ $node := .Node -}}

  {{$tsFieldName := $field.TsBuilderFieldName -}}

  {{/* we magically expect a local variable input to be defined when this is used */ -}}
  if (input.{{$tsFieldName}} !== undefined) {
    if (input.{{$tsFieldName}}) {
      this.orchestrator.addInboundEdge(
        input.{{$tsFieldName}},
        {{useImport "EdgeType"}}.{{$inverseEdge.TsEdgeConst}},
        {{useImport "NodeType"}}.{{$inverseEdge.NodeInfo.Node}},
      );
    }
    {{ if $field.HasAsyncAccessor $cfg -}}
      // can't have this be dependent on privacy so need to fetch the raw data...
      if (this.existingEnt) {
        {{/* TODO eventually this needs to be smart enough and parallelize with any other possible fields here */ -}}
        const rawData = await {{$node}}.loadRawData(this.existingEnt.id, this.viewer.context);
        if (rawData && rawData.{{$field.GetDbColName}} !== null && rawData.{{$field.GetDbColName}} !== undefined) {
          this.orchestrator.removeInboundEdge(
            rawData.{{$field.GetDbColName}},
            {{useImport "EdgeType"}}.{{$inverseEdge.TsEdgeConst}},
          );
        }
      }
    {{ else -}}
      if (this.existingEnt && this.existingEnt.{{$tsFieldName}} && this.existingEnt.{{$tsFieldName}} !== input.{{$tsFieldName}}) {
        this.orchestrator.removeInboundEdge(
          this.existingEnt.{{$tsFieldName}},
          {{useImport "EdgeType"}}.{{$inverseEdge.TsEdgeConst}},
        );
      }
    {{ end -}}
  }
{{- end -}}

{{with .NodeData -}}
{{ $schemaPath := .GetSchemaPath }}
{{ reserveDefaultImport $schemaPath "schema"}}
{{ reserveImport "src/ent/generated/types" "EdgeType" "NodeType" }}
{{$loaderInfo := printf "%sLoaderInfo" .NodeInstance -}}
{{ reserveImport "src/ent/generated/loaders" $loaderInfo -}}


{{ range .GetImportPathsForDependencies $schema -}}
  {{ reserveImportPath . true}}
{{ end}}

{{$builder := printf "%sBuilder" .Node}}
{{$input := printf "%sInput" .Node}}

export interface {{$input}} {
  {{range $field := .FieldInfo.GetEditableFieldsInBuilder -}}
    {{$type := $field.TsBuilderType $cfg -}}
      {{range $field.TsBuilderImports $cfg -}}
        {{ reserveImportPath . true -}}
        {{ $ignore := useImport .Import -}}
      {{end -}}
    {{$field.TsBuilderFieldName}}?: {{$type}};
  {{end -}}
  // allow other properties. useful for action-only fields
  [x: string]: any;
}

{{/* TODO better way of doing this? */}}
function randomNum(): string {
  return Math.random()
    .toString(10)
    .substring(2);
}

{{$node := useImport .Node}}

{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := useImport $viewerInfo.GetImport -}}

{{$mixinInfo := .GetBuilderMixinInfo $schema -}}
{{$hasBuilderMixin := $mixinInfo.Imports -}}
{{ if $hasBuilderMixin -}}
  class Base {
    // @ts-ignore not assigning. need for Mixin
    orchestrator: {{useImport "Orchestrator"}}<{{$node}}, any, {{$viewerType}}>;

    constructor() {}

    isBuilder<T extends {{useImport "Ent"}}>(
      node: {{useImport "ID"}} | T | {{useImport "Builder"}}<T, any>,
    ): node is {{useImport "Builder"}}<T, any> {
      return (node as {{useImport "Builder"}}<T, any>).placeholderID !== undefined;
    }
  }
{{ end}}

type MaybeNull<T extends Ent> = T | null;
type TMaybleNullableEnt<T extends Ent> = T | MaybeNull<T>;

export class {{$builder}}<
  TInput extends {{$input}} = {{$input}},
  TExistingEnt extends TMaybleNullableEnt<{{$node}}> = {{$node}} | null,
> 

{{ if $hasBuilderMixin }}
  {{ range $mixinInfo.Imports -}}
    {{ $ignore := useImport .Import -}}
  {{end -}}
  extends {{$mixinInfo.Extends }}
{{ end -}}

implements {{useImport "Builder"}}<{{$node}}, {{$viewerType}}, TExistingEnt> {
  orchestrator: {{useImport "Orchestrator"}}<{{$node}}, TInput, {{$viewerType}}, TExistingEnt>;
  readonly placeholderID: {{useImport "ID"}};
  readonly ent = {{$node}};
  readonly nodeType = {{useImport "NodeType"}}.{{$node}};
  private input: TInput;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: {{$viewerType}},
    public readonly operation: {{useImport "WriteOperation"}},
    action: {{useImport "Action"}}<{{$node}}, {{useImport "Builder"}}<{{$node}}, {{$viewerType}}, TExistingEnt>, {{$viewerType}}, TInput, TExistingEnt>,
    public readonly existingEnt: TExistingEnt,
    opts?: Partial<{{useImport "OrchestratorOptions"}}<{{$node}},  TInput, {{$viewerType}}, TExistingEnt>>,
  ) {
    {{ if $hasBuilderMixin }}
      super();
    {{ end -}}
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-{{$node}}`;
    this.input = action.getInput();
    const updateInput = (d: {{$input}}) => this.updateInput.apply(this, [d]);

    this.orchestrator = new {{useImport "Orchestrator"}}({
      viewer,
      operation: this.operation,
      tableName: "{{.TableName}}", 
      key: "id",
      loaderOptions: {{$node}}.loaderOptions(),
      builder: this,
      action,
      {{useImport "schema"}},
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
      fieldInfo: {{useImport $loaderInfo}}.fieldInfo,
      ...opts,
    });
  }

  getInput(): TInput {
    return this.input;
  }

  {{ $immutableFields := .FieldInfo.GetImmutableFields -}}
  {{$updateInputType := $input }}
  {{ if $immutableFields }}
    {{/* TODO this really doesn't quite matter since input allows any key because of action only fields */}}
    {{$updateInputType = excludedFieldsType $input $immutableFields }}
  {{ end }}

  updateInput(input: {{$updateInputType}}) {
    {{ range $f := $immutableFields }}
      if (input.{{$f.TsBuilderFieldName}} !==undefined) {
        throw new Error(`{{$f.TsBuilderFieldName}} cannot be passed to updateInput. use {{$f.GetImmutableOverrideFieldNameInBuilder}} instead`);
      }
    {{ end }}
    {{range $field := .FieldInfo.NotEditableInverseEdgeFieldsWithDefaults -}}
      {{$tsFieldName := $field.TsBuilderFieldName -}}
      {{ $inverseEdge := $field.GetInverseEdge -}}
      // input.{{$tsFieldName}} default value is being set, also set inverseEdge
      {{ template "inverseEdge" (dict "Field" $field "InverseEdge" $inverseEdge "Config" $cfg "Node" $node) }}
    {{end -}}
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  {{ if $immutableFields}} 
    {{ range $f := $immutableFields }}
      // override immutable field `{{$f.TsBuilderFieldName}}`
      {{$f.GetImmutableOverrideFieldNameInBuilder}}(val: {{$f.TsBuilderType $cfg}}) {
      this.input.{{$f.TsBuilderFieldName}} = val;
      }
    {{end }}
  {{ end }} 


  deleteInputKey(key: keyof {{.Node}}Input) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  {{if .GenerateGetIDInBuilder -}}
    // this returns the id of the existing ent or the id of the ent that's being created
    async getEntID() {
      if (this.existingEnt) {
        return this.existingEnt.id;
      }
      const edited = await this.orchestrator.getEditedData();
      if (!edited.id) {
        throw new Error(`couldn't get the id field. should have been set by 'defaultValueOnCreate'`);
      }
      return edited.id;
    }
  {{ end -}}

  {{if .HasAssociationEdges -}}
    // this gets the inputs that have been written for a given edgeType and operation
    // WriteOperation.Insert for adding an edge and WriteOperation.Delete for deleting an edge
    getEdgeInputData(edgeType: {{useImport "EdgeType"}}, op: {{useImport "WriteOperation"}}) {
      return this.orchestrator.getInputEdges(edgeType, op);
    }

    clearInputEdges(edgeType: {{useImport "EdgeType"}}, op: {{useImport "WriteOperation"}}, id?: {{useImport "ID"}}) {
      this.orchestrator.clearInputEdges(edgeType, op, id);
    }
  {{end -}}

  {{$builderEdges := .BuilderEdges $schema}}
  {{ template "edge_builder.tmpl" (dict "Edges" $builderEdges "Schema" $schema "Package" $pkg) -}}

  async build(): Promise<{{useImport "Changeset"}}> {
    return this.orchestrator.build();
  }

  async buildWithOptions_BETA(options: {{useImport "ChangesetOptions"}}): Promise<{{useImport "Changeset"}}> {
    return this.orchestrator.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await {{useImport "saveBuilder"}}(this);
  }

  async saveX(): Promise<void> {
    await {{useImport "saveBuilderX"}}(this);
  }

  async editedEnt(): Promise<{{$node}} | null> {
    {{/* TODO: throw if save() has not been called */ -}}
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<{{$node}}> {
    {{/* TODO: throw if saveX() has not been called */ -}}
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const input = this.input;

    const result = new Map<string, any>();

    const addField = function(key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    {{range $field := .FieldInfo.GetEditableFieldsInBuilder -}}
      {{$tsFieldName := $field.TsBuilderFieldName -}}
      addField("{{$field.FieldName}}", input.{{$tsFieldName}});
      {{ $inverseEdge := $field.GetInverseEdge -}}
      {{ if $inverseEdge -}}
        {{ template "inverseEdge" (dict "Field" $field "InverseEdge" $inverseEdge "Config" $cfg "Node" $node) }}
      {{end -}}
    {{end -}}
    return result;
  }

  isBuilder<T extends {{useImport "Ent"}}>(node: ID | T | Builder<T, any>): node is Builder<T, any> {
    return (node as Builder<T, any>).placeholderID !== undefined;
  }

  {{range $field := .FieldInfo.GetEditableFieldsInBuilder}}
    {{$tsFieldName := $field.TsBuilderFieldName -}}
    // get value of {{$field.FieldName}}. Retrieves it from the input if specified or takes it from existingEnt
    {{ if $field.Private $cfg -}}
      {{/** hmm not ideal for these accessors to not work...*/ -}}
      getNew{{$field.CamelCaseName}}Value(): {{$field.TsBuilderUnionType $cfg}} | undefined{
        return this.input.{{$tsFieldName}};
      }
    {{ else -}}
      getNew{{$field.CamelCaseName}}Value(): {{$field.TsBuilderUnionType $cfg}} {
        if (this.input.{{$tsFieldName}} !== undefined) {
          return this.input.{{$tsFieldName}}
        }

        {{if $field.Nullable}}
          return this.existingEnt?.{{$tsFieldName}} ?? null;
        {{ else -}}
          if (!this.existingEnt) {
            throw new Error('no value to return for `{{$tsFieldName}}` since not in input and no existingEnt');
          }
          return this.existingEnt.{{$tsFieldName}};
        {{end -}}
      }
    {{end -}}

  {{end}}
}

{{end -}}
