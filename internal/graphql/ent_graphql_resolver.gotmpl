{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "github.com/lolopinto/ent/ent"}}
{{ reserveImport "github.com/lolopinto/ent/ent/cast"}}
{{ reserveImport "github.com/lolopinto/ent/ent/viewer"}}
{{ reserveImport .Config.GetImportPathToModels}}

{{define "action" -}}
	{{ $field := . -}}
	{{ $action := action $field -}}
	{{ $actionMethodName := actionMethodName $action -}}
	{{ $nodeInfo := $action.GetNodeInfo -}}
	{{ $node := $nodeInfo.Node -}}
	{{ $actionPath := actionPath $action | lookupImport -}}
	{{- if $action.MutatingExistingObject -}}
		existingNode, err := models.Load{{$node}}FromContext(ctx, input.{{$node}}ID)
		if err != nil {
			return nil, err
		}

		{{ if $action.IsDeletingNode -}}
			err = {{ $actionPath }}.{{$actionMethodName}}FromContext(ctx, existingNode).
		{{else -}}
			node, err := {{ $actionPath }}.{{$actionMethodName}}FromContext(ctx, existingNode).
		{{end -}}
	{{else -}}
		node, err := {{ $actionPath }}.{{$actionMethodName}}FromContext(ctx).
	{{end -}}
	{{$fields := actionFields $action}}
	{{range $field := $fields -}}	
		{{if $field.Field.Nullable -}}
			{{$field.NullableSetterMethodName}}(input.{{$field.FieldName}}).
		{{else -}}
			{{$field.SetterMethodName}}(input.{{$field.FieldName}}).
		{{end -}}
	{{end -}}
	{{$edges := actionEdges $action}}
	{{range $edge := $edges -}}	
			{{if removeEdgeAction $action -}}
				{{$edge.RemoveSingleIDMethodName}}(input.{{$edge.GraphQLNodeID}}).
			{{ else -}}
				{{$edge.AddSingleIDMethodName}}(input.{{$edge.GraphQLNodeID}}).
			{{end -}}
	{{end -}}
	{{$fields := actionNonEntFields $action}}
	{{range $field := $fields -}}	
		{{$field.SetterMethodName}}(input.{{$field.FieldName}}).
	{{end -}}
		Save()
	
	if err != nil {
		return nil, err
	}

	return &{{$field.TypeReference.Definition.Name}}{
		{{/* for create and edit mutations, we return the node. */ -}}
		{{ if $action.IsDeletingNode -}}
			Deleted{{$node}}ID: &existingNode.ID,
		{{else -}}
			{{$nodeInfo.Node}}: node,
		{{end -}}
	}, nil
{{end -}}

{{ define "loadCustomFnFields" -}}
	{{$fn := .}}
	{{ if eq (len $fn.IDFields) 1 -}}
		{{$arg := $fn.GetFirstFnField -}}
		{{if $arg.Slice -}}
			{{/* TODO we need a GenLoadUsersFromContext.... */ -}}
			v, ctxErr := viewer.ForContext(ctx)
			if ctxErr != nil {
				return nil, ctxErr
			}
			result := <- models.GenLoad{{$arg.FieldType}}s(v, {{$arg.GoFieldName}}...)
			if err := ent.CoalesceErr(result); err != nil {
				return nil, err
			}

		{{else -}}
			{{$name := $arg.Field.Name -}}
			{{$name}}, {{$name}}Err := models.Load{{$arg.FieldType}}FromContext(ctx, {{$arg.GoFieldName}})
			if {{$name}}Err != nil {
				return nil, {{$name}}Err
			}

		{{end -}}
	{{ else -}}
		{{ $orderedFields := $fn.OrderedIDFields -}}
		{{ $orderedFields.LHS}} := {{$orderedFields.RHS }}
		if err := ent.CoalesceErr({{$orderedFields.LHS}}); err != nil {
			return nil, err
		}

	{{end -}}
{{end -}}

{{define "customFn" -}}
	{{ $field := . -}}
	{{ $fn := customFn $field -}}

	{{ if $fn.HasIDFields -}}
		{{ template "loadCustomFnFields" $fn -}}
	{{end -}}

	{{ $fnStr := $fn.GetFnCallDefinition -}}

	{{if $fn.ReturnsDirectly -}}
		return {{$fnStr}}
	{{else -}}
		{{$fnStr}}
		{{if $fn.ReturnsError -}}
			if err != nil {
				return nil, err
			}
		{{end -}}
		{{ if $fn.ReturnsComplexType }}

			return &{{$field.TypeReference.Definition.Name}}{
				{{range $result := $fn.GetResults -}}
					{{$result.Key}}: {{$result.Variable}},
				{{end -}}
			}, nil
		{{ else -}}
			return &ret, nil
		{{end -}}
	{{end -}}

{{end -}}

type {{.ResolverType}} struct {}

{{ range $object := .Objects -}}
	{{- if $object.HasResolvers -}}
		func (r *{{$.ResolverType}}) {{$object.Name}}() {{ $object.ResolverInterface | ref }} {
			return &{{lcFirst $object.Name}}{{ucFirst $.ResolverType}}{r}
		}
	{{ end -}}
{{ end }}

{{ range $object := .Objects -}}
	{{- if $object.HasResolvers -}}
		type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct { *{{$.ResolverType}} }

		{{ range $field := $object.Fields -}}
			{{- if $field.IsResolver }}
			func (r *{{lcFirst $object.Name}}{{ucFirst $.ResolverType}}) {{$field.GoFieldName}}{{ $field.ShortResolverDeclaration }} {

        {{- if castToString $field -}}
          return string(obj.OwnerType), nil
        {{- else if loadObjectFromContext $field -}}
          return models.Load{{$field.GoFieldName}}FromContext(ctx, id)
				{{- else if fieldEdge $field -}}
					return obj.Load{{$field.GoFieldName}}()
				{{- else if pluralEdge $field -}}
					return obj.Load{{$field.GoFieldName}}()
				{{- else if action $field -}}
					{{- template "action" $field -}}
				{{- else if customFn $field -}}
					{{- template "customFn" $field -}}
				{{- else if groupEdgeEnum $field -}}
					enum, err := obj.{{$field.GoFieldName}}ForGQL()
					if err != nil {
						return nil, err
					}
					// cast to enum that graphql resolve would have generated
					cast := {{groupEdgeEnumConst $field}}(*enum)
					return &cast, err
				{{- else -}}
					panic("not implemented")
        {{ end -}}
			}
			{{ end -}}
		{{ end -}}
	{{ end -}}
{{ end }}
