{{reserveDefaultImport "express" "express"}}
{{reserveImport "express-graphql" "graphqlHTTP"}}
{{reserveDefaultImport "./generated/schema" "schema"}}

{{reserveImport "http" "IncomingMessage" "ServerResponse" }}
{{reserveImport .Package "DB"}}
{{reserveImport .AuthPackage "buildContext" }}

let app = {{useImport "express"}}();

app.use(
  "/graphql",
  {{useImport "graphqlHTTP"}}((request: {{useImport "IncomingMessage"}}, response: {{useImport "ServerResponse"}}) => {
    let doWork = async () => {
      let context = await {{useImport "buildContext"}}(request, response);
      return {
        schema: {{useImport "schema"}},
        graphiql: true,
        context,
      };
    };
    return doWork();
  })
);
const server = app.listen(process.env.port || 4000);

app.get("/healthz", async (req, res, params) => {
  try {
    const pool = {{useImport "DB"}}.getInstance().getPool();
    await pool.query("SELECT now()");
    res.sendStatus(200);
  } catch (err) {
    console.error("error sending health check", err);
    res.sendStatus(403);
  }
});

function handleShutdown(signal: string) {
  server.close(() => {
    DB.getInstance()
      .endPool()
      .then(() => {
        process.exit(0);
      });
  });
}
process.on("SIGTERM", handleShutdown);
process.on("SIGINT", handleShutdown);
process.on("SIGHUP", handleShutdown);
