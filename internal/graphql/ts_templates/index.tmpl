{{reserveDefaultImport "express" "express"}}
{{reserveImport "graphql-helix" "getGraphQLParameters" "processRequest" "sendResult" "shouldRenderGraphiQL" "renderGraphiQL"}}
{{reserveDefaultImport "./generated/schema" "schema"}}

{{reserveImport "http" "IncomingMessage" "ServerResponse" }}
{{reserveImport .Package "DB"}}
{{reserveImport .AuthPackage "buildContext" }}

let app = {{useImport "express"}}();
app.use(express.json());
app.use(
  "/graphql",
  async (req, res) => {
    if ({{useImport "shouldRenderGraphiQL"}}(req)) {
      res.send({{useImport "renderGraphiQL"}}());
    } else {
      const { operationName, query, variables } = {{useImport "getGraphQLParameters"}}(req);
      const result = await {{useImport "processRequest"}}({
        operationName,
        query,
        variables,
        request: req,
        {{useImport "schema"}},
        contextFactory: async () => {
          return {{useImport "buildContext"}}(req, res);
        },
      });
      await {{useImport "sendResult"}}(result, res);
    }
  },
);
const server = app.listen(process.env.PORT || 4000);

app.get("/healthz", async (req, res, params) => {
  try {
    const pool = {{useImport "DB"}}.getInstance().getPool();
    await pool.query("SELECT now()");
    res.sendStatus(200);
  } catch (err) {
    console.error("error sending health check", err);
    res.sendStatus(403);
  }
});

function handleShutdown(signal: string) {
  server.close(() => {
    DB.getInstance()
      .endPool()
      .then(() => {
        process.exit(0);
      });
  });
}
process.on("SIGTERM", handleShutdown);
process.on("SIGINT", handleShutdown);
process.on("SIGHUP", handleShutdown);
