{{reserveImport "graphql" "GraphQLSchema" "GraphQLObjectType" "GraphQLID" "GraphQLString" "GraphQLEnumType" "GraphQLNonNull" "GraphQLList" "GraphQLFloat" "GraphQLInt" "GraphQLFieldConfig" "GraphQLFieldConfigMap" "GraphQLResolveInfo"}}
{{reserveImport "ent/ent" "ID" }}
{{reserveImport "src/graphql/context" "Context"}}
{{reserveImport "ent/graphql/scalars/time" "GraphQLTime"}}

{{/* import types that we may need e.g. UserType, ContactType, etc */}}
{{ range .EdgeNodes -}} 
  {{reserveImport .ImportPath .GraphQLType}}
{{ end -}}

{{$gqlNode := .GQLNode -}}

{{with .NodeData -}}
{{$packagePath := printf "src/ent/%s" .PackageName -}}
{{ reserveDefaultImport $packagePath .Node -}}

{{$node := useImport .Node -}}
{{$nodeInstance := .NodeInstance -}}


export const {{$gqlNode.Type}} = new {{useImport "GraphQLObjectType"}}({
  name: "{{$gqlNode.Node}}",
  fields: (): {{useImport "GraphQLFieldConfigMap"}}<{{$node}}, {{useImport "Context"}}> => ({
    {{/* TODO enum support e.g. account status */}} 
    {{ range $field := $gqlNode.Fields -}}
      {{$field.Name}}: {
        {{range $import := $field.FieldImports -}}
          {{$ignore := useImport $import -}}
        {{end -}}
        type: {{$field.FieldType}},
        {{if $field.HasResolveFunction -}}
          resolve: ({{$nodeInstance}}: {{$node}}) => {
            {{$field.FunctionContents}};
          },
        {{end -}}
      },
    {{end -}}
  }),
});


interface {{$node}}QueryArgs {
  id: {{useImport "ID"}};
}

export const {{$node}}Query: {{useImport "GraphQLFieldConfig"}}<
  undefined,
  Context,
  {{$node}}QueryArgs
> = {
  type: {{$node}}Type,
  args: {
    id: {
      description: "id",
      type: {{useImport "GraphQLID"}},
    },
  },
  resolve: async (_source, args: {{$node}}QueryArgs, context:{{useImport "Context"}}, _info: {{useImport "GraphQLResolveInfo"}}) => {
    return {{$node}}.load(context.viewer, args.id);
  },
};

{{end -}}
