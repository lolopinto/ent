{{reserveImport "graphql" "GraphQLSchema" "GraphQLObjectType" "GraphQLInputObjectType" "GraphQLID" "GraphQLString" "GraphQLEnumType" "GraphQLNonNull" "GraphQLList" "GraphQLFloat" "GraphQLInt" "GraphQLFieldConfig" "GraphQLFieldConfigMap" "GraphQLResolveInfo" "GraphQLInputFieldConfigMap" "GraphQLBoolean" "GraphQLUnionType" "GraphQLInterfaceType" }}
{{ $cfg := .Config -}}
{{$baseObj := .Data -}}

{{reserveImport $baseObj.Package.PackagePath "ID" "RequestContext" }}
{{reserveImport $baseObj.Package.GraphQLPackagePath "GraphQLTime" "GraphQLNodeInterface" "GraphQLEdgeInterface" "GraphQLConnectionInterface" "nodeIDEncoder" "resolveID" "mustDecodeIDFromGQLID" "encodeGQLID" }}

{{$viewerInfo := $cfg.GetTemplatizedViewer -}}
{{ reserveImportPath $viewerInfo.GetImportPath false -}}
{{$viewerType := $viewerInfo.GetImport -}}

{{/* import types that we may need e.g. UserType, ContactType, etc */}}
{{ range $baseObj.Imports -}} 
  {{if .ImportPath -}}
    {{reserveImportPath . true}}
  {{end -}}
{{ end -}}

{{ range $baseObj.DefaultImports -}} 
  {{if .ImportPath -}}
    {{reserveDefaultImport .ImportPath .Import}}
  {{end -}}
{{ end -}}

{{ template "interfaces.tmpl" (dict "Base" $baseObj "Interfaces" $baseObj.TSInterfaces) -}}

{{ range $baseObj.UnconditionalImports }}
  {{reserveImportPath . true}}
  {{ $ignore := useImport .Import }}
{{ end -}}

{{ range $baseObj.Classes -}}
  {{.Contents}}
{{ end -}}

{{ range $baseObj.Enums -}}
  {{ template "enum.tmpl" . -}}
{{ end -}}

{{$nodeInstance := $baseObj.NodeInstance}}

{{ range $gqlNode := $baseObj.GQLNodes -}}
  {{if eq $gqlNode.GQLType "GraphQLUnionType" -}}
    {{ if $gqlNode.Exported -}}
    export const {{$gqlNode.Type}} = new {{useImport "GraphQLUnionType"}}({
    {{ else -}}
      const {{$gqlNode.Type}} = new {{useImport "GraphQLUnionType"}}({
    {{ end -}}
      name: "{{$gqlNode.Node}}",
      types: () => [
        {{ range .UnionTypes -}}
          {{ useImportMaybe .}},
        {{ end -}}
      ],
    });

  {{ else -}}
    {{ if $gqlNode.Exported -}}
      export const {{$gqlNode.Type}} = new {{useImport $gqlNode.GQLType}}({
    {{ else -}}
      const {{$gqlNode.Type}} = new {{useImport $gqlNode.GQLType}}({
    {{ end -}}
      name: "{{$gqlNode.Node}}",
      {{ if eq $gqlNode.GQLType "GraphQLInputObjectType" -}}
        fields: (): {{useImport "GraphQLInputFieldConfigMap"}} => ({
      {{ else -}}
        {{ $tsType := $gqlNode.TSType -}}
        {{ if $tsType -}}
          {{ if $baseObj.ForeignImport $tsType -}}
            {{$tsType = useImport $tsType -}}
          {{ end -}}
          fields: (): {{useImport "GraphQLFieldConfigMap"}}<{{$tsType}}, {{useImport "RequestContext"}}<{{useImport $viewerType}}>> => ({
        {{ else -}}
        {{/* for interfaces, we just ignore the type */ -}}
          fields: () => ({
        {{ end -}}
      {{ end -}}
        {{ template "field.tmpl" (dict "Base" $baseObj "Node" $gqlNode "NodeInstance" $nodeInstance "ViewerType" $viewerType) -}}
        }),
      {{if .GQLInterfaces -}}
      interfaces: () => [
        {{range $interface := .GQLInterfaces -}}
          {{useImport $interface}},
        {{end -}}
      ],
      {{end -}}
      {{if .IsTypeOfMethod -}}
        isTypeOf(obj) {
          {{ range $line := .IsTypeOfMethod -}}
            {{$line}}
          {{ end -}}
        },
      {{end -}}
    });
  {{end}}
{{end}}

{{ if $baseObj.FieldConfig}}
  {{ template "field_config.tmpl" (dict "Base" $baseObj "FieldConfig" $baseObj.FieldConfig "Config" $cfg) -}}
{{ end -}}
