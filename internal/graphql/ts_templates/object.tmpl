{{reserveImport "graphql" "GraphQLSchema" "GraphQLObjectType" "GraphQLID" "GraphQLString" "GraphQLEnumType" "GraphQLNonNull" "GraphQLList" "GraphQLFloat" "GraphQLInt" "GraphQLFieldConfig" "GraphQLFieldConfigMap" "GraphQLResolveInfo"}}
{{reserveImport "ent/ent" "ID" }}
{{reserveImport "src/graphql/context" "Context"}}
{{reserveImport "ent/graphql/scalars/time" "GraphQLTime"}}

{{$gqlNode := .GQLNode -}}

{{/* import types that we may need e.g. UserType, ContactType, etc */}}
{{ range $gqlNode.Imports -}} 
  {{reserveImport .ImportPath .GraphQLType}}
{{ end -}}

{{ range $gqlNode.DefaultImports -}} 
  {{reserveDefaultImport .ImportPath .GraphQLType}}
{{ end -}}


{{$node := useImport .NodeData.Node -}}
{{$nodeInstance := .NodeData.NodeInstance -}}

{{ range $gqlNode.Interfaces -}}
  {{ if .Exported -}}
    export interface {{.Name }} {
  {{ else -}}
   interface {{.Name }} {
  {{ end -}}
  {{ range .Fields -}}
    {{$type := .Type -}}
    {{if .UseImport -}}
      {{$type = useImport $type -}}
    {{end -}}
    {{.Name}}: {{$type}};
  {{ end -}}
   }
{{ end -}}

export const {{$gqlNode.Type}} = new {{useImport "GraphQLObjectType"}}({
  name: "{{$gqlNode.Node}}",
  fields: (): {{useImport "GraphQLFieldConfigMap"}}<{{$node}}, {{useImport "Context"}}> => ({
    {{/* TODO enum support e.g. account status */}} 
    {{ range $field := $gqlNode.Fields -}}
      {{$field.Name}}: {
        {{range $import := $field.FieldImports -}}
          {{ if ne $import $gqlNode.Type -}}
            {{$ignore := useImport $import -}}
          {{end -}}
        {{end -}}
        type: {{$field.FieldType}},
        {{if $field.HasResolveFunction -}}
          resolve: ({{$nodeInstance}}: {{$node}}) => {
            {{$field.FunctionContents}};
          },
        {{end -}}
      },
    {{end -}}
  }),
});

{{$fieldConfig := .FieldConfig -}}

{{$prefix := printf "const %s" $fieldConfig.Name -}}
{{ if $fieldConfig.Exported -}}
  {{$prefix = printf "export %s" $prefix -}}
{{end -}}

{{$prefix}}: {{useImport "GraphQLFieldConfig"}}<
  undefined,
  Context,
  {{$fieldConfig.Arg}}
> = {
  type: {{$fieldConfig.Type}},
  args: {
    {{range $arg := $fieldConfig.Args -}}
      {{$arg.Name}}: {
        description: "{{$arg.Description}}",
        {{ range $import := .Imports -}}
          {{$ignored := useImport $import -}}
        {{ end -}}
        type: {{$arg.FieldType -}},
      }
    {{end -}}
  },
  resolve: async (_source, args: {{$fieldConfig.Arg}}, context:{{useImport "Context"}}, _info: {{useImport "GraphQLResolveInfo"}}) => {
    {{$fieldConfig.FunctionContents}}
  },
};

