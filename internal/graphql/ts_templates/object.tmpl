{{reserveImport "graphql" "GraphQLSchema" "GraphQLObjectType" "GraphQLInputObjectType" "GraphQLID" "GraphQLString" "GraphQLEnumType" "GraphQLNonNull" "GraphQLList" "GraphQLFloat" "GraphQLInt" "GraphQLFieldConfig" "GraphQLFieldConfigMap" "GraphQLResolveInfo" "GraphQLInputFieldConfigMap" "GraphQLBoolean" }}
{{reserveImport .Package.PackagePath "ID" "RequestContext" }}
{{reserveImport .Package.GraphQLPackagePath "GraphQLTime" "GraphQLNodeInterface" "GraphQLEdgeInterface" "GraphQLConnectionInterface" "nodeIDEncoder" "resolveID" "mustDecodeIDFromGQLID" "encodeGQLID" }}

{{$baseObj := . -}}

{{/* import types that we may need e.g. UserType, ContactType, etc */}}
{{ range $baseObj.Imports -}} 
  {{if .ImportPath -}}
    {{reserveImport .ImportPath .Type}}
  {{end -}}
{{ end -}}

{{ range $baseObj.DefaultImports -}} 
  {{if .ImportPath -}}
    {{reserveDefaultImport .ImportPath .Type}}
  {{end -}}
{{ end -}}

{{ template "interfaces.tmpl" (dict "Base" $baseObj "Interfaces" $baseObj.TSInterfaces) -}}

{{ range .Enums -}}
  {{ template "enum.tmpl" . -}}
{{ end -}}

{{/* these 2 probably need to change */}}
{{/* TODO these definitely need to change now */}}
{{/* node and nodeInstance do not make sense for non-ents e.g. custom types...*/}}
{{$node := useImport .Node -}}
{{$nodeInstance := .NodeInstance -}}

{{ range $gqlNode := .GQLNodes -}}
  {{ if $gqlNode.Exported -}}
    export const {{$gqlNode.Type}} = new {{useImport $gqlNode.GQLType}}({
  {{ else -}}
    const {{$gqlNode.Type}} = new {{useImport $gqlNode.GQLType}}({
  {{ end -}}
    name: "{{$gqlNode.Node}}",
    {{ if eq $gqlNode.GQLType "GraphQLInputObjectType" -}}
      fields: (): {{useImport "GraphQLInputFieldConfigMap"}} => ({
    {{ else -}}
      fields: (): {{useImport "GraphQLFieldConfigMap"}}<{{$gqlNode.TSType}}, {{useImport "RequestContext"}}> => ({
    {{ end -}}
      {{ template "field.tmpl" (dict "Base" $baseObj "Node" $gqlNode "NodeInstance" $nodeInstance) -}}
      }),
    {{if .GQLInterfaces -}}
    interfaces: [
      {{range $interface := .GQLInterfaces -}}
        {{useImport $interface}},
      {{end -}}
    ],
    {{end -}}
    {{if .IsTypeOfMethod -}}
      isTypeOf(obj) {
        {{ range $line := .IsTypeOfMethod -}}
          {{$line}}
        {{ end -}}
      },
    {{end -}}
  });
  
{{end}}

{{ if .FieldConfig}}
  {{ template "field_config.tmpl" (dict "Base" $baseObj "FieldConfig" .FieldConfig) -}}
{{ end -}}
