// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package action

import (
	"context"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	builder "github.com/lolopinto/ent/internal/test_schema/models/address"
)

type DeleteAddressAction struct {
	builder *builder.AddressMutationBuilder
}

// DeleteAddressFromContext is the factory method to get an ...
func DeleteAddressFromContext(ctx context.Context, address *models.Address) *DeleteAddressAction {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		panic("tried to perform mutation without a viewer")
	}
	return DeleteAddress(v, address)
}

// DeleteAddress is the factory method to get an ...
func DeleteAddress(v viewer.ViewerContext, address *models.Address) *DeleteAddressAction {
	action := &DeleteAddressAction{}
	builder := builder.NewMutationBuilder(
		v,
		ent.DeleteOperation,
		action.requiredFields(),
		actions.ExistingEnt(address),
	)
	action.builder = builder
	return action
}

func (action *DeleteAddressAction) GetBuilder() ent.MutationBuilder {
	return action.builder
}

func (action *DeleteAddressAction) GetTypedBuilder() *builder.AddressMutationBuilder {
	return action.builder
}

func (action *DeleteAddressAction) GetViewer() viewer.ViewerContext {
	return action.builder.GetViewer()
}

func (action *DeleteAddressAction) SetBuilderOnTriggers(triggers []actions.Trigger) {
	action.builder.SetTriggers(triggers)
}

func (action *DeleteAddressAction) SetBuilderOnObservers(observers []actions.Observer) {
	action.builder.SetObservers(observers)
}

func (action *DeleteAddressAction) SetBuilderOnValidators(validators []actions.Validator) {
	action.builder.SetValidators(validators)
}

func (action *DeleteAddressAction) GetChangeset() (ent.Changeset, error) {
	return actions.GetChangeset(action)
}

func (action *DeleteAddressAction) Entity() ent.Entity {
	return nil
}

func (action *DeleteAddressAction) ExistingEnt() ent.Entity {
	return action.builder.ExistingEnt()
}

func (action *DeleteAddressAction) requiredFields() []string {
	return []string{}
}

// Validate returns an error if the current state of the action is not valid
func (action *DeleteAddressAction) Validate() error {
	return action.builder.Validate()
}

// Save is the method called to execute this action and save change
func (action *DeleteAddressAction) Save() error {
	return actions.Save(action)
}

var _ actions.Action = &DeleteAddressAction{}
