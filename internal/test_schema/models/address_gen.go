// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package models

import (
	"context"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/cast"
	"github.com/lolopinto/ent/ent/privacy"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

const (
	// AddressType is the node type for the Address object. Used to identify this node in edges and other places.
	AddressType ent.NodeType = "address"
)

// Address represents the `Address` model
type Address struct {
	ent.Node
	privacy.AlwaysDenyPrivacyPolicy
	City          string   `db:"city"`
	Country       string   `db:"country"`
	ResidentNames []string `db:"resident_names"`
	State         string   `db:"state"`
	StreetAddress string   `db:"street_address"`
	Zip           string   `db:"zip"`
	Viewer        viewer.ViewerContext
}

// AddressResult stores the result of loading a Address. It's a tuple type which has 2 fields:
// a Address and an error
type AddressResult struct {
	Address *Address
	Err     error
}

func (res *AddressResult) Error() string {
	return res.Err.Error()
}

// AddressesResult stores the result of loading a slice of Addresss. It's a tuple type which has 2 fields:
// a []*Address and an error
type AddressesResult struct {
	Addresss []*Address
	Err      error
}

func (res *AddressesResult) Error() string {
	return res.Err.Error()
}

// IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
func (address Address) IsNode() {}

// GetType returns the NodeType of this entity. In this case: ContactType
func (address *Address) GetType() ent.NodeType {
	return AddressType
}

// GetViewer returns the viewer for this entity.
func (address *Address) GetViewer() viewer.ViewerContext {
	return address.Viewer
}

// GetConfig returns the config for this entity.
func (address *Address) GetConfig() ent.Config {
	return &configs.AddressConfig{}
}

// LoadAddressFromContext loads the given Address given the context and id
func LoadAddressFromContext(ctx context.Context, id string) (*Address, error) {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	return LoadAddress(v, id)
}

// GenLoadAddressFromContext loads the given Address given the context and id
func GenLoadAddressFromContext(ctx context.Context, id string) <-chan *AddressResult {
	res := make(chan *AddressResult)
	go func() {
		v, err := viewer.ForContext(ctx)
		if err != nil {
			res <- &AddressResult{
				Err: err,
			}
			return
		}
		res <- <-(GenLoadAddress(v, id))
	}()
	return res
}

// LoadAddress loads the given Address given the viewer and id
func LoadAddress(v viewer.ViewerContext, id string) (*Address, error) {
	var address Address
	err := ent.LoadNode(v, id, &address)
	return &address, err
}

// GenLoadAddress loads the given Address given the id
func GenLoadAddress(v viewer.ViewerContext, id string) <-chan *AddressResult {
	res := make(chan *AddressResult)
	go func() {
		var result AddressResult
		var address Address
		result.Err = <-ent.GenLoadNode(v, id, &address)
		result.Address = &address
		res <- &result
	}()
	return res
}

// LoadAddresss loads multiple Addresss given the ids
func LoadAddresss(v viewer.ViewerContext, ids ...string) ([]*Address, error) {
	var addresss []*Address
	err := ent.LoadNodes(v, ids, &addresss, &configs.AddressConfig{})
	return addresss, err
}

// GenLoadAddresss loads multiple Addresss given the ids
func GenLoadAddresss(v viewer.ViewerContext, ids ...string) <-chan *AddressesResult {
	res := make(chan *AddressesResult)
	go func() {
		var result AddressesResult
		result.Err = <-ent.GenLoadNodes(v, ids, &result.Addresss, &configs.AddressConfig{})
		res <- &result
	}()
	return res
}

// DBFields is used by the ent framework to load the ent from the underlying database
func (address *Address) DBFields() ent.DBFields {
	return ent.DBFields{
		"id": func(v interface{}) error {
			var err error
			address.ID, err = cast.ToUUIDString(v)
			return err
		},
		"city": func(v interface{}) error {
			var err error
			address.City, err = cast.ToString(v)
			return err
		},
		"country": func(v interface{}) error {
			var err error
			address.Country, err = cast.ToString(v)
			return err
		},
		"resident_names": func(v interface{}) error {
			return cast.UnmarshallJSON(v, &address.ResidentNames)
		},
		"state": func(v interface{}) error {
			var err error
			address.State, err = cast.ToString(v)
			return err
		},
		"street_address": func(v interface{}) error {
			var err error
			address.StreetAddress, err = cast.ToString(v)
			return err
		},
		"zip": func(v interface{}) error {
			var err error
			address.Zip, err = cast.ToString(v)
			return err
		},
	}
}

// UnsupportedScan flags that we can't call StructScan() on the ent to get data out of the db, have to always use MapScan() and DBFields() method above
func (address *Address) UnsupportedScan() bool {
	return true
}

var _ ent.Entity = &Address{}
