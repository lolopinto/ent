// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package contact

import (
	"errors"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type ContactMutationBuilder struct {
	builder       *actions.EntMutationBuilder
	contact       *models.Contact
	emailAddress  *string
	firstName     *string
	lastName      *string
	userID        *string
	userIDBuilder ent.MutationBuilder
	favorite      *bool
	numberOfCalls *int
	pi            *float64
}

func NewMutationBuilder(
	viewer viewer.ViewerContext,
	operation ent.WriteOperation,
	fieldMap ent.ActionFieldMap,
	opts ...func(*actions.EntMutationBuilder),
) *ContactMutationBuilder {
	var contact models.Contact
	b := actions.NewMutationBuilder(
		viewer,
		operation,
		&contact,
		&configs.ContactConfig{},
		opts...,
	)
	b.FieldMap = fieldMap
	return &ContactMutationBuilder{
		builder: b,
		contact: &contact,
	}
}

func (b *ContactMutationBuilder) SetEmailAddress(emailAddress string) *ContactMutationBuilder {
	b.emailAddress = &emailAddress
	b.builder.SetField("EmailAddress", emailAddress)
	return b
}

func (b *ContactMutationBuilder) SetFirstName(firstName string) *ContactMutationBuilder {
	b.firstName = &firstName
	b.builder.SetField("FirstName", firstName)
	return b
}

func (b *ContactMutationBuilder) SetLastName(lastName string) *ContactMutationBuilder {
	b.lastName = &lastName
	b.builder.SetField("LastName", lastName)
	return b
}

func (b *ContactMutationBuilder) SetUserID(userID string) *ContactMutationBuilder {
	b.userID = &userID
	b.builder.SetField("UserID", userID)
	return b
}

func (b *ContactMutationBuilder) SetUserIDBuilder(builder ent.MutationBuilder) *ContactMutationBuilder {
	b.userIDBuilder = builder
	b.builder.SetField("UserID", builder)
	return b
}

func (b *ContactMutationBuilder) SetFavorite(favorite bool) *ContactMutationBuilder {
	b.favorite = &favorite
	b.builder.SetField("Favorite", favorite)
	return b
}

func (b *ContactMutationBuilder) SetNilableFavorite(favorite *bool) *ContactMutationBuilder {
	b.favorite = favorite
	if favorite == nil {
		b.builder.SetField("Favorite", nil)
	} else {
		b.builder.SetField("Favorite", *favorite)
	}
	return b
}

func (b *ContactMutationBuilder) SetNumberOfCalls(numberOfCalls int) *ContactMutationBuilder {
	b.numberOfCalls = &numberOfCalls
	b.builder.SetField("NumberOfCalls", numberOfCalls)
	return b
}

func (b *ContactMutationBuilder) SetNilableNumberOfCalls(numberOfCalls *int) *ContactMutationBuilder {
	b.numberOfCalls = numberOfCalls
	if numberOfCalls == nil {
		b.builder.SetField("NumberOfCalls", nil)
	} else {
		b.builder.SetField("NumberOfCalls", *numberOfCalls)
	}
	return b
}

func (b *ContactMutationBuilder) SetPi(pi float64) *ContactMutationBuilder {
	b.pi = &pi
	b.builder.SetField("Pi", pi)
	return b
}

func (b *ContactMutationBuilder) SetNilablePi(pi *float64) *ContactMutationBuilder {
	b.pi = pi
	if pi == nil {
		b.builder.SetField("Pi", nil)
	} else {
		b.builder.SetField("Pi", *pi)
	}
	return b
}

func (b *ContactMutationBuilder) GetEmailAddress() string {
	if b.emailAddress == nil {
		return ""
	}
	return *b.emailAddress
}

func (b *ContactMutationBuilder) GetFirstName() string {
	if b.firstName == nil {
		return ""
	}
	return *b.firstName
}

func (b *ContactMutationBuilder) GetLastName() string {
	if b.lastName == nil {
		return ""
	}
	return *b.lastName
}

func (b *ContactMutationBuilder) GetUserID() string {
	if b.userID == nil {
		return ""
	}

	if b.userIDBuilder != nil {
		return b.userIDBuilder.GetPlaceholderID()
	}
	return *b.userID
}

func (b *ContactMutationBuilder) GetUserIDBuilder() ent.MutationBuilder {
	return b.userIDBuilder
}

func (b *ContactMutationBuilder) GetFavorite() *bool {
	if b.favorite == nil {
		return nil
	}
	return b.favorite
}

func (b *ContactMutationBuilder) GetNumberOfCalls() *int {
	if b.numberOfCalls == nil {
		return nil
	}
	return b.numberOfCalls
}

func (b *ContactMutationBuilder) GetPi() *float64 {
	if b.pi == nil {
		return nil
	}
	return b.pi
}

// AddAllowList adds one or more instances of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) AddAllowList(users ...*models.User) *ContactMutationBuilder {
	for _, user := range users {
		b.AddAllowListID(user.ID)
	}
	return b
}

// AddAllowListIDs adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) AddAllowListIDs(userIDs ...string) *ContactMutationBuilder {
	for _, userID := range userIDs {
		b.AddAllowListID(userID)
	}
	return b
}

// AddAllowListID adds an instance of User to the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) AddAllowListID(userID string, options ...func(*ent.EdgeOperation)) *ContactMutationBuilder {
	b.builder.AddOutboundEdge(models.ContactToAllowListEdge, userID, models.UserType, options...)
	return b
}

// RemoveAllowList removes an instance of User from the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) RemoveAllowList(users ...*models.User) *ContactMutationBuilder {
	for _, user := range users {
		b.RemoveAllowListID(user.ID)
	}
	return b
}

// RemoveAllowListIDs removes an instance of User from the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) RemoveAllowListIDs(userIDs ...string) *ContactMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveAllowListID(userID)
	}
	return b
}

// RemoveAllowListID removes an instance of User from the AllowList edge while editing the User ent
func (b *ContactMutationBuilder) RemoveAllowListID(userID string) *ContactMutationBuilder {
	b.builder.RemoveOutboundEdge(models.ContactToAllowListEdge, userID, models.UserType)
	return b
}

func (b *ContactMutationBuilder) Validate() error {
	return b.builder.Validate()
}

func (b *ContactMutationBuilder) GetViewer() viewer.ViewerContext {
	return b.builder.GetViewer()
}

func (b *ContactMutationBuilder) GetContact() *models.Contact {
	return b.contact
}

func (b *ContactMutationBuilder) SetTriggers(triggers []actions.Trigger) error {
	b.builder.SetTriggers(triggers)
	for _, t := range triggers {
		trigger, ok := t.(ContactTrigger)
		if !ok {
			return errors.New("invalid trigger")
		}
		trigger.SetBuilder(b)
	}
	return nil
}

// SetObservers sets the builder on an observer. Unlike SetTriggers, it's not required that observers implement the ContactObserver
// interface since there's expected to be more reusability here e.g. generic logging, generic send text observer etc
func (b *ContactMutationBuilder) SetObservers(observers []actions.Observer) error {
	b.builder.SetObservers(observers)
	for _, o := range observers {
		observer, ok := o.(ContactObserver)
		if ok {
			observer.SetBuilder(b)
		}
	}
	return nil
}

func (b *ContactMutationBuilder) GetChangeset() (ent.Changeset, error) {
	return b.builder.GetChangeset()
}

func (b *ContactMutationBuilder) ExistingEnt() ent.Entity {
	return b.builder.ExistingEnt()
}

func (b *ContactMutationBuilder) Entity() ent.Entity {
	return b.builder.Entity()
}

func (b *ContactMutationBuilder) GetOperation() ent.WriteOperation {
	return b.builder.GetOperation()
}

func (b *ContactMutationBuilder) GetPlaceholderID() string {
	return b.builder.GetPlaceholderID()
}

var _ ent.MutationBuilder = &ContactMutationBuilder{}

type ContactTrigger interface {
	SetBuilder(*ContactMutationBuilder)
}

type ContactMutationBuilderTrigger struct {
	Builder *ContactMutationBuilder
}

func (trigger *ContactMutationBuilderTrigger) SetBuilder(b *ContactMutationBuilder) {
	trigger.Builder = b
}

type ContactObserver interface {
	SetBuilder(*ContactMutationBuilder)
}

type ContactMutationBuilderObserver struct {
	Builder *ContactMutationBuilder
}

func (observer *ContactMutationBuilderObserver) SetBuilder(b *ContactMutationBuilder) {
	observer.Builder = b
}
