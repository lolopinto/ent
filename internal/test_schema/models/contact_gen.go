// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package models

import (
	"context"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/cast"
	"github.com/lolopinto/ent/ent/privacy"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

const (
	// ContactType is the node type for the Contact object. Used to identify this node in edges and other places.
	ContactType ent.NodeType = "contact"

	// ContactToAllowListEdge is the edgeType for the contact to allowlist edge.
	ContactToAllowListEdge ent.EdgeType = "f6ecacb9-1d4f-47bb-8f18-f7d544450ea2"
)

// Contact represents the `Contact` model
type Contact struct {
	ent.Node
	privacy.AlwaysDenyPrivacyPolicy
	EmailAddress  string   `db:"email_address"`
	FirstName     string   `db:"first_name"`
	LastName      string   `db:"last_name"`
	UserID        string   `db:"user_id"`
	Favorite      *bool    `db:"favorite" graphql:"_"`
	NumberOfCalls *int     `db:"number_of_calls" graphql:"_"`
	Pi            *float64 `db:"pi" graphql:"_"`
	Viewer        viewer.ViewerContext
}

// ContactResult stores the result of loading a Contact. It's a tuple type which has 2 fields:
// a Contact and an error
type ContactResult struct {
	Contact *Contact
	Err     error
}

func (res *ContactResult) Error() string {
	return res.Err.Error()
}

// ContactsResult stores the result of loading a slice of Contacts. It's a tuple type which has 2 fields:
// a []*Contact and an error
type ContactsResult struct {
	Contacts []*Contact
	Err      error
}

func (res *ContactsResult) Error() string {
	return res.Err.Error()
}

// IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
func (contact Contact) IsNode() {}

// GetType returns the NodeType of this entity. In this case: ContactType
func (contact *Contact) GetType() ent.NodeType {
	return ContactType
}

// GetViewer returns the viewer for this entity.
func (contact *Contact) GetViewer() viewer.ViewerContext {
	return contact.Viewer
}

// GetConfig returns the config for this entity.
func (contact *Contact) GetConfig() ent.Config {
	return &configs.ContactConfig{}
}

// LoadContactFromContext loads the given Contact given the context and id
func LoadContactFromContext(ctx context.Context, id string) (*Contact, error) {
	v, err := viewer.ForContext(ctx)
	if err != nil {
		return nil, err
	}
	return LoadContact(v, id)
}

// GenLoadContactFromContext loads the given Contact given the context and id
func GenLoadContactFromContext(ctx context.Context, id string) <-chan *ContactResult {
	res := make(chan *ContactResult)
	go func() {
		v, err := viewer.ForContext(ctx)
		if err != nil {
			res <- &ContactResult{
				Err: err,
			}
			return
		}
		res <- <-(GenLoadContact(v, id))
	}()
	return res
}

// LoadContact loads the given Contact given the viewer and id
func LoadContact(v viewer.ViewerContext, id string) (*Contact, error) {
	var contact Contact
	err := ent.LoadNode(v, id, &contact)
	return &contact, err
}

// GenLoadContact loads the given Contact given the id
func GenLoadContact(v viewer.ViewerContext, id string) <-chan *ContactResult {
	res := make(chan *ContactResult)
	go func() {
		var result ContactResult
		var contact Contact
		result.Err = <-ent.GenLoadNode(v, id, &contact)
		result.Contact = &contact
		res <- &result
	}()
	return res
}

// LoadContacts loads multiple Contacts given the ids
func LoadContacts(v viewer.ViewerContext, ids ...string) ([]*Contact, error) {
	var contacts []*Contact
	err := ent.LoadNodes(v, ids, &contacts, &configs.ContactConfig{})
	return contacts, err
}

// GenLoadContacts loads multiple Contacts given the ids
func GenLoadContacts(v viewer.ViewerContext, ids ...string) <-chan *ContactsResult {
	res := make(chan *ContactsResult)
	go func() {
		var result ContactsResult
		result.Err = <-ent.GenLoadNodes(v, ids, &result.Contacts, &configs.ContactConfig{})
		res <- &result
	}()
	return res
}

func LoadContactIDFromEmailAddress(emailAddress string) (string, error) {
	// TODO this is a short term API that needs to be killed
	// since it shouldn't be possible to get an ent without privacy
	// change the underlying API to only return a map[string]interface{} or something else
	var contact Contact
	err := ent.LoadNodeFromParts(&contact, &configs.ContactConfig{}, "email_address", emailAddress)
	if err != nil {
		return "", err
	}
	return contact.ID, nil
}

// GenContactEmails returns the ContactEmails associated with the Contact instance
func (contact *Contact) GenContactEmails() <-chan *ContactEmailsResult {
	res := make(chan *ContactEmailsResult)
	go func() {
		var result ContactEmailsResult
		result.Err = <-ent.GenLoadForeignKeyNodes(contact.Viewer, contact.ID, &result.ContactEmails, "contact_id", &configs.ContactEmailConfig{})
		res <- &result
	}()
	return res
}

// LoadContactEmails returns the ContactEmails associated with the Contact instance
func (contact *Contact) LoadContactEmails() ([]*ContactEmail, error) {
	var contactEmails []*ContactEmail
	err := ent.LoadForeignKeyNodes(contact.Viewer, contact.ID, &contactEmails, "contact_id", &configs.ContactEmailConfig{})
	return contactEmails, err
}

// LoadAllowListEdges returns the AllowList edges associated with the Contact instance
func (contact *Contact) LoadAllowListEdges() ([]*ent.AssocEdge, error) {
	return ent.LoadEdgesByType(contact.ID, ContactToAllowListEdge)
}

// GenAllowListEdges returns the User edges associated with the Contact instance
func (contact *Contact) GenAllowListEdges() <-chan *ent.AssocEdgesResult {
	return ent.GenLoadEdgesByType(contact.ID, ContactToAllowListEdge)
}

// GenAllowList returns the Users associated with the Contact instance
func (contact *Contact) GenAllowList() <-chan *UsersResult {
	res := make(chan *UsersResult)
	go func() {
		var result UsersResult
		result.Err = <-ent.GenLoadNodesByType(contact.Viewer, contact.ID, ContactToAllowListEdge, &result.Users, &configs.UserConfig{})
		res <- &result
	}()
	return res
}

// LoadAllowList returns the Users associated with the Contact instance
func (contact *Contact) LoadAllowList() ([]*User, error) {
	var users []*User
	err := ent.LoadNodesByType(contact.Viewer, contact.ID, ContactToAllowListEdge, &users, &configs.UserConfig{})
	return users, err
}

// LoadAllowListEdgeFor loads the ent.AssocEdge between the current node and the given id2 for the AllowList edge.
func (contact *Contact) LoadAllowListEdgeFor(id2 string) (*ent.AssocEdge, error) {
	return ent.LoadEdgeByType(contact.ID, id2, ContactToAllowListEdge)
}

// GenAllowListEdgeFor provides a concurrent API to load the ent.AssocEdge between the current node and the given id2 for the AllowList edge.
func (contact *Contact) GenLoadAllowListEdgeFor(id2 string) <-chan *ent.AssocEdgeResult {
	return ent.GenLoadEdgeByType(contact.ID, id2, ContactToAllowListEdge)
}

// DBFields is used by the ent framework to load the ent from the underlying database
func (contact *Contact) DBFields() ent.DBFields {
	return ent.DBFields{
		"id": func(v interface{}) error {
			var err error
			contact.ID, err = cast.ToUUIDString(v)
			return err
		},
		"email_address": func(v interface{}) error {
			var err error
			contact.EmailAddress, err = cast.ToString(v)
			return err
		},
		"first_name": func(v interface{}) error {
			var err error
			contact.FirstName, err = cast.ToString(v)
			return err
		},
		"last_name": func(v interface{}) error {
			var err error
			contact.LastName, err = cast.ToString(v)
			return err
		},
		"user_id": func(v interface{}) error {
			var err error
			contact.UserID, err = cast.ToString(v)
			return err
		},
		"favorite": func(v interface{}) error {
			var err error
			contact.Favorite, err = cast.ToNullableBool(v)
			return err
		},
		"number_of_calls": func(v interface{}) error {
			var err error
			contact.NumberOfCalls, err = cast.ToNullableInt(v)
			return err
		},
		"pi": func(v interface{}) error {
			var err error
			contact.Pi, err = cast.ToNullableFloat(v)
			return err
		},
	}
}

var _ ent.Entity = &Contact{}
