// Code generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

package event

import (
	"errors"
	"time"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/actions"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/configs"
)

type EventMutationBuilder struct {
	builder       *actions.EdgeGroupMutationBuilder
	event         *models.Event
	name          *string
	userID        *string
	userIDBuilder ent.MutationBuilder
	startTime     *time.Time
	endTime       *time.Time
	location      *string
}

func NewMutationBuilder(
	viewer viewer.ViewerContext,
	operation ent.WriteOperation,
	fieldMap ent.ActionFieldMap,
	opts ...func(*actions.EntMutationBuilder),
) *EventMutationBuilder {
	var event models.Event
	b := actions.NewMutationBuilder(
		viewer,
		operation,
		&event,
		&configs.EventConfig{},
		opts...,
	)
	b.FieldMap = fieldMap
	b2 := actions.NewEdgeGroupMutationBuilder(
		b,
		event.RsvpStatusMap(),
	)
	return &EventMutationBuilder{
		builder: b2,
		event:   &event,
	}
}

func (b *EventMutationBuilder) SetName(name string) *EventMutationBuilder {
	b.name = &name
	b.builder.SetField("Name", name)
	return b
}

func (b *EventMutationBuilder) SetUserID(userID string) *EventMutationBuilder {
	b.userID = &userID
	b.builder.SetField("UserID", userID)
	b.builder.AddInboundEdge(models.UserToEventsEdge, userID, models.EventType)
	return b
}

func (b *EventMutationBuilder) SetUserIDBuilder(builder ent.MutationBuilder) *EventMutationBuilder {
	b.userIDBuilder = builder
	b.builder.SetField("UserID", builder)
	b.builder.AddInboundEdge(models.UserToEventsEdge, builder, models.EventType)
	return b
}

func (b *EventMutationBuilder) SetStartTime(startTime time.Time) *EventMutationBuilder {
	b.startTime = &startTime
	b.builder.SetField("StartTime", startTime)
	return b
}

func (b *EventMutationBuilder) SetEndTime(endTime time.Time) *EventMutationBuilder {
	b.endTime = &endTime
	b.builder.SetField("EndTime", endTime)
	return b
}

func (b *EventMutationBuilder) SetNilableEndTime(endTime *time.Time) *EventMutationBuilder {
	b.endTime = endTime
	if endTime == nil {
		b.builder.SetField("EndTime", nil)
	} else {
		b.builder.SetField("EndTime", *endTime)
	}
	return b
}

func (b *EventMutationBuilder) SetLocation(location string) *EventMutationBuilder {
	b.location = &location
	b.builder.SetField("Location", location)
	return b
}

func (b *EventMutationBuilder) GetName() string {
	if b.name == nil {
		return ""
	}
	return *b.name
}

func (b *EventMutationBuilder) GetUserID() string {
	if b.userID == nil {
		return ""
	}

	if b.userIDBuilder != nil {
		return b.userIDBuilder.GetPlaceholderID()
	}
	return *b.userID
}

func (b *EventMutationBuilder) GetUserIDBuilder() ent.MutationBuilder {
	return b.userIDBuilder
}

func (b *EventMutationBuilder) GetStartTime() time.Time {
	if b.startTime == nil {
		return time.Time{}
	}
	return *b.startTime
}

func (b *EventMutationBuilder) GetEndTime() *time.Time {
	if b.endTime == nil {
		return nil
	}
	return b.endTime
}

func (b *EventMutationBuilder) GetLocation() string {
	if b.location == nil {
		return ""
	}
	return *b.location
}

// AddHosts adds one or more instances of User to the Hosts edge while editing the User ent
func (b *EventMutationBuilder) AddHosts(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.AddHostID(user.ID)
	}
	return b
}

// AddHostIDs adds an instance of User to the Hosts edge while editing the User ent
func (b *EventMutationBuilder) AddHostIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.AddHostID(userID)
	}
	return b
}

// AddHostID adds an instance of User to the Hosts edge while editing the User ent
func (b *EventMutationBuilder) AddHostID(userID string, options ...func(*ent.EdgeOperation)) *EventMutationBuilder {
	b.builder.AddOutboundEdge(models.EventToHostsEdge, userID, models.UserType, options...)
	return b
}

// AddCreator adds one or more instances of User to the Creator edge while editing the User ent
func (b *EventMutationBuilder) AddCreator(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.AddCreatorID(user.ID)
	}
	return b
}

// AddCreatorIDs adds an instance of User to the Creator edge while editing the User ent
func (b *EventMutationBuilder) AddCreatorIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.AddCreatorID(userID)
	}
	return b
}

// AddCreatorID adds an instance of User to the Creator edge while editing the User ent
func (b *EventMutationBuilder) AddCreatorID(userID string, options ...func(*ent.EdgeOperation)) *EventMutationBuilder {
	b.builder.AddOutboundEdge(models.EventToCreatorEdge, userID, models.UserType, options...)
	return b
}

// AddInvited adds one or more instances of User to the Invited edge while editing the User ent
func (b *EventMutationBuilder) AddInvited(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.AddInvitedID(user.ID)
	}
	return b
}

// AddInvitedIDs adds an instance of User to the Invited edge while editing the User ent
func (b *EventMutationBuilder) AddInvitedIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.AddInvitedID(userID)
	}
	return b
}

// AddInvitedID adds an instance of User to the Invited edge while editing the User ent
func (b *EventMutationBuilder) AddInvitedID(userID string, options ...func(*ent.EdgeOperation)) *EventMutationBuilder {
	b.builder.AddOutboundEdge(models.EventToInvitedEdge, userID, models.UserType, options...)
	return b
}

// AddAttending adds one or more instances of User to the Attending edge while editing the User ent
func (b *EventMutationBuilder) AddAttending(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.AddAttendingID(user.ID)
	}
	return b
}

// AddAttendingIDs adds an instance of User to the Attending edge while editing the User ent
func (b *EventMutationBuilder) AddAttendingIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.AddAttendingID(userID)
	}
	return b
}

// AddAttendingID adds an instance of User to the Attending edge while editing the User ent
func (b *EventMutationBuilder) AddAttendingID(userID string, options ...func(*ent.EdgeOperation)) *EventMutationBuilder {
	b.builder.AddOutboundEdge(models.EventToAttendingEdge, userID, models.UserType, options...)
	return b
}

// AddDeclined adds one or more instances of User to the Declined edge while editing the User ent
func (b *EventMutationBuilder) AddDeclined(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.AddDeclinedID(user.ID)
	}
	return b
}

// AddDeclinedIDs adds an instance of User to the Declined edge while editing the User ent
func (b *EventMutationBuilder) AddDeclinedIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.AddDeclinedID(userID)
	}
	return b
}

// AddDeclinedID adds an instance of User to the Declined edge while editing the User ent
func (b *EventMutationBuilder) AddDeclinedID(userID string, options ...func(*ent.EdgeOperation)) *EventMutationBuilder {
	b.builder.AddOutboundEdge(models.EventToDeclinedEdge, userID, models.UserType, options...)
	return b
}

// RemoveHosts removes an instance of User from the Hosts edge while editing the User ent
func (b *EventMutationBuilder) RemoveHosts(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.RemoveHostID(user.ID)
	}
	return b
}

// RemoveHostIDs removes an instance of User from the Hosts edge while editing the User ent
func (b *EventMutationBuilder) RemoveHostIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveHostID(userID)
	}
	return b
}

// RemoveHostID removes an instance of User from the Hosts edge while editing the User ent
func (b *EventMutationBuilder) RemoveHostID(userID string) *EventMutationBuilder {
	b.builder.RemoveOutboundEdge(models.EventToHostsEdge, userID, models.UserType)
	return b
}

// RemoveCreator removes an instance of User from the Creator edge while editing the User ent
func (b *EventMutationBuilder) RemoveCreator(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.RemoveCreatorID(user.ID)
	}
	return b
}

// RemoveCreatorIDs removes an instance of User from the Creator edge while editing the User ent
func (b *EventMutationBuilder) RemoveCreatorIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveCreatorID(userID)
	}
	return b
}

// RemoveCreatorID removes an instance of User from the Creator edge while editing the User ent
func (b *EventMutationBuilder) RemoveCreatorID(userID string) *EventMutationBuilder {
	b.builder.RemoveOutboundEdge(models.EventToCreatorEdge, userID, models.UserType)
	return b
}

// RemoveInvited removes an instance of User from the Invited edge while editing the User ent
func (b *EventMutationBuilder) RemoveInvited(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.RemoveInvitedID(user.ID)
	}
	return b
}

// RemoveInvitedIDs removes an instance of User from the Invited edge while editing the User ent
func (b *EventMutationBuilder) RemoveInvitedIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveInvitedID(userID)
	}
	return b
}

// RemoveInvitedID removes an instance of User from the Invited edge while editing the User ent
func (b *EventMutationBuilder) RemoveInvitedID(userID string) *EventMutationBuilder {
	b.builder.RemoveOutboundEdge(models.EventToInvitedEdge, userID, models.UserType)
	return b
}

// RemoveAttending removes an instance of User from the Attending edge while editing the User ent
func (b *EventMutationBuilder) RemoveAttending(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.RemoveAttendingID(user.ID)
	}
	return b
}

// RemoveAttendingIDs removes an instance of User from the Attending edge while editing the User ent
func (b *EventMutationBuilder) RemoveAttendingIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveAttendingID(userID)
	}
	return b
}

// RemoveAttendingID removes an instance of User from the Attending edge while editing the User ent
func (b *EventMutationBuilder) RemoveAttendingID(userID string) *EventMutationBuilder {
	b.builder.RemoveOutboundEdge(models.EventToAttendingEdge, userID, models.UserType)
	return b
}

// RemoveDeclined removes an instance of User from the Declined edge while editing the User ent
func (b *EventMutationBuilder) RemoveDeclined(users ...*models.User) *EventMutationBuilder {
	for _, user := range users {
		b.RemoveDeclinedID(user.ID)
	}
	return b
}

// RemoveDeclinedIDs removes an instance of User from the Declined edge while editing the User ent
func (b *EventMutationBuilder) RemoveDeclinedIDs(userIDs ...string) *EventMutationBuilder {
	for _, userID := range userIDs {
		b.RemoveDeclinedID(userID)
	}
	return b
}

// RemoveDeclinedID removes an instance of User from the Declined edge while editing the User ent
func (b *EventMutationBuilder) RemoveDeclinedID(userID string) *EventMutationBuilder {
	b.builder.RemoveOutboundEdge(models.EventToDeclinedEdge, userID, models.UserType)
	return b
}

func (b *EventMutationBuilder) SetEnumValue(enumValue string) *EventMutationBuilder {
	b.builder.SetEnumValue(enumValue)
	return b
}

func (b *EventMutationBuilder) SetIDValue(idValue string, nodeType ent.NodeType) *EventMutationBuilder {
	b.builder.SetIDValue(idValue, nodeType)
	return b
}
func (b *EventMutationBuilder) Validate() error {
	return b.builder.Validate()
}

func (b *EventMutationBuilder) GetViewer() viewer.ViewerContext {
	return b.builder.GetViewer()
}

func (b *EventMutationBuilder) GetEvent() *models.Event {
	return b.event
}

func (b *EventMutationBuilder) SetTriggers(triggers []actions.Trigger) error {
	b.builder.SetTriggers(triggers)
	for _, t := range triggers {
		trigger, ok := t.(EventTrigger)
		if !ok {
			return errors.New("invalid trigger")
		}
		trigger.SetBuilder(b)
	}
	return nil
}

// SetObservers sets the builder on an observer. Unlike SetTriggers, it's not required that observers implement the EventObserver
// interface since there's expected to be more reusability here e.g. generic logging, generic send text observer etc
func (b *EventMutationBuilder) SetObservers(observers []actions.Observer) error {
	b.builder.SetObservers(observers)
	for _, o := range observers {
		observer, ok := o.(EventObserver)
		if ok {
			observer.SetBuilder(b)
		}
	}
	return nil
}

func (b *EventMutationBuilder) GetChangeset() (ent.Changeset, error) {
	return b.builder.GetChangeset()
}

func (b *EventMutationBuilder) ExistingEnt() ent.Entity {
	return b.builder.ExistingEnt()
}

func (b *EventMutationBuilder) Entity() ent.Entity {
	return b.builder.Entity()
}

func (b *EventMutationBuilder) GetOperation() ent.WriteOperation {
	return b.builder.GetOperation()
}

func (b *EventMutationBuilder) GetPlaceholderID() string {
	return b.builder.GetPlaceholderID()
}

var _ ent.MutationBuilder = &EventMutationBuilder{}

type EventTrigger interface {
	SetBuilder(*EventMutationBuilder)
}

type EventMutationBuilderTrigger struct {
	Builder *EventMutationBuilder
}

func (trigger *EventMutationBuilderTrigger) SetBuilder(b *EventMutationBuilder) {
	trigger.Builder = b
}

type EventObserver interface {
	SetBuilder(*EventMutationBuilder)
}

type EventMutationBuilderObserver struct {
	Builder *EventMutationBuilder
}

func (observer *EventMutationBuilderObserver) SetBuilder(b *EventMutationBuilder) {
	observer.Builder = b
}
