// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
	"time"

	"github.com/lolopinto/ent/ent"
	"github.com/lolopinto/ent/ent/cast"
	"github.com/lolopinto/ent/ent/viewer"
	"github.com/lolopinto/ent/internal/test_schema/graphql/auth"
	"github.com/lolopinto/ent/internal/test_schema/graphql/block"
	"github.com/lolopinto/ent/internal/test_schema/graphql/log"
	viewer1 "github.com/lolopinto/ent/internal/test_schema/graphql/viewer"
	"github.com/lolopinto/ent/internal/test_schema/models"
	"github.com/lolopinto/ent/internal/test_schema/models/address/action"
	action1 "github.com/lolopinto/ent/internal/test_schema/models/contact/action"
	action2 "github.com/lolopinto/ent/internal/test_schema/models/event/action"
	action3 "github.com/lolopinto/ent/internal/test_schema/models/user/action"
)

type Resolver struct{}

func (r *Resolver) Contact() ContactResolver {
	return &contactResolver{r}
}
func (r *Resolver) ContactEmail() ContactEmailResolver {
	return &contactEmailResolver{r}
}
func (r *Resolver) Event() EventResolver {
	return &eventResolver{r}
}
func (r *Resolver) Mutation() MutationResolver {
	return &mutationResolver{r}
}
func (r *Resolver) Query() QueryResolver {
	return &queryResolver{r}
}
func (r *Resolver) User() UserResolver {
	return &userResolver{r}
}

type contactResolver struct{ *Resolver }

func (r *contactResolver) AllowList(ctx context.Context, obj *models.Contact) ([]*models.User, error) {
	return obj.LoadAllowList()
}

func (r *contactResolver) ContactEmails(ctx context.Context, obj *models.Contact) ([]*models.ContactEmail, error) {
	return obj.LoadContactEmails()
}

func (r *contactResolver) User(ctx context.Context, obj *models.Contact) (*models.User, error) {
	return obj.LoadUser()
}

type contactEmailResolver struct{ *Resolver }

func (r *contactEmailResolver) Contact(ctx context.Context, obj *models.ContactEmail) (*models.Contact, error) {
	return obj.LoadContact()
}

type eventResolver struct{ *Resolver }

func (r *eventResolver) Attending(ctx context.Context, obj *models.Event) ([]*models.User, error) {
	return obj.LoadAttending()
}

func (r *eventResolver) Creator(ctx context.Context, obj *models.Event) (*models.User, error) {
	return obj.LoadCreator()
}

func (r *eventResolver) Declined(ctx context.Context, obj *models.Event) ([]*models.User, error) {
	return obj.LoadDeclined()
}

func (r *eventResolver) Hosts(ctx context.Context, obj *models.Event) ([]*models.User, error) {
	return obj.LoadHosts()
}

func (r *eventResolver) Invited(ctx context.Context, obj *models.Event) ([]*models.User, error) {
	return obj.LoadInvited()
}

func (r *eventResolver) User(ctx context.Context, obj *models.Event) (*models.User, error) {
	return obj.LoadUser()
}

func (r *eventResolver) ViewerRsvpStatus(ctx context.Context, obj *models.Event) (*EventRsvpStatus, error) {
	enum, err := obj.ViewerRsvpStatusForGQL()
	if err != nil {
		return nil, err
	}
	// cast to enum that graphql resolve would have generated
	cast := EventRsvpStatus(*enum)
	return &cast, err
}

type mutationResolver struct{ *Resolver }

func (r *mutationResolver) AddressCreate(ctx context.Context, input AddressCreateInput) (*AddressCreateResponse, error) {
	node, err := action.CreateAddressFromContext(ctx).
		SetCity(input.City).
		SetCountry(input.Country).
		SetResidentNames(input.ResidentNames).
		SetState(input.State).
		SetStreetAddress(input.StreetAddress).
		SetZip(input.Zip).
		Save()

	if err != nil {
		return nil, err
	}

	return &AddressCreateResponse{
		Address: node,
	}, nil
}

func (r *mutationResolver) AddressDelete(ctx context.Context, input AddressDeleteInput) (*AddressDeleteResponse, error) {
	existingNode, err := models.LoadAddressFromContext(ctx, input.AddressID)
	if err != nil {
		return nil, err
	}

	err = action.DeleteAddressFromContext(ctx, existingNode).
		Save()

	if err != nil {
		return nil, err
	}

	return &AddressDeleteResponse{
		DeletedAddressID: &existingNode.ID,
	}, nil
}

func (r *mutationResolver) AddressEdit(ctx context.Context, input AddressEditInput) (*AddressEditResponse, error) {
	existingNode, err := models.LoadAddressFromContext(ctx, input.AddressID)
	if err != nil {
		return nil, err
	}

	node, err := action.EditAddressFromContext(ctx, existingNode).
		SetCity(input.City).
		SetCountry(input.Country).
		SetResidentNames(input.ResidentNames).
		SetState(input.State).
		SetStreetAddress(input.StreetAddress).
		SetZip(input.Zip).
		Save()

	if err != nil {
		return nil, err
	}

	return &AddressEditResponse{
		Address: node,
	}, nil
}

func (r *mutationResolver) AdminBlock(ctx context.Context, input AdminBlockInput) (*AdminBlockResponse, error) {
	blockerResult, blockeeResult := <-models.GenLoadUserFromContext(ctx, input.BlockerID), <-models.GenLoadUserFromContext(ctx, input.BlockeeID)
	if err := ent.CoalesceErr(blockerResult, blockeeResult); err != nil {
		return nil, err
	}

	err := block.AdminBlock(ctx, blockerResult.User, blockeeResult.User)
	if err != nil {
		return nil, err
	}

	return &AdminBlockResponse{
		Success: cast.ConvertToNullableBool(true),
	}, nil
}

func (r *mutationResolver) AuthCheckAvailableEmailAddress(ctx context.Context, input AuthCheckAvailableEmailAddressInput) (*AuthCheckAvailableEmailAddressResponse, error) {
	available, err := CheckCanSigninWithEmailAddress(ctx, input.EmailAddress)
	if err != nil {
		return nil, err
	}

	return &AuthCheckAvailableEmailAddressResponse{
		Available: available,
	}, nil
}

func (r *mutationResolver) AuthCheckAvailablePhoneNumber(ctx context.Context, input AuthCheckAvailablePhoneNumberInput) (*AuthCheckAvailablePhoneNumberResponse, error) {
	available, err := CheckCanSigninWithPhoneNumber(ctx, input.PhoneNumber)
	if err != nil {
		return nil, err
	}

	return &AuthCheckAvailablePhoneNumberResponse{
		Available: available,
	}, nil
}

func (r *mutationResolver) AuthEmailPassword(ctx context.Context, input AuthEmailPasswordInput) (*AuthEmailPasswordResponse, error) {
	token, err := AuthEmailPassword(ctx, input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	return &AuthEmailPasswordResponse{
		Token: token,
	}, nil
}

func (r *mutationResolver) AuthEmailToken(ctx context.Context, input AuthEmailTokenInput) (*AuthEmailTokenResponse, error) {
	token, err := AuthEmailExtendToken(ctx, input.Token)
	if err != nil {
		return nil, err
	}

	return &AuthEmailTokenResponse{
		Token: token,
	}, nil
}

func (r *mutationResolver) AuthPhoneNumber(ctx context.Context, input AuthPhoneNumberInput) (*AuthPhoneNumberResponse, error) {
	token, err := AuthPhoneNumber(ctx, input.PhoneNumber, input.Pin)
	if err != nil {
		return nil, err
	}

	return &AuthPhoneNumberResponse{
		Token: token,
	}, nil
}

func (r *mutationResolver) AuthPhoneToken(ctx context.Context, input AuthPhoneTokenInput) (*AuthPhoneTokenResponse, error) {
	token, err := AuthPhoneExtendToken(ctx, input.Token)
	if err != nil {
		return nil, err
	}

	return &AuthPhoneTokenResponse{
		Token: token,
	}, nil
}

func (r *mutationResolver) AuthSendSms(ctx context.Context, input AuthSendSMSInput) (*AuthSendSMSResponse, error) {
	pin, err := SendSMS(ctx, input.PhoneNumber)
	if err != nil {
		return nil, err
	}

	return &AuthSendSMSResponse{
		Pin: pin,
	}, nil
}

func (r *mutationResolver) AuthSignout(ctx context.Context) (*AuthSignoutResponse, error) {
	AuthPhoneLogout(ctx)

	return &AuthSignoutResponse{
		Success: cast.ConvertToNullableBool(true),
	}, nil
}

func (r *mutationResolver) AuthSignoutEmail(ctx context.Context) (*AuthSignoutEmailResponse, error) {
	AuthEmailLogout(ctx)

	return &AuthSignoutEmailResponse{
		Success: cast.ConvertToNullableBool(true),
	}, nil
}

func (r *mutationResolver) AuthUser(ctx context.Context, input AuthUserInput) (*AuthUserResponse, error) {
	user, token, err := auth.AuthMutation(ctx, input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	return &AuthUserResponse{
		User:  user,
		Token: token,
	}, nil
}

func (r *mutationResolver) AuthValidCredentials(ctx context.Context, input AuthValidCredentialsInput) (*AuthValidCredentialsResponse, error) {
	available, err := ValidAuthCredentials(ctx, input.PhoneNumber, input.Pin)
	if err != nil {
		return nil, err
	}

	return &AuthValidCredentialsResponse{
		Available: available,
	}, nil
}

func (r *mutationResolver) ContactCreate(ctx context.Context, input ContactCreateInput) (*ContactCreateResponse, error) {
	node, err := action1.CreateContactFromContext(ctx).
		SetEmailAddress(input.EmailAddress).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetUserID(input.UserID).
		SetNilableFavorite(input.Favorite).
		SetNilableNumberOfCalls(input.NumberOfCalls).
		SetNilablePi(input.Pi).
		Save()

	if err != nil {
		return nil, err
	}

	return &ContactCreateResponse{
		Contact: node,
	}, nil
}

func (r *mutationResolver) EventCreate(ctx context.Context, input EventCreateInput) (*EventCreateResponse, error) {
	node, err := action2.CreateEventFromContext(ctx).
		SetNilableEndTime(input.EndTime).
		SetLocation(input.Location).
		SetName(input.Name).
		SetStartTime(input.StartTime).
		SetUserID(input.UserID).
		Save()

	if err != nil {
		return nil, err
	}

	return &EventCreateResponse{
		Event: node,
	}, nil
}

func (r *mutationResolver) EventRsvpStatusEdit(ctx context.Context, input EventRsvpStatusEditInput) (*EventRsvpStatusEditResponse, error) {
	existingNode, err := models.LoadEventFromContext(ctx, input.EventID)
	if err != nil {
		return nil, err
	}

	node, err := action2.EditEventRsvpStatusFromContext(ctx, existingNode).
		AddRsvpStatus(input.RsvpStatus).
		AddUserID(input.UserID).
		Save()

	if err != nil {
		return nil, err
	}

	return &EventRsvpStatusEditResponse{
		Event: node,
	}, nil
}

func (r *mutationResolver) LogEvent(ctx context.Context, input LogEventInput) (*LogEventResponse, error) {
	log.Log(ctx, input.Event)

	return &LogEventResponse{
		Success: cast.ConvertToNullableBool(true),
	}, nil
}

func (r *mutationResolver) LogEvent2(ctx context.Context, input LogEvent2Input) (*LogEvent2Response, error) {
	err := log.Log2(ctx, input.Event)
	if err != nil {
		return nil, err
	}

	return &LogEvent2Response{
		Success: cast.ConvertToNullableBool(true),
	}, nil
}

func (r *mutationResolver) UserAddFamilyMember(ctx context.Context, input UserAddFamilyMemberInput) (*UserAddFamilyMemberResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	node, err := action3.AddFamilyMemberFromContext(ctx, existingNode).
		AddFamilyMemberID(input.FamilyMemberID).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserAddFamilyMemberResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) UserAddFriend(ctx context.Context, input UserAddFriendInput) (*UserAddFriendResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	node, err := action3.AddFriendFromContext(ctx, existingNode).
		AddFriendID(input.FriendID).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserAddFriendResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) UserCreate(ctx context.Context, input UserCreateInput) (*UserCreateResponse, error) {
	node, err := action3.CreateUserFromContext(ctx).
		SetEmailAddress(input.EmailAddress).
		SetPassword(input.Password).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetNilableBio(input.Bio).
		SetNilablePhoneNumber(input.PhoneNumber).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserCreateResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) UserDelete(ctx context.Context, input UserDeleteInput) (*UserDeleteResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	err = action3.DeleteUserFromContext(ctx, existingNode).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserDeleteResponse{
		DeletedUserID: &existingNode.ID,
	}, nil
}

func (r *mutationResolver) UserEdit(ctx context.Context, input UserEditInput) (*UserEditResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	node, err := action3.EditUserFromContext(ctx, existingNode).
		SetFirstName(input.FirstName).
		SetLastName(input.LastName).
		SetNilableBio(input.Bio).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserEditResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) UserRemoveFamilyMember(ctx context.Context, input UserRemoveFamilyMemberInput) (*UserRemoveFamilyMemberResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	node, err := action3.RemoveFamilyMemberFromContext(ctx, existingNode).
		RemoveFamilyMemberID(input.FamilyMemberID).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserRemoveFamilyMemberResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) UserRemoveFriend(ctx context.Context, input UserRemoveFriendInput) (*UserRemoveFriendResponse, error) {
	existingNode, err := models.LoadUserFromContext(ctx, input.UserID)
	if err != nil {
		return nil, err
	}

	node, err := action3.RemoveFriendFromContext(ctx, existingNode).
		RemoveFriendID(input.FriendID).
		Save()

	if err != nil {
		return nil, err
	}

	return &UserRemoveFriendResponse{
		User: node,
	}, nil
}

func (r *mutationResolver) ViewerBlock(ctx context.Context, input ViewerBlockInput) (*ViewerBlockResponse, error) {
	blockee, blockeeErr := models.LoadUserFromContext(ctx, input.BlockeeID)
	if blockeeErr != nil {
		return nil, blockeeErr
	}

	viewer, err := block.Block(ctx, blockee)
	if err != nil {
		return nil, err
	}

	return &ViewerBlockResponse{
		Viewer: viewer,
	}, nil
}

func (r *mutationResolver) ViewerBlockMultiple(ctx context.Context, input ViewerBlockMultipleInput) (*ViewerBlockMultipleResponse, error) {
	v, ctxErr := viewer.ForContext(ctx)
	if ctxErr != nil {
		return nil, ctxErr
	}
	result := <-models.GenLoadUsers(v, input.UserIDs...)
	if err := ent.CoalesceErr(result); err != nil {
		return nil, err
	}

	viewer, err := block.BlockMultiple(ctx, result.Users)
	if err != nil {
		return nil, err
	}

	return &ViewerBlockMultipleResponse{
		Viewer: viewer,
	}, nil
}

func (r *mutationResolver) ViewerBlockMultipleIDs(ctx context.Context, input ViewerBlockMultipleIDsInput) (*ViewerBlockMultipleIDsResponse, error) {
	viewer, err := block.BlockMultipleIDs(ctx, input.UserIDs)
	if err != nil {
		return nil, err
	}

	return &ViewerBlockMultipleIDsResponse{
		Viewer: viewer,
	}, nil
}

func (r *mutationResolver) ViewerBlockParam(ctx context.Context, userID string) (*ViewerBlockParamResponse, error) {
	user, userErr := models.LoadUserFromContext(ctx, userID)
	if userErr != nil {
		return nil, userErr
	}

	viewer, err := block.BlockParam(ctx, user)
	if err != nil {
		return nil, err
	}

	return &ViewerBlockParamResponse{
		Viewer: viewer,
	}, nil
}

type queryResolver struct{ *Resolver }

func (r *queryResolver) Address(ctx context.Context, id string) (*models.Address, error) {
	return models.LoadAddressFromContext(ctx, id)
}

func (r *queryResolver) AuthUser(ctx context.Context, email string, password string) (*AuthUserResult, error) {
	user, token, err := auth.Authenticate(ctx, email, password)
	if err != nil {
		return nil, err
	}

	return &AuthUserResult{
		User:  user,
		Token: token,
	}, nil
}

func (r *queryResolver) Contact(ctx context.Context, id string) (*models.Contact, error) {
	return models.LoadContactFromContext(ctx, id)
}

func (r *queryResolver) ContactEmail(ctx context.Context, id string) (*models.ContactEmail, error) {
	return models.LoadContactEmailFromContext(ctx, id)
}

func (r *queryResolver) Event(ctx context.Context, id string) (*models.Event, error) {
	return models.LoadEventFromContext(ctx, id)
}

func (r *queryResolver) ServerTime(ctx context.Context) (*time.Time, error) {
	ret := serverTime()
	return &ret, nil
}

func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	return models.LoadUserFromContext(ctx, id)
}

func (r *queryResolver) Viewer(ctx context.Context) (*viewer1.Viewer, error) {
	return viewer1.ViewerResolver(ctx)
}

type userResolver struct{ *Resolver }

func (r *userResolver) Contacts(ctx context.Context, obj *models.User) ([]*models.Contact, error) {
	return obj.LoadContacts()
}

func (r *userResolver) DeclinedEvents(ctx context.Context, obj *models.User) ([]*models.Event, error) {
	return obj.LoadDeclinedEvents()
}

func (r *userResolver) Events(ctx context.Context, obj *models.User) ([]*models.Event, error) {
	return obj.LoadEvents()
}

func (r *userResolver) EventsAttending(ctx context.Context, obj *models.User) ([]*models.Event, error) {
	return obj.LoadEventsAttending()
}

func (r *userResolver) FamilyMembers(ctx context.Context, obj *models.User) ([]*models.User, error) {
	return obj.LoadFamilyMembers()
}

func (r *userResolver) Friends(ctx context.Context, obj *models.User) ([]*models.User, error) {
	return obj.LoadFriends()
}

func (r *userResolver) InvitedEvents(ctx context.Context, obj *models.User) ([]*models.Event, error) {
	return obj.LoadInvitedEvents()
}
