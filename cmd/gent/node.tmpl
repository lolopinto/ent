package models

import (
  "github.com/lolopinto/jarvis/ent"
  "github.com/lolopinto/jarvis/ent/viewer"
  "github.com/lolopinto/jarvis/models/configs"
)

const (
  // {{.NodeType}} uniquely identifies this object as an owner of something else
  {{.NodeType}} ent.NodeType = "{{.NodeInstance}}"
)

// {{.Node}} represents the `{{.Node}}` model 
type {{.Node}} struct {
  ent.Node
  {{with .Fields -}}
    {{ range . -}} 
      {{.FieldName}} {{.FieldType}} {{.FieldTag}}
    {{end -}}
  {{end -}}
}


// {{.NodeResult}} stores the result of loading a {{.Node}}. It's a tuple type which has 2 fields: 
// a {{.Node}} and an error
type {{.NodeResult}} struct {
  {{.Node}} {{.Node}}
  Error error
}

// {{.NodesResult}} stores the result of loading a slice of {{.Node}}s. It's a tuple type which has 2 fields: 
// a {{.NodesSlice}} and an error
type {{.NodesResult}} struct {
  {{.Nodes}} {{.NodesSlice}}
  Error error
}

// IsNode is needed by gqlgen to indicate that this implements the Node interface in GraphQL
func ({{.NodeInstance}} {{.Node}}) isNode() {}

// GetType returns the NodeType of this entity. In this case: ContactType
func ({{.NodeInstance}} *{{.Node}}) GetType() ent.NodeType {
	return {{.NodeType}}
}

// Load{{.Node}} loads the given {{.Node}} given the id
func Load{{.Node}}Privacy(viewer viewer.ViewerContext, id string) ({{.Node}}, error) {
  var {{.NodeInstance}} {{.Node}}
  err := ent.LoadPrivacyAwareNode(viewer, id, &{{.NodeInstance}}, {{.EntConfig}})
  return {{.NodeInstance}}, err
}

// GenLoad{{.Node}} loads the given {{.Node}} given the id
func GenLoad{{.Node}}Privacy(viewer viewer.ViewerContext, id string, chan{{.NodeResult}} chan<- {{.NodeResult}}) {
  var {{.NodeInstance}} {{.Node}}
  chanErr := make(chan error)
  go ent.GenLoadPrivacyAwareNode(viewer, id, &{{.NodeInstance}}, {{.EntConfig}}, chanErr)
  err := <-chanErr
  chan{{.NodeResult}} <- {{.NodeResult}}{
    {{.Node}}: {{.NodeInstance}},
    Error: err,
  }
}

{{/* todo: deal with importing right packages above and circular dependency all that jazz*/}}
{{/* this should be user/factory. user/config? user/query user/privacy etc. */}}
{{with . -}}
  {{$currentNodeInstance := .NodeInstance}}
  {{$currentNode := .Node}}
  {{$currentPackageName := .PackageName}}
  {{range .Edges -}}
    {{$edgeName := .EdgeName -}}
    {{$edgeInfo := .}}
    {{with .NodeTemplate -}}
      {{if $edgeInfo.FieldEdge -}}
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(viewer viewer.ViewerContext, chan{{.NodeResult}} chan<- {{.NodeResult}}) {
          go GenLoad{{.Node}}Privacy(viewer, {{$currentNodeInstance}}.{{$edgeInfo.FieldEdge.FieldName}}, chan{{.NodeResult}} )
        }
      {{end}}
      {{if $edgeInfo.ForeignKeyEdge -}}
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(viewer viewer.ViewerContext, chan{{.NodesResult}} chan<- {{.NodesResult}}) {
          var {{.NodeInstance}}s {{.NodesSlice}}
          chanErr := make(chan error)
          go ent.GenLoadPrivacyAwareNodes(viewer, {{$currentNodeInstance}}.ID, &{{.NodeInstance}}s, "{{$currentPackageName}}_id", {{.EntConfig}}, chanErr)
          err := <-chanErr
          chan{{.NodesResult}} <- {{.NodesResult}}{
            {{.Nodes}}: {{.NodeInstance}}s,
            Error: err,
          }
        }
      {{end}}
      {{if $edgeInfo.AssociationEdge -}}
        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}Edges(chanEdgesResult chan<- ent.EdgesResult) {
          go ent.GenLoadEdgesByTypeResult({{$currentNodeInstance}}.ID, {{$edgeInfo.AssociationEdge.EdgeConst}}, chanEdgesResult)
        }

        func ({{$currentNodeInstance}} *{{$currentNode}}) Gen{{$edgeName}}(viewer viewer.ViewerContext, chan{{.NodesResult}} chan<- {{.NodesResult}}) {
          var {{.NodeInstance}}s {{.NodesSlice}}
          chanErr := make(chan error)
          go ent.GenLoadPrivacyAwareNodesByType(viewer, {{$currentNodeInstance}}.ID, {{$edgeInfo.AssociationEdge.EdgeConst}}, &{{.NodeInstance}}s, chanErr)
          err := <-chanErr
          chan{{.NodesResult}} <- {{.NodesResult}}{
            {{.Nodes}}: {{.NodeInstance}}s,
            Error: err,
          }
        }

      {{end}}
     
    {{end}}
  {{end}}
{{end}}

// Add this to each entity to confirm it implements the interface
var _ ent.Entity = (*{{.Node}})(nil)
