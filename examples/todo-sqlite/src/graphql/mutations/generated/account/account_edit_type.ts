// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { Account } from "src/ent/";
import EditAccountAction, {
  AccountEditInput,
} from "src/ent/account/actions/edit_account_action";
import { AccountType } from "src/graphql/resolvers/";

interface customAccountEditInput extends AccountEditInput {
  accountID: string;
}

interface AccountEditPayload {
  account: Account;
}

export const AccountEditInputType = new GraphQLInputObjectType({
  name: "AccountEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    accountID: {
      type: GraphQLNonNull(GraphQLID),
    },
    name: {
      type: GraphQLString,
    },
    phoneNumber: {
      type: GraphQLString,
    },
  }),
});

export const AccountEditPayloadType = new GraphQLObjectType({
  name: "AccountEditPayload",
  fields: (): GraphQLFieldConfigMap<AccountEditPayload, RequestContext> => ({
    account: {
      type: GraphQLNonNull(AccountType),
    },
  }),
});

export const AccountEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customAccountEditInput }
> = {
  type: GraphQLNonNull(AccountEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(AccountEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<AccountEditPayload> => {
    const account = await EditAccountAction.saveXFromID(
      context.getViewer(),
      input.accountID,
      {
        name: input.name,
        phoneNumber: input.phoneNumber,
      },
    );
    return { account: account };
  },
};
