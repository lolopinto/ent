// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { Tag } from "src/ent/";
import CreateTagAction, {
  TagCreateInput,
} from "src/ent/tag/actions/create_tag_action";
import { TagType } from "src/graphql/resolvers/";

interface CreateTagPayload {
  tag: Tag;
}

export const CreateTagInputType = new GraphQLInputObjectType({
  name: "CreateTagInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    displayName: {
      type: GraphQLNonNull(GraphQLString),
    },
    ownerID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const CreateTagPayloadType = new GraphQLObjectType({
  name: "CreateTagPayload",
  fields: (): GraphQLFieldConfigMap<CreateTagPayload, RequestContext> => ({
    tag: {
      type: GraphQLNonNull(TagType),
    },
  }),
});

export const CreateTagType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: TagCreateInput }
> = {
  type: GraphQLNonNull(CreateTagPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(CreateTagInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<CreateTagPayload> => {
    const tag = await CreateTagAction.create(context.getViewer(), {
      displayName: input.displayName,
      ownerID: input.ownerID,
    }).saveX();
    return { tag: tag };
  },
};
