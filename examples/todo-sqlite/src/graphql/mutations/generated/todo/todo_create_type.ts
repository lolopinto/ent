// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { Todo } from "src/ent/";
import CreateTodoAction, {
  TodoCreateInput,
} from "src/ent/todo/actions/create_todo_action";
import { TodoType } from "src/graphql/resolvers/";

interface customTodoCreateInput extends TodoCreateInput {
  creatorID: string;
}

interface TodoCreatePayload {
  todo: Todo;
}

export const TodoCreateInputType = new GraphQLInputObjectType({
  name: "TodoCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    text: {
      type: GraphQLNonNull(GraphQLString),
    },
    creatorID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const TodoCreatePayloadType = new GraphQLObjectType({
  name: "TodoCreatePayload",
  fields: (): GraphQLFieldConfigMap<TodoCreatePayload, RequestContext> => ({
    todo: {
      type: GraphQLNonNull(TodoType),
    },
  }),
});

export const TodoCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customTodoCreateInput }
> = {
  type: GraphQLNonNull(TodoCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(TodoCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<TodoCreatePayload> => {
    const todo = await CreateTodoAction.create(context.getViewer(), {
      text: input.text,
      creatorID: input.creatorID,
    }).saveX();
    return { todo: todo };
  },
};
