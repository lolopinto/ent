// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { Todo } from "src/ent/";
import RenameTodoStatusAction, {
  RenameTodoInput,
} from "src/ent/todo/actions/rename_todo_status_action";
import { TodoType } from "src/graphql/resolvers/";

interface customTodoRenameInput extends RenameTodoInput {
  todoID: string;
}

interface TodoRenamePayload {
  todo: Todo;
}

export const TodoRenameInputType = new GraphQLInputObjectType({
  name: "TodoRenameInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    todoID: {
      type: GraphQLNonNull(GraphQLID),
    },
    text: {
      type: GraphQLString,
    },
  }),
});

export const TodoRenamePayloadType = new GraphQLObjectType({
  name: "TodoRenamePayload",
  fields: (): GraphQLFieldConfigMap<TodoRenamePayload, RequestContext> => ({
    todo: {
      type: GraphQLNonNull(TodoType),
    },
  }),
});

export const TodoRenameType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customTodoRenameInput }
> = {
  type: GraphQLNonNull(TodoRenamePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(TodoRenameInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<TodoRenamePayload> => {
    const todo = await RenameTodoStatusAction.saveXFromID(
      context.getViewer(),
      input.todoID,
      {
        text: input.text,
      },
    );
    return { todo: todo };
  },
};
