// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/snowtop-ts";
import { mustDecodeIDFromGQLID } from "@snowtop/snowtop-ts/graphql";
import { Todo } from "src/ent/";
import TodoRemoveTagAction from "src/ent/todo/actions/todo_remove_tag_action";
import { TodoType } from "src/graphql/resolvers/";

interface customTodoRemoveTagInput {
  todoID: string;
  tagID: string;
}

interface TodoRemoveTagPayload {
  todo: Todo;
}

export const TodoRemoveTagInputType = new GraphQLInputObjectType({
  name: "TodoRemoveTagInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    todoID: {
      type: GraphQLNonNull(GraphQLID),
    },
    tagID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const TodoRemoveTagPayloadType = new GraphQLObjectType({
  name: "TodoRemoveTagPayload",
  fields: (): GraphQLFieldConfigMap<TodoRemoveTagPayload, RequestContext> => ({
    todo: {
      type: GraphQLNonNull(TodoType),
    },
  }),
});

export const TodoRemoveTagType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customTodoRemoveTagInput }
> = {
  type: GraphQLNonNull(TodoRemoveTagPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(TodoRemoveTagInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<TodoRemoveTagPayload> => {
    let todo = await TodoRemoveTagAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.todoID),
      mustDecodeIDFromGQLID(input.tagID),
    );
    return { todo: todo };
  },
};
