# Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

"""node interface"""
interface Node {
  id: ID!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum AccountTodoStatus {
  OPEN_TODOS_DUP
  CLOSED_TODOS_DUP
  UNKNOWN
}

type AccountCanViewerSee {
  phone_number: Boolean!
  account_prefs_3: Boolean!
  credits: Boolean!
}

type AccountPrefs {
  finished_nux: Boolean!
  enable_notifs: Boolean!
  preferred_language: String!
}

type Account implements Node {
  id: ID!
  name: String!
  phone_number: String
  account_prefs: AccountPrefs
  account_prefs_3: AccountPrefs
  account_prefs_list: [AccountPrefs!]
  credits: Int
  closed_todos_dup(first: Int, after: String, last: Int, before: String): AccountToClosedTodosDupConnection!
  created_workspaces(first: Int, after: String, last: Int, before: String): AccountToCreatedWorkspacesConnection!
  open_todos_dup(first: Int, after: String, last: Int, before: String): AccountToOpenTodosDupConnection!
  scoped_todos(first: Int, after: String, last: Int, before: String): AccountToScopedTodosConnection!
  workspaces(first: Int, after: String, last: Int, before: String): AccountToWorkspacesConnection!
  tags(first: Int, after: String, last: Int, before: String): AccountToTagsConnection!
  todos(first: Int, after: String, last: Int, before: String): AccountToTodosConnection!
  todos_assigned(first: Int, after: String, last: Int, before: String): AssigneeToTodosConnection!
  todo_status_for(id: ID!): AccountTodoStatus
  can_viewer_see_info: AccountCanViewerSee!
  open_todos_plural: [Todo!]!
  open_todos(first: Int, after: String, last: Int, before: String): AccountToOpenTodosConnection!
}

type Tag implements Node {
  owner: Account
  related_tags: [Tag!]
  id: ID!
  display_name: String!
  canonical_name: String!
  todos(first: Int, after: String, last: Int, before: String): TagToTodosConnection!
}

type Todo implements Node {
  assignee: Account
  creator: Account
  scope: Node
  id: ID!
  text: String!
  completed: Boolean!
  completed_date: Time
  bounty: Int
  tags(first: Int, after: String, last: Int, before: String): TodoToTagsConnection!
  todo_scope(first: Int, after: String, last: Int, before: String): TodoToTodoScopeConnection!
}

type Workspace implements Node {
  creator: Account
  viewer_creator: Account
  id: ID!
  name: String!
  slug: String!
  members(first: Int, after: String, last: Int, before: String): WorkspaceToMembersConnection!
  scoped_todos(first: Int, after: String, last: Int, before: String): WorkspaceToScopedTodosConnection!
}

type AccountToClosedTodosDupEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToClosedTodosDupConnection implements Connection {
  edges: [AccountToClosedTodosDupEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToCreatedWorkspacesEdge implements Edge {
  node: Workspace!
  cursor: String!
}

type AccountToCreatedWorkspacesConnection implements Connection {
  edges: [AccountToCreatedWorkspacesEdge!]!
  nodes: [Workspace!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToOpenTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToOpenTodosConnection implements Connection {
  edges: [AccountToOpenTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToOpenTodosDupEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToOpenTodosDupConnection implements Connection {
  edges: [AccountToOpenTodosDupEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToScopedTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToScopedTodosConnection implements Connection {
  edges: [AccountToScopedTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToTagsEdge implements Edge {
  node: Tag!
  cursor: String!
}

type AccountToTagsConnection implements Connection {
  edges: [AccountToTagsEdge!]!
  nodes: [Tag!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToTodosConnection implements Connection {
  edges: [AccountToTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToWorkspacesEdge implements Edge {
  node: Workspace!
  cursor: String!
}

type AccountToWorkspacesConnection implements Connection {
  edges: [AccountToWorkspacesEdge!]!
  nodes: [Workspace!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AssigneeToTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AssigneeToTodosConnection implements Connection {
  edges: [AssigneeToTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToClosedTodosLastDayEdge implements Edge {
  node: Todo!
  cursor: String!
}

type RootToClosedTodosLastDayConnection implements Connection {
  edges: [RootToClosedTodosLastDayEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToOpenTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type RootToOpenTodosConnection implements Connection {
  edges: [RootToOpenTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type TagToTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type TagToTodosConnection implements Connection {
  edges: [TagToTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type TodoToTagsEdge implements Edge {
  node: Tag!
  cursor: String!
}

type TodoToTagsConnection implements Connection {
  edges: [TodoToTagsEdge!]!
  nodes: [Tag!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type TodoToTodoScopeEdge implements Edge {
  node: Node!
  cursor: String!
}

type TodoToTodoScopeConnection implements Connection {
  edges: [TodoToTodoScopeEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type WorkspaceToMembersEdge implements Edge {
  node: Account!
  cursor: String!
}

type WorkspaceToMembersConnection implements Connection {
  edges: [WorkspaceToMembersEdge!]!
  nodes: [Account!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type WorkspaceToScopedTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type WorkspaceToScopedTodosConnection implements Connection {
  edges: [WorkspaceToScopedTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

input AccountPrefsInput {
  finished_nux: Boolean!
  enable_notifs: Boolean!
  preferred_language: String!
}

enum AccountTodoStatusInput {
  OPEN_TODOS_DUP
  CLOSED_TODOS_DUP
  UNKNOWN
}

input AccountTransferCreditsInput {
  """id of Account"""
  id: ID!
  to: ID!
  amount: Int!
}

type AccountTransferCreditsPayload {
  account: Account!
}

input AccountUpdateBalanceInput {
  """id of Account"""
  id: ID!
  credits: Int!
}

type AccountUpdateBalancePayload {
  account: Account!
}

input AddTodoTagInput {
  """id of Todo"""
  id: ID!
  tag_id: ID!
}

type AddTodoTagPayload {
  todo: Todo!
}

input ChangeTodoBountyInput {
  """id of Todo"""
  id: ID!
  bounty: Int
}

type ChangeTodoBountyPayload {
  todo: Todo!
}

input ChangeTodoStatusInput {
  """id of Todo"""
  id: ID!
  completed: Boolean
}

type ChangeTodoStatusPayload {
  todo: Todo!
}

input CreateAccountInput {
  name: String!
  phone_number: String!
  account_prefs: AccountPrefsInput
  account_prefs_3: AccountPrefsInput
  account_prefs_list: [AccountPrefsInput!]
  credits: Int
}

type CreateAccountPayload {
  account: Account!
}

input CreateTagInput {
  display_name: String!
  owner_id: ID!
  related_tag_ids: [ID!]
  canonical_name: String
}

type CreateTagPayload {
  tag: Tag!
}

input CreateTodoInput {
  text: String!
  creator_id: ID!
  assignee_id: ID!
  scope_id: ID!
  scope_type: String!
  bounty: Int
}

type CreateTodoPayload {
  todo: Todo!
}

input CreateWorkspaceInput {
  name: String!
  slug: String!
}

type CreateWorkspacePayload {
  workspace: Workspace!
}

input DeleteAccountInput {
  """id of Account"""
  id: ID!
}

type DeleteAccountPayload {
  deleted_account_id: ID
}

input DeleteTodoInput {
  """id of Todo"""
  id: ID!
}

type DeleteTodoPayload {
  deleted_todo_id: ID
}

input DeleteWorkspaceInput {
  """id of Workspace"""
  id: ID!
}

type DeleteWorkspacePayload {
  deleted_workspace_id: ID
}

input EditAccountInput {
  """id of Account"""
  id: ID!
  name: String
  phone_number: String
  account_prefs: AccountPrefsInput
  account_prefs_3: AccountPrefsInput
  account_prefs_list: [AccountPrefsInput!]
}

type EditAccountPayload {
  account: Account!
}

input EditWorkspaceInput {
  """id of Workspace"""
  id: ID!
  name: String
  slug: String
}

type EditWorkspacePayload {
  workspace: Workspace!
}

input RemoveTodoTagInput {
  """id of Todo"""
  id: ID!
  tag_id: ID!
}

type RemoveTodoTagPayload {
  todo: Todo!
}

input RenameTodoInput {
  """id of Todo"""
  id: ID!
  text: String
  reason_for_change: String
}

type RenameTodoPayload {
  todo: Todo!
}

input TodoStatusAccountEditInput {
  """id of Account"""
  id: ID!
  todo_status: AccountTodoStatusInput!
  todo_id: ID!
}

type TodoStatusAccountEditPayload {
  account: Account!
}

type Query {
  account(id: ID!): Account
  closed_todos_last_day(first: Int, after: String, last: Int, before: String): RootToClosedTodosLastDayConnection!
  open_todos(id: ID!, first: Int, after: String, last: Int, before: String): RootToOpenTodosConnection!
  open_todos_plural(id: ID!): [Todo!]!
  tag(id: ID!): Tag
  todo(id: ID!): Todo
  workspace(id: ID!): Workspace
}

type Mutation {
  accountTransferCredits(input: AccountTransferCreditsInput!): AccountTransferCreditsPayload!
  accountUpdateBalance(input: AccountUpdateBalanceInput!): AccountUpdateBalancePayload!
  addTodoTag(input: AddTodoTagInput!): AddTodoTagPayload!
  changeTodoBounty(input: ChangeTodoBountyInput!): ChangeTodoBountyPayload!
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload!
  createAccount(input: CreateAccountInput!): CreateAccountPayload!
  createTag(input: CreateTagInput!): CreateTagPayload!
  createTodo(input: CreateTodoInput!): CreateTodoPayload!
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload!
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload!
  deleteTodo(input: DeleteTodoInput!): DeleteTodoPayload!
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspacePayload!
  editAccount(input: EditAccountInput!): EditAccountPayload!
  editWorkspace(input: EditWorkspaceInput!): EditWorkspacePayload!
  markAllTodosAs(accountID: ID!, completed: Boolean!): Account!
  removeCompletedTodos(accountID: ID!): Account!
  removeTodoTag(input: RemoveTodoTagInput!): RemoveTodoTagPayload!
  renameTodo(input: RenameTodoInput!): RenameTodoPayload!
  todoStatusAccountEdit(input: TodoStatusAccountEditInput!): TodoStatusAccountEditPayload!
}

"""Time scalar type"""
scalar Time

