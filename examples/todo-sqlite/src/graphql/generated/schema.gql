# Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

"""node interface"""
interface Node {
  id: ID!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum AccountTodoStatus {
  OPEN_TODOS_DUP
  CLOSED_TODOS_DUP
}

type AccountPrefs {
  finished_nux: Boolean!
  enable_notifs: Boolean!
  preferred_language: String!
}

type Account implements Node {
  id: ID!
  name: String!
  phone_number: String
  account_prefs: AccountPrefs
  closed_todos_dup(first: Int, after: String, last: Int, before: String): AccountToClosedTodosDupConnection!
  open_todos_dup(first: Int, after: String, last: Int, before: String): AccountToOpenTodosDupConnection!
  tags(first: Int, after: String, last: Int, before: String): AccountToTagsConnection!
  todos(first: Int, after: String, last: Int, before: String): AccountToTodosConnection!
  todoStatusFor(id: ID!): AccountTodoStatus
  open_todos_plural: [Todo!]!
  open_todos(first: Int, after: String, last: Int, before: String): AccountToOpenTodosConnection!
}

type Tag implements Node {
  owner: Account
  related_tags: [Tag!]
  id: ID!
  display_name: String!
  canonical_name: String!
  todos(first: Int, after: String, last: Int, before: String): TagToTodosConnection!
}

type Todo implements Node {
  creator: Account
  id: ID!
  text: String!
  completed: Boolean!
  completed_date: Time
  tags(first: Int, after: String, last: Int, before: String): TodoToTagsConnection!
}

type AccountToClosedTodosDupEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToClosedTodosDupConnection implements Connection {
  edges: [AccountToClosedTodosDupEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToOpenTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToOpenTodosConnection implements Connection {
  edges: [AccountToOpenTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToOpenTodosDupEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToOpenTodosDupConnection implements Connection {
  edges: [AccountToOpenTodosDupEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToTagsEdge implements Edge {
  node: Tag!
  cursor: String!
}

type AccountToTagsConnection implements Connection {
  edges: [AccountToTagsEdge!]!
  nodes: [Tag!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AccountToTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type AccountToTodosConnection implements Connection {
  edges: [AccountToTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToClosedTodosLastDayEdge implements Edge {
  node: Todo!
  cursor: String!
}

type RootToClosedTodosLastDayConnection implements Connection {
  edges: [RootToClosedTodosLastDayEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToOpenTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type RootToOpenTodosConnection implements Connection {
  edges: [RootToOpenTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type TagToTodosEdge implements Edge {
  node: Todo!
  cursor: String!
}

type TagToTodosConnection implements Connection {
  edges: [TagToTodosEdge!]!
  nodes: [Todo!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type TodoToTagsEdge implements Edge {
  node: Tag!
  cursor: String!
}

type TodoToTagsConnection implements Connection {
  edges: [TodoToTagsEdge!]!
  nodes: [Tag!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

enum AccountTodoStatusInput {
  OPEN_TODOS_DUP
  CLOSED_TODOS_DUP
}

input AddTodoTagInput {
  """id of Todo"""
  id: ID!
  tag_id: ID!
}

type AddTodoTagPayload {
  todo: Todo!
}

input ChangeTodoStatusInput {
  """id of Todo"""
  id: ID!
  completed: Boolean
}

type ChangeTodoStatusPayload {
  todo: Todo!
}

input CreateAccountInput {
  name: String!
  phone_number: String!
  account_prefs: AccountPrefsInput
}

type CreateAccountPayload {
  account: Account!
}

input CreateTagInput {
  display_name: String!
  owner_id: ID!
  related_tag_ids: [ID!]
  canonical_name: String
}

type CreateTagPayload {
  tag: Tag!
}

input CreateTodoInput {
  text: String!
  creator_id: ID!
}

type CreateTodoPayload {
  todo: Todo!
}

input DeleteAccountInput {
  """id of Account"""
  id: ID!
}

type DeleteAccountPayload {
  deleted_account_id: ID
}

input DeleteTodoInput {
  """id of Todo"""
  id: ID!
}

type DeleteTodoPayload {
  deleted_todo_id: ID
}

input EditAccountInput {
  """id of Account"""
  id: ID!
  name: String
  phone_number: String
  account_prefs: AccountPrefsInput
}

type EditAccountPayload {
  account: Account!
}

input RemoveTodoTagInput {
  """id of Todo"""
  id: ID!
  tag_id: ID!
}

type RemoveTodoTagPayload {
  todo: Todo!
}

input RenameTodoInput {
  """id of Todo"""
  id: ID!
  text: String
  reason_for_change: String
}

type RenameTodoPayload {
  todo: Todo!
}

input TodoStatusAccountEditInput {
  """id of Account"""
  id: ID!
  todo_status: AccountTodoStatusInput!
  todo_id: ID!
}

type TodoStatusAccountEditPayload {
  account: Account!
}

type Query {
  account(id: ID!): Account
  closed_todos_last_day(first: Int, after: String, last: Int, before: String): RootToClosedTodosLastDayConnection!
  open_todos(id: ID!, first: Int, after: String, last: Int, before: String): RootToOpenTodosConnection!
  open_todos_plural(id: ID!): [Todo!]!
  tag(id: ID!): Tag
  todo(id: ID!): Todo
}

type Mutation {
  addTodoTag(input: AddTodoTagInput!): AddTodoTagPayload!
  changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload!
  createAccount(input: CreateAccountInput!): CreateAccountPayload!
  createTag(input: CreateTagInput!): CreateTagPayload!
  createTodo(input: CreateTodoInput!): CreateTodoPayload!
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload!
  deleteTodo(input: DeleteTodoInput!): DeleteTodoPayload!
  editAccount(input: EditAccountInput!): EditAccountPayload!
  markAllTodosAs(accountID: ID!, completed: Boolean!): Account!
  removeCompletedTodos(accountID: ID!): Account!
  removeTodoTag(input: RemoveTodoTagInput!): RemoveTodoTagPayload!
  renameTodo(input: RenameTodoInput!): RenameTodoPayload!
  todoStatusAccountEdit(input: TodoStatusAccountEditInput!): TodoStatusAccountEditPayload!
}

"""Time scalar type"""
scalar Time

