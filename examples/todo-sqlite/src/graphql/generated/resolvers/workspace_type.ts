// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
} from "@snowtop/ent/graphql";
import {
  Workspace,
  WorkspaceToMembersQuery,
  WorkspaceToScopedTodosQuery,
} from "src/ent/";
import {
  AccountType,
  WorkspaceToMembersConnectionType,
  WorkspaceToScopedTodosConnectionType,
} from "src/graphql/resolvers/internal";

export const WorkspaceType = new GraphQLObjectType({
  name: "Workspace",
  fields: (): GraphQLFieldConfigMap<Workspace, RequestContext<Viewer>> => ({
    creator: {
      type: AccountType,
      resolve: (obj: Workspace, args: {}, context: RequestContext<Viewer>) => {
        return obj.loadCreator();
      },
    },
    viewer_creator: {
      type: AccountType,
      resolve: (obj: Workspace, args: {}, context: RequestContext<Viewer>) => {
        return obj.loadViewerCreator();
      },
    },
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    name: {
      type: new GraphQLNonNull(GraphQLString),
    },
    slug: {
      type: new GraphQLNonNull(GraphQLString),
    },
    members: {
      type: new GraphQLNonNull(WorkspaceToMembersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (obj: Workspace, args: any, context: RequestContext<Viewer>) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: Workspace) => WorkspaceToMembersQuery.query(v, obj),
          args,
        );
      },
    },
    scoped_todos: {
      type: new GraphQLNonNull(WorkspaceToScopedTodosConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (obj: Workspace, args: any, context: RequestContext<Viewer>) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: Workspace) => WorkspaceToScopedTodosQuery.query(v, obj),
          args,
        );
      },
    },
  }),
  interfaces: () => [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof Workspace;
  },
});
