// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import { Todo } from "src/ent/";
import ChangeTodoBountyAction, {
  ChangeTodoBountyInput,
} from "src/ent/todo/actions/change_todo_bounty_action";
import { TodoType } from "src/graphql/resolvers/";

interface customChangeTodoBountyInput extends ChangeTodoBountyInput {
  id: string;
}

interface ChangeTodoBountyPayload {
  todo: Todo;
}

export const ChangeTodoBountyInputType = new GraphQLInputObjectType({
  name: "ChangeTodoBountyInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Todo",
      type: new GraphQLNonNull(GraphQLID),
    },
    bounty: {
      type: GraphQLInt,
    },
  }),
});

export const ChangeTodoBountyPayloadType = new GraphQLObjectType({
  name: "ChangeTodoBountyPayload",
  fields: (): GraphQLFieldConfigMap<
    ChangeTodoBountyPayload,
    RequestContext<Viewer>
  > => ({
    todo: {
      type: new GraphQLNonNull(TodoType),
    },
  }),
});

export const ChangeTodoBountyType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: customChangeTodoBountyInput }
> = {
  type: new GraphQLNonNull(ChangeTodoBountyPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(ChangeTodoBountyInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<ChangeTodoBountyPayload> => {
    const todo = await ChangeTodoBountyAction.saveXFromID(
      context.getViewer(),
      input.id,
      {
        bounty: input.bounty,
      },
    );
    return { todo: todo };
  },
};
