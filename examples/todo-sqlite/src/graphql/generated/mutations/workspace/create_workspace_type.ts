// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import { Workspace } from "src/ent/";
import CreateWorkspaceAction, {
  WorkspaceCreateInput,
} from "src/ent/workspace/actions/create_workspace_action";
import { WorkspaceType } from "src/graphql/resolvers/";

interface CreateWorkspacePayload {
  workspace: Workspace;
}

export const CreateWorkspaceInputType = new GraphQLInputObjectType({
  name: "CreateWorkspaceInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
    },
    slug: {
      type: new GraphQLNonNull(GraphQLString),
    },
  }),
});

export const CreateWorkspacePayloadType = new GraphQLObjectType({
  name: "CreateWorkspacePayload",
  fields: (): GraphQLFieldConfigMap<
    CreateWorkspacePayload,
    RequestContext<Viewer>
  > => ({
    workspace: {
      type: new GraphQLNonNull(WorkspaceType),
    },
  }),
});

export const CreateWorkspaceType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: WorkspaceCreateInput }
> = {
  type: new GraphQLNonNull(CreateWorkspacePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(CreateWorkspaceInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<CreateWorkspacePayload> => {
    const workspace = await CreateWorkspaceAction.create(context.getViewer(), {
      name: input.name,
      slug: input.slug,
    }).saveX();
    return { workspace: workspace };
  },
};
