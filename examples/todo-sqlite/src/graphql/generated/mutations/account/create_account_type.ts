// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import { Account } from "src/ent/";
import CreateAccountAction, {
  AccountCreateInput,
} from "src/ent/account/actions/create_account_action";
import { AccountPrefs, AccountPrefs2 } from "src/ent/generated/types";
import { AccountPrefs2InputType } from "src/graphql/generated/mutations/input/account_prefs_2_input_type";
import { AccountPrefsInputType } from "src/graphql/generated/mutations/input/account_prefs_input_type";
import { AccountType } from "src/graphql/resolvers/";

interface customCreateAccountInput
  extends Omit<
    AccountCreateInput,
    "phoneNumber" | "accountPrefs" | "accountPrefsList"
  > {
  phone_number: string;
  account_prefs?: AccountPrefs | null;
  account_prefs_list?: AccountPrefs2[] | null;
}

interface CreateAccountPayload {
  account: Account;
}

export const CreateAccountInputType = new GraphQLInputObjectType({
  name: "CreateAccountInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
    },
    phone_number: {
      type: new GraphQLNonNull(GraphQLString),
    },
    account_prefs: {
      type: AccountPrefsInputType,
    },
    account_prefs_list: {
      type: new GraphQLList(new GraphQLNonNull(AccountPrefs2InputType)),
    },
    credits: {
      type: GraphQLInt,
    },
  }),
});

export const CreateAccountPayloadType = new GraphQLObjectType({
  name: "CreateAccountPayload",
  fields: (): GraphQLFieldConfigMap<
    CreateAccountPayload,
    RequestContext<Viewer>
  > => ({
    account: {
      type: new GraphQLNonNull(AccountType),
    },
  }),
});

export const CreateAccountType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: customCreateAccountInput }
> = {
  type: new GraphQLNonNull(CreateAccountPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(CreateAccountInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<CreateAccountPayload> => {
    const account = await CreateAccountAction.create(context.getViewer(), {
      name: input.name,
      phoneNumber: input.phone_number,
      accountPrefs: input.account_prefs,
      accountPrefsList: input.account_prefs_list,
      credits: input.credits,
    }).saveX();
    return { account: account };
  },
};
