// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import { Account } from "src/ent/";
import AccountUpdateBalanceAction, {
  AccountUpdateBalanceInput,
} from "src/ent/account/actions/account_update_balance_action";
import { AccountType } from "src/graphql/resolvers/";

interface customAccountUpdateBalanceInput extends AccountUpdateBalanceInput {
  id: string;
}

interface AccountUpdateBalancePayload {
  account: Account;
}

export const AccountUpdateBalanceInputType = new GraphQLInputObjectType({
  name: "AccountUpdateBalanceInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Account",
      type: new GraphQLNonNull(GraphQLID),
    },
    credits: {
      type: new GraphQLNonNull(GraphQLInt),
    },
  }),
});

export const AccountUpdateBalancePayloadType = new GraphQLObjectType({
  name: "AccountUpdateBalancePayload",
  fields: (): GraphQLFieldConfigMap<
    AccountUpdateBalancePayload,
    RequestContext<Viewer>
  > => ({
    account: {
      type: new GraphQLNonNull(AccountType),
    },
  }),
});

export const AccountUpdateBalanceType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: customAccountUpdateBalanceInput }
> = {
  type: new GraphQLNonNull(AccountUpdateBalancePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(AccountUpdateBalanceInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<AccountUpdateBalancePayload> => {
    const account = await AccountUpdateBalanceAction.saveXFromID(
      context.getViewer(),
      input.id,
      {
        credits: input.credits,
      },
    );
    return { account };
  },
};
