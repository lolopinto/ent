// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
} from "@snowtop/ent/graphql";
import { Tag, TagToTodosQuery } from "src/ent/";
import {
  AccountType,
  TagToTodosConnectionType,
} from "src/graphql/resolvers/internal";

export const TagType = new GraphQLObjectType({
  name: "Tag",
  fields: (): GraphQLFieldConfigMap<Tag, RequestContext> => ({
    owner: {
      type: AccountType,
      resolve: (tag: Tag, args: {}, context: RequestContext) => {
        return tag.loadOwner();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
    },
    displayName: {
      type: GraphQLNonNull(GraphQLString),
    },
    canonicalName: {
      type: GraphQLNonNull(GraphQLString),
    },
    todos: {
      type: GraphQLNonNull(TagToTodosConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (tag: Tag, args: {}, context: RequestContext) => {
        return new GraphQLEdgeConnection(
          tag.viewer,
          tag,
          (v, tag: Tag) => TagToTodosQuery.query(v, tag),
          args,
        );
      },
    },
  }),
  interfaces: [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof Tag;
  },
});
