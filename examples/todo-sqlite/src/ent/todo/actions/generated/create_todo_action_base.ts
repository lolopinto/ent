// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Account, Todo } from "src/ent/";
import {
  TodoBuilder,
  TodoInput,
} from "src/ent/todo/actions/generated/todo_builder";

export interface TodoCreateInput {
  text: string;
  creatorID: ID | Builder<Account>;
}

export class CreateTodoActionBase implements Action<Todo> {
  public readonly builder: TodoBuilder;
  public readonly viewer: Viewer;
  protected input: TodoCreateInput;

  constructor(viewer: Viewer, input: TodoCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new TodoBuilder(this.viewer, WriteOperation.Insert, this);
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): TodoInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<Todo>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Todo | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Todo> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateTodoActionBase>(
    this: new (viewer: Viewer, input: TodoCreateInput) => T,
    viewer: Viewer,
    input: TodoCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
