// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Account, Tag } from "src/ent/";
import { TagBuilder } from "src/ent/tag/actions/generated/tag_builder";

export interface TagCreateInput {
  displayName: string;
  ownerID: ID | Builder<Account>;
  relatedTagIds?: ID[] | null;
}

export class CreateTagActionBase
  implements Action<Tag, TagBuilder<TagCreateInput>, TagCreateInput>
{
  public readonly builder: TagBuilder<TagCreateInput>;
  public readonly viewer: Viewer;
  protected input: TagCreateInput;

  constructor(viewer: Viewer, input: TagCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new TagBuilder(this.viewer, WriteOperation.Insert, this);
  }

  getPrivacyPolicy(): PrivacyPolicy<Tag> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): TagCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<Tag>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Tag | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Tag> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateTagActionBase>(
    this: new (viewer: Viewer, input: TagCreateInput) => T,
    viewer: Viewer,
    input: TagCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
