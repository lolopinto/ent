// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@lolopinto/ent";
import { Action, Changeset, WriteOperation } from "@lolopinto/ent/action";
import { Account } from "src/ent/";
import {
  AccountBuilder,
  AccountInput,
} from "src/ent/account/actions/account_builder";

export class DeleteAccountActionBase implements Action<Account> {
  public readonly builder: AccountBuilder;
  public readonly viewer: Viewer;
  protected account: Account;

  constructor(viewer: Viewer, account: Account) {
    this.viewer = viewer;
    this.builder = new AccountBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      account,
    );
    this.account = account;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AccountInput {
    return {};
  }

  async changeset(): Promise<Changeset<Account>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteAccountActionBase>(
    this: new (viewer: Viewer, account: Account) => T,
    viewer: Viewer,
    account: Account,
  ): DeleteAccountActionBase {
    return new this(viewer, account);
  }

  static async saveXFromID<T extends DeleteAccountActionBase>(
    this: new (viewer: Viewer, account: Account) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    let account = await Account.loadX(viewer, id);
    return await new this(viewer, account).saveX();
  }
}
