// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  CustomEdgeQueryBase,
  ID,
  IndexLoaderFactory,
  RawCountLoaderFactory,
  Viewer,
} from "@snowtop/ent";
import { getTransformedReadClause } from "@snowtop/ent/schema";
import { Account, Tag, Todo, tagLoader, todoLoader } from "src/ent/internal";
import TagSchema from "src/schema/tag";
import TodoSchema from "src/schema/todo";

export const accountToTagsCountLoaderFactory = new RawCountLoaderFactory({
  ...Tag.loaderOptions(),
  groupCol: "owner_id",
  clause: getTransformedReadClause(TagSchema),
});
export const accountToTagsDataLoaderFactory = new IndexLoaderFactory(
  Tag.loaderOptions(),
  "owner_id",
  {
    toPrime: [tagLoader],
    extraClause: getTransformedReadClause(TagSchema),
  },
);

export const accountToTodosCountLoaderFactory = new RawCountLoaderFactory({
  ...Todo.loaderOptions(),
  groupCol: "creator_id",
  clause: getTransformedReadClause(TodoSchema),
});
export const accountToTodosDataLoaderFactory = new IndexLoaderFactory(
  Todo.loaderOptions(),
  "creator_id",
  {
    toPrime: [todoLoader],
    extraClause: getTransformedReadClause(TodoSchema),
  },
);

export class AccountToTagsQueryBase extends CustomEdgeQueryBase<Account, Tag> {
  constructor(viewer: Viewer, src: Account | ID) {
    super(viewer, {
      src: src,
      countLoaderFactory: accountToTagsCountLoaderFactory,
      dataLoaderFactory: accountToTagsDataLoaderFactory,
      options: Tag.loaderOptions(),
    });
  }

  static query<T extends AccountToTagsQueryBase>(
    this: new (viewer: Viewer, src: Account | ID) => T,
    viewer: Viewer,
    src: Account | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Account.load(this.viewer, id);
  }
}

export class AccountToTodosQueryBase extends CustomEdgeQueryBase<
  Account,
  Todo
> {
  constructor(viewer: Viewer, src: Account | ID) {
    super(viewer, {
      src: src,
      countLoaderFactory: accountToTodosCountLoaderFactory,
      dataLoaderFactory: accountToTodosDataLoaderFactory,
      options: Todo.loaderOptions(),
    });
  }

  static query<T extends AccountToTodosQueryBase>(
    this: new (viewer: Viewer, src: Account | ID) => T,
    viewer: Viewer,
    src: Account | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Account.load(this.viewer, id);
  }
}
