// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  EdgeQuerySource,
  Ent,
  ID,
  LoadEntOptions,
  Viewer,
  loadEnt,
} from "@snowtop/ent";
import {
  EdgeType,
  ObjectToScopedTodosEdge,
  Todo,
  TodoToTagsQuery,
  TodoToTodoScopeQuery,
} from "src/ent/internal";

export const objectToScopedTodosCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.ObjectToScopedTodos);
export const objectToScopedTodosDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.ObjectToScopedTodos,
  () => ObjectToScopedTodosEdge,
);

export abstract class ObjectToScopedTodosQueryBase extends AssocEdgeQueryBase<
  Ent<Viewer>,
  Todo,
  ObjectToScopedTodosEdge,
  Viewer
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Ent<Viewer>, Todo, Viewer>) {
    super(
      viewer,
      src,
      objectToScopedTodosCountLoaderFactory,
      objectToScopedTodosDataLoaderFactory,
      Todo.loaderOptions(),
    );
  }

  static query<T extends ObjectToScopedTodosQueryBase>(
    this: new (
      viewer: Viewer,
      src: EdgeQuerySource<Ent<Viewer>, Todo>,
    ) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Ent<Viewer>, Todo>,
  ): T {
    return new this(viewer, src);
  }

  protected abstract getSourceLoadEntOptions(): LoadEntOptions<
    Ent<Viewer>,
    Viewer
  >;

  sourceEnt(id: ID) {
    return loadEnt(this.viewer, id, this.getSourceLoadEntOptions());
  }

  queryTags(): TodoToTagsQuery {
    return TodoToTagsQuery.query(this.viewer, this);
  }

  queryTodoScope(): TodoToTodoScopeQuery {
    return TodoToTodoScopeQuery.query(this.viewer, this);
  }
}
