// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  Clause,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  convertRelativeInput,
  Observer,
  RelativeNumberValue,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Account } from "src/ent/";
import { AccountBuilder } from "src/ent/generated/account/actions/account_builder";
import {
  AccountPrefs,
  AccountPrefs2,
  AccountState,
} from "src/ent/generated/types";

export interface AccountEditRelativeInput {
  name?: string;
  phoneNumber?: string;
  accountState?: AccountState | null;
  accountPrefs?: AccountPrefs | null;
  accountPrefsList?: AccountPrefs2[] | null;
  credits?: number | RelativeNumberValue<number>;
}

export interface AccountEditInput extends AccountEditRelativeInput {
  credits?: number;
}

export type EditAccountActionTriggers = (
  | Trigger<
      Account,
      AccountBuilder<AccountEditInput, Account>,
      Viewer,
      AccountEditInput,
      Account
    >
  | Trigger<
      Account,
      AccountBuilder<AccountEditInput, Account>,
      Viewer,
      AccountEditInput,
      Account
    >[]
)[];

export type EditAccountActionObservers = Observer<
  Account,
  AccountBuilder<AccountEditInput, Account>,
  Viewer,
  AccountEditInput,
  Account
>[];

export type EditAccountActionValidators = Validator<
  Account,
  AccountBuilder<AccountEditInput, Account>,
  Viewer,
  AccountEditInput,
  Account
>[];

export class EditAccountActionBase
  implements
    Action<
      Account,
      AccountBuilder<AccountEditInput, Account>,
      Viewer,
      AccountEditInput,
      Account
    >
{
  public readonly builder: AccountBuilder<AccountEditInput, Account>;
  public readonly viewer: Viewer;
  protected input: AccountEditInput;
  protected readonly account: Account;

  constructor(viewer: Viewer, account: Account, input: AccountEditRelativeInput) {
    this.viewer = viewer;



    // const existing = account.___getData()['credits']
    let m = new Map<string, Clause>();
    let credits: number | undefined;
    if (typeof input.credits === "object") {
      const { clause, value } = convertRelativeInput(input.credits, 'credits', account.credits)
      m.set('credits', clause);
      credits = value
    } else {
      credits =input.credits
    }
        let input2: AccountEditInput = { ...input,credits };



    // TODO has resolved input
    // and then resolve the input here...
    this.builder = new AccountBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      account,
    );
    this.account = account;
  }

  getPrivacyPolicy(): PrivacyPolicy<Account, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): EditAccountActionTriggers {
    return [];
  }

  getObservers(): EditAccountActionObservers {
    return [];
  }

  getValidators(): EditAccountActionValidators {
    return [];
  }

  getInput(): AccountEditInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Account | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Account> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditAccountActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountEditInput,
    ) => T,
    viewer: Viewer,
    account: Account,
    input: AccountEditInput,
  ): T {
    return new this(viewer, account, input);
  }

  static async saveXFromID<T extends EditAccountActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: AccountEditInput,
  ): Promise<Account> {
    const account = await Account.loadX(viewer, id);
    return new this(viewer, account, input).saveX();
  }
}
