// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Account } from "src/ent/";
import { AccountBuilder } from "src/ent/generated/account/actions/account_builder";

export interface AccountTransferCreditsInput {
  to: ID;
  amount: number;
}

export type AccountTransferCreditsActionTriggers = (
  | Trigger<
      Account,
      AccountBuilder<AccountTransferCreditsInput, Account>,
      Viewer,
      AccountTransferCreditsInput,
      Account
    >
  | Trigger<
      Account,
      AccountBuilder<AccountTransferCreditsInput, Account>,
      Viewer,
      AccountTransferCreditsInput,
      Account
    >[]
)[];

export type AccountTransferCreditsActionObservers = Observer<
  Account,
  AccountBuilder<AccountTransferCreditsInput, Account>,
  Viewer,
  AccountTransferCreditsInput,
  Account
>[];

export type AccountTransferCreditsActionValidators = Validator<
  Account,
  AccountBuilder<AccountTransferCreditsInput, Account>,
  Viewer,
  AccountTransferCreditsInput,
  Account
>[];

export class AccountTransferCreditsActionBase
  implements
    Action<
      Account,
      AccountBuilder<AccountTransferCreditsInput, Account>,
      Viewer,
      AccountTransferCreditsInput,
      Account
    >
{
  public readonly builder: AccountBuilder<AccountTransferCreditsInput, Account>;
  public readonly viewer: Viewer;
  protected input: AccountTransferCreditsInput;
  protected readonly account: Account;

  constructor(
    viewer: Viewer,
    account: Account,
    input: AccountTransferCreditsInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new AccountBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      account,
    );
    this.account = account;
  }

  getPrivacyPolicy(): PrivacyPolicy<Account, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): AccountTransferCreditsActionTriggers {
    return [];
  }

  getObservers(): AccountTransferCreditsActionObservers {
    return [];
  }

  getValidators(): AccountTransferCreditsActionValidators {
    return [];
  }

  getInput(): AccountTransferCreditsInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Account | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Account> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends AccountTransferCreditsActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountTransferCreditsInput,
    ) => T,
    viewer: Viewer,
    account: Account,
    input: AccountTransferCreditsInput,
  ): T {
    return new this(viewer, account, input);
  }

  static async saveXFromID<T extends AccountTransferCreditsActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountTransferCreditsInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: AccountTransferCreditsInput,
  ): Promise<Account> {
    const account = await Account.loadX(viewer, id);
    return new this(viewer, account, input).saveX();
  }
}
