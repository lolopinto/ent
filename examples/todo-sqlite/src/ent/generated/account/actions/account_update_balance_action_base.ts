// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  Clause,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  RelativeNumberValue,
  Trigger,
  Validator,
  WriteOperation,
  maybeConvertRelativeInputPlusExpressions,
} from "@snowtop/ent/action";
import { Account } from "src/ent/";
import { AccountBuilder } from "src/ent/generated/account/actions/account_builder";

export interface AccountUpdateBalanceRelativeInput {
  credits: number | RelativeNumberValue<number>;
}

export interface AccountUpdateBalanceInput
  extends AccountUpdateBalanceRelativeInput {
  credits: number;
}

export type AccountUpdateBalanceActionTriggers = (
  | Trigger<
      Account,
      AccountBuilder<AccountUpdateBalanceInput, Account>,
      Viewer,
      AccountUpdateBalanceInput,
      Account
    >
  | Trigger<
      Account,
      AccountBuilder<AccountUpdateBalanceInput, Account>,
      Viewer,
      AccountUpdateBalanceInput,
      Account
    >[]
)[];

export type AccountUpdateBalanceActionObservers = Observer<
  Account,
  AccountBuilder<AccountUpdateBalanceInput, Account>,
  Viewer,
  AccountUpdateBalanceInput,
  Account
>[];

export type AccountUpdateBalanceActionValidators = Validator<
  Account,
  AccountBuilder<AccountUpdateBalanceInput, Account>,
  Viewer,
  AccountUpdateBalanceInput,
  Account
>[];

export class AccountUpdateBalanceActionBase
  implements
    Action<
      Account,
      AccountBuilder<AccountUpdateBalanceInput, Account>,
      Viewer,
      AccountUpdateBalanceInput,
      Account
    >
{
  public readonly builder: AccountBuilder<AccountUpdateBalanceInput, Account>;
  public readonly viewer: Viewer;
  protected input: AccountUpdateBalanceInput;
  protected readonly account: Account;

  constructor(
    viewer: Viewer,
    account: Account,
    input: AccountUpdateBalanceRelativeInput,
  ) {
    this.viewer = viewer;
    let expressions = new Map<string, Clause>();
    const data = account.___getRawDBData();
    // @ts-expect-error converted below
    this.input = input;
    const credits = maybeConvertRelativeInputPlusExpressions(
      input.credits,
      "credits",
      data.credits,
      expressions,
    );
    if (credits !== undefined) {
      input.credits = credits;
    }
    this.builder = new AccountBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      account,
      { expressions },
    );
    this.account = account;
  }

  getPrivacyPolicy(): PrivacyPolicy<Account, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): AccountUpdateBalanceActionTriggers {
    return [];
  }

  getObservers(): AccountUpdateBalanceActionObservers {
    return [];
  }

  getValidators(): AccountUpdateBalanceActionValidators {
    return [];
  }

  getInput(): AccountUpdateBalanceInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Account | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Account> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends AccountUpdateBalanceActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountUpdateBalanceRelativeInput,
    ) => T,
    viewer: Viewer,
    account: Account,
    input: AccountUpdateBalanceRelativeInput,
  ): T {
    return new this(viewer, account, input);
  }

  static async saveXFromID<T extends AccountUpdateBalanceActionBase>(
    this: new (
      viewer: Viewer,
      account: Account,
      input: AccountUpdateBalanceRelativeInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: AccountUpdateBalanceInput,
  ): Promise<Account> {
    const account = await Account.loadX(viewer, id);
    return new this(viewer, account, input).saveX();
  }
}
