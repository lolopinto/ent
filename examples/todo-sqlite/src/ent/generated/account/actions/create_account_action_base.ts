// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Account } from "src/ent/";
import { AccountBuilder } from "src/ent/generated/account/actions/account_builder";
import {
  AccountPrefs,
  AccountState,
  CountryInfo,
} from "src/ent/generated/types";

export interface AccountCreateInput {
  name: string;
  phoneNumber: string;
  accountState?: AccountState | null;
  accountPrefs?: AccountPrefs | null;
  accountPrefs3?: AccountPrefs;
  accountPrefsList?: AccountPrefs[] | null;
  credits?: number;
  countryInfos?: CountryInfo[] | null;
}

export type CreateAccountActionTriggers = (
  | Trigger<
      Account,
      AccountBuilder<AccountCreateInput, Account | null>,
      Viewer,
      AccountCreateInput,
      Account | null
    >
  | Trigger<
      Account,
      AccountBuilder<AccountCreateInput, Account | null>,
      Viewer,
      AccountCreateInput,
      Account | null
    >[]
)[];

export type CreateAccountActionObservers = Observer<
  Account,
  AccountBuilder<AccountCreateInput, Account | null>,
  Viewer,
  AccountCreateInput,
  Account | null
>[];

export type CreateAccountActionValidators = Validator<
  Account,
  AccountBuilder<AccountCreateInput, Account | null>,
  Viewer,
  AccountCreateInput,
  Account | null
>[];

export class CreateAccountActionBase
  implements
    Action<
      Account,
      AccountBuilder<AccountCreateInput, Account | null>,
      Viewer,
      AccountCreateInput,
      Account | null
    >
{
  public readonly builder: AccountBuilder<AccountCreateInput, Account | null>;
  public readonly viewer: Viewer;
  protected input: AccountCreateInput;

  constructor(viewer: Viewer, input: AccountCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new AccountBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<Account, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateAccountActionTriggers {
    return [];
  }

  getObservers(): CreateAccountActionObservers {
    return [];
  }

  getValidators(): CreateAccountActionValidators {
    return [];
  }

  getInput(): AccountCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Account | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Account> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateAccountActionBase>(
    this: new (
      viewer: Viewer,
      input: AccountCreateInput,
    ) => T,
    viewer: Viewer,
    input: AccountCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
