// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { ObjectLoaderFactory } from "@snowtop/ent";
import { NodeType } from "./const";

const accountTable = "accounts";
const accountFields = [
  "id",
  "created_at",
  "updated_at",
  "name",
  "phone_number",
];

export const accountLoader = new ObjectLoaderFactory({
  tableName: accountTable,
  fields: accountFields,
  key: "id",
});
export const accountPhoneNumberLoader = new ObjectLoaderFactory({
  tableName: accountTable,
  fields: accountFields,
  key: "phone_number",
});

export const accountLoaderInfo = {
  tableName: accountTable,
  fields: accountFields,
  nodeType: NodeType.Account,
  loaderFactory: accountLoader,
};

accountLoader.addToPrime(accountPhoneNumberLoader);
accountPhoneNumberLoader.addToPrime(accountLoader);

const tagTable = "tags";
const tagFields = [
  "id",
  "created_at",
  "updated_at",
  "display_name",
  "canonical_name",
  "owner_id",
];

export const tagLoader = new ObjectLoaderFactory({
  tableName: tagTable,
  fields: tagFields,
  key: "id",
});

export const tagLoaderInfo = {
  tableName: tagTable,
  fields: tagFields,
  nodeType: NodeType.Tag,
  loaderFactory: tagLoader,
};

const todoTable = "todos";
const todoFields = [
  "id",
  "created_at",
  "updated_at",
  "text",
  "completed",
  "creator_id",
];

export const todoLoader = new ObjectLoaderFactory({
  tableName: todoTable,
  fields: todoFields,
  key: "id",
});

export const todoLoaderInfo = {
  tableName: todoTable,
  fields: todoFields,
  nodeType: NodeType.Todo,
  loaderFactory: todoLoader,
};

export function getLoaderInfoFromSchema(schema: string) {
  switch (schema) {
    case "Account":
      return accountLoaderInfo;
    case "Tag":
      return tagLoaderInfo;
    case "Todo":
      return todoLoaderInfo;
    default:
      throw new Error(
        `invalid schema ${schema} passed to getLoaderInfoFromSchema`,
      );
  }
}

export function getLoaderInfoFromNodeType(nodeType: NodeType) {
  switch (nodeType) {
    case NodeType.Account:
      return accountLoaderInfo;
    case NodeType.Tag:
      return tagLoaderInfo;
    case NodeType.Todo:
      return todoLoaderInfo;
    default:
      throw new Error(
        `invalid nodeType ${nodeType} passed to getLoaderInfoFromNodeType`,
      );
  }
}
