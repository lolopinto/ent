// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  AssocEdgeInputOptions,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Tag, Todo } from "src/ent/";
import {
  TodoBuilder,
  TodoInput,
} from "src/ent/generated/todo/actions/todo_builder";

export type TodoAddTagActionTriggers = (
  | Trigger<Todo, TodoBuilder<TodoInput, Todo>, Viewer, TodoInput, Todo>
  | Trigger<Todo, TodoBuilder<TodoInput, Todo>, Viewer, TodoInput, Todo>[]
)[];

export type TodoAddTagActionObservers = Observer<
  Todo,
  TodoBuilder<TodoInput, Todo>,
  Viewer,
  TodoInput,
  Todo
>[];

export type TodoAddTagActionValidators = Validator<
  Todo,
  TodoBuilder<TodoInput, Todo>,
  Viewer,
  TodoInput,
  Todo
>[];

export class TodoAddTagActionBase
  implements Action<Todo, TodoBuilder<TodoInput, Todo>, Viewer, TodoInput, Todo>
{
  public readonly builder: TodoBuilder<TodoInput, Todo>;
  public readonly viewer: Viewer;
  protected readonly todo: Todo;

  constructor(viewer: Viewer, todo: Todo) {
    this.viewer = viewer;
    this.builder = new TodoBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      todo,
    );
    this.todo = todo;
  }

  getPrivacyPolicy(): PrivacyPolicy<Todo, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): TodoAddTagActionTriggers {
    return [];
  }

  getObservers(): TodoAddTagActionObservers {
    return [];
  }

  getValidators(): TodoAddTagActionValidators {
    return [];
  }

  getInput(): TodoInput {
    return {};
  }

  addTag(...nodes: (ID | Tag | Builder<Tag>)[]): this {
    nodes.forEach((node) => this.builder.addTag(node));
    return this;
  }

  addTagID(id: ID | Builder<Tag>, options?: AssocEdgeInputOptions): this {
    this.builder.addTagID(id, options);
    return this;
  }
  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Todo | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Todo> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends TodoAddTagActionBase>(
    this: new (
      viewer: Viewer,
      todo: Todo,
    ) => T,
    viewer: Viewer,
    todo: Todo,
  ): T {
    return new this(viewer, todo);
  }

  static async saveXFromID<T extends TodoAddTagActionBase>(
    this: new (
      viewer: Viewer,
      todo: Todo,
    ) => T,
    viewer: Viewer,
    id: ID,
    tagID: ID,
  ): Promise<Todo> {
    const todo = await Todo.loadX(viewer, id);
    return new this(viewer, todo).addTag(tagID).saveX();
  }
}
