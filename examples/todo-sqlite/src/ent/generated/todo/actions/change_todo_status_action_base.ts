// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Todo } from "src/ent/";
import { TodoBuilder } from "src/ent/generated/todo/actions/todo_builder";

export interface ChangeTodoStatusInput {
  completed?: boolean;
}

export type ChangeTodoStatusActionTriggers = (
  | Trigger<
      Todo,
      TodoBuilder<ChangeTodoStatusInput, Todo>,
      Viewer,
      ChangeTodoStatusInput,
      Todo
    >
  | Trigger<
      Todo,
      TodoBuilder<ChangeTodoStatusInput, Todo>,
      Viewer,
      ChangeTodoStatusInput,
      Todo
    >[]
)[];

export type ChangeTodoStatusActionObservers = Observer<
  Todo,
  TodoBuilder<ChangeTodoStatusInput, Todo>,
  Viewer,
  ChangeTodoStatusInput,
  Todo
>[];

export type ChangeTodoStatusActionValidators = Validator<
  Todo,
  TodoBuilder<ChangeTodoStatusInput, Todo>,
  Viewer,
  ChangeTodoStatusInput,
  Todo
>[];

export class ChangeTodoStatusActionBase
  implements
    Action<
      Todo,
      TodoBuilder<ChangeTodoStatusInput, Todo>,
      Viewer,
      ChangeTodoStatusInput,
      Todo
    >
{
  public readonly builder: TodoBuilder<ChangeTodoStatusInput, Todo>;
  public readonly viewer: Viewer;
  protected input: ChangeTodoStatusInput;
  protected readonly todo: Todo;

  constructor(viewer: Viewer, todo: Todo, input: ChangeTodoStatusInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new TodoBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      todo,
    );
    this.todo = todo;
  }

  getPrivacyPolicy(): PrivacyPolicy<Todo, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): ChangeTodoStatusActionTriggers {
    return [];
  }

  getObservers(): ChangeTodoStatusActionObservers {
    return [];
  }

  getValidators(): ChangeTodoStatusActionValidators {
    return [];
  }

  getInput(): ChangeTodoStatusInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Todo | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Todo> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends ChangeTodoStatusActionBase>(
    this: new (viewer: Viewer, todo: Todo, input: ChangeTodoStatusInput) => T,
    viewer: Viewer,
    todo: Todo,
    input: ChangeTodoStatusInput,
  ): T {
    return new this(viewer, todo, input);
  }

  static async saveXFromID<T extends ChangeTodoStatusActionBase>(
    this: new (viewer: Viewer, todo: Todo, input: ChangeTodoStatusInput) => T,
    viewer: Viewer,
    id: ID,
    input: ChangeTodoStatusInput,
  ): Promise<Todo> {
    const todo = await Todo.loadX(viewer, id);
    return new this(viewer, todo, input).saveX();
  }
}
