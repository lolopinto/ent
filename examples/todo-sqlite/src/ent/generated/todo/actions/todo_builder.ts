// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { AssocEdgeInputOptions, Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { Account, Tag, Todo } from "src/ent/";
import { EdgeType, NodeType } from "src/ent/generated/const";
import { todoLoaderInfo } from "src/ent/generated/loaders";
import schema from "src/schema/todo_schema";

export interface TodoInput {
  deletedAt?: Date | null;
  text?: string;
  completed?: boolean;
  creatorID?: ID | Builder<Account, Viewer>;
  // allow other properties. useful for action-only fields
  [x: string]: any;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

type MaybeNull<T extends Ent> = T | null;
type TMaybleNullableEnt<T extends Ent> = T | MaybeNull<T>;

export class TodoBuilder<
  TInput extends TodoInput = TodoInput,
  TExistingEnt extends TMaybleNullableEnt<Todo> = Todo | null,
> implements Builder<Todo, Viewer, TExistingEnt>
{
  orchestrator: Orchestrator<Todo, TInput, Viewer, TExistingEnt>;
  readonly placeholderID: ID;
  readonly ent = Todo;
  readonly nodeType = NodeType.Todo;
  private input: TInput;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: Action<
      Todo,
      Builder<Todo, Viewer, TExistingEnt>,
      Viewer,
      TInput,
      TExistingEnt
    >,
    public readonly existingEnt: TExistingEnt,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-Todo`;
    this.input = action.getInput();
    const updateInput = (d: TodoInput) => this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "todos",
      key: "id",
      loaderOptions: Todo.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
      fieldInfo: todoLoaderInfo.fieldInfo,
    });
  }

  getInput(): TInput {
    return this.input;
  }

  updateInput(input: TodoInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  deleteInputKey(key: keyof TodoInput) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  // this returns the id of the existing ent or the id of the ent that's being created
  async getEntID() {
    if (this.existingEnt) {
      return this.existingEnt.id;
    }
    const edited = await this.orchestrator.getEditedData();
    if (!edited.id) {
      throw new Error(
        `couldn't get the id field. should have been set by 'defaultValueOnCreate'`,
      );
    }
    return edited.id;
  }
  // this gets the inputs that have been written for a given edgeType and operation
  // WriteOperation.Insert for adding an edge and WriteOperation.Delete for deleting an edge
  getEdgeInputData(edgeType: EdgeType, op: WriteOperation) {
    return this.orchestrator.getInputEdges(edgeType, op);
  }

  clearInputEdges(edgeType: EdgeType, op: WriteOperation, id?: ID) {
    this.orchestrator.clearInputEdges(edgeType, op, id);
  }

  addTag(...nodes: (ID | Tag | Builder<Tag, any>)[]): this {
    for (const node of nodes) {
      if (this.isBuilder(node)) {
        this.addTagID(node);
      } else if (typeof node === "object") {
        this.addTagID(node.id);
      } else {
        this.addTagID(node);
      }
    }
    return this;
  }

  addTagID(id: ID | Builder<Tag, any>, options?: AssocEdgeInputOptions): this {
    this.orchestrator.addOutboundEdge(
      id,
      EdgeType.TodoToTags,
      NodeType.Tag,
      options,
    );
    return this;
  }

  removeTag(...nodes: (ID | Tag)[]): this {
    for (const node of nodes) {
      if (typeof node === "object") {
        this.orchestrator.removeOutboundEdge(node.id, EdgeType.TodoToTags);
      } else {
        this.orchestrator.removeOutboundEdge(node, EdgeType.TodoToTags);
      }
    }
    return this;
  }

  async build(): Promise<Changeset> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<Todo | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<Todo> {
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const fields = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("deleted_at", fields.deletedAt);
    addField("Text", fields.text);
    addField("Completed", fields.completed);
    addField("creatorID", fields.creatorID);
    return result;
  }

  isBuilder<T extends Ent>(
    node: ID | T | Builder<T, any>,
  ): node is Builder<T, any> {
    return (node as Builder<T, any>).placeholderID !== undefined;
  }

  // get value of deleted_at. Retrieves it from the input if specified or takes it from existingEnt
  getNewDeletedAtValue(): Date | null | undefined {
    return this.input.deletedAt;
  }

  // get value of Text. Retrieves it from the input if specified or takes it from existingEnt
  getNewTextValue(): string | undefined {
    if (this.input.text !== undefined) {
      return this.input.text;
    }
    return this.existingEnt?.text;
  }

  // get value of Completed. Retrieves it from the input if specified or takes it from existingEnt
  getNewCompletedValue(): boolean | undefined {
    if (this.input.completed !== undefined) {
      return this.input.completed;
    }
    return this.existingEnt?.completed;
  }

  // get value of creatorID. Retrieves it from the input if specified or takes it from existingEnt
  getNewCreatorIDValue(): ID | Builder<Account, Viewer> | undefined {
    if (this.input.creatorID !== undefined) {
      return this.input.creatorID;
    }
    return this.existingEnt?.creatorID;
  }
}
