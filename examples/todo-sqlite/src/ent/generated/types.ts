// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

export enum NodeType {
  // Account is the node type for the Account object. Used to identify this node in edges and other places.
  Account = "account",
  // Tag is the node type for the Tag object. Used to identify this node in edges and other places.
  Tag = "tag",
  // Todo is the node type for the Todo object. Used to identify this node in edges and other places.
  Todo = "todo",
  // Workspace is the node type for the Workspace object. Used to identify this node in edges and other places.
  Workspace = "workspace",
}

export enum EdgeType {
  // AccountToClosedTodosDup is the edgeType for the account to closedtodosdup edge.
  AccountToClosedTodosDup = "7dcd1712-6a08-4253-96d9-068996bb6e4a",
  // AccountToCreatedWorkspaces is the edgeType for the account to createdworkspaces edge.
  AccountToCreatedWorkspaces = "533096dc-3e79-4e66-8af8-b65e4e9c86d3",
  // AccountToOpenTodosDup is the edgeType for the account to opentodosdup edge.
  AccountToOpenTodosDup = "a75dafbf-0051-4804-bb99-a0c212599af3",
  // AccountToWorkspaces is the edgeType for the account to workspaces edge.
  AccountToWorkspaces = "b27492cd-a064-4e74-a3af-59256352ed91",
  // ObjectToScopedTodos is the edgeType for the object to scopedtodos edge.
  ObjectToScopedTodos = "2a4965c1-c959-4a2d-9f93-afd131baf16b",
  // TagToTodos is the edgeType for the tag to todos edge.
  TagToTodos = "33dd169d-a290-4d3f-8b09-b74628bec247",
  // TodoToTags is the edgeType for the todo to tags edge.
  TodoToTags = "546160e1-224a-42ef-92c7-46089ab5e06e",
  // TodoToTodoScope is the edgeType for the todo to todoscope edge.
  TodoToTodoScope = "04ad27c4-1da0-4a90-aa2d-df4e95e381da",
  // WorkspaceToMembers is the edgeType for the workspace to members edge.
  WorkspaceToMembers = "1c8f1e5c-4bab-4ab5-8a31-1ac71688bbb0",
}

export enum AccountState {
  UNVERIFIED = "UNVERIFIED",
  VERIFIED = "VERIFIED",
  DEACTIVATED = "DEACTIVATED",
  DISABLED = "DISABLED",
  UNKNOWN = "%UNKNOWN%",
}

export function convertAccountState(val: string): AccountState {
  switch (val) {
    case AccountState.UNVERIFIED:
    case AccountState.VERIFIED:
    case AccountState.DEACTIVATED:
    case AccountState.DISABLED:
    case AccountState.UNKNOWN:
      return val;
    default:
      return AccountState.UNKNOWN;
  }
}

export function convertNullableAccountState(
  val: string | null,
): AccountState | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertAccountState(val);
}

export function convertAccountStateList(val: string[]): AccountState[] {
  return val.map((v) => convertAccountState(v));
}

export function convertNullableAccountStateList(
  val: string[] | null,
): AccountState[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertAccountStateList(val);
}

export enum AccountTodoStatus {
  OpenTodosDup = "openTodosDup",
  ClosedTodosDup = "closedTodosDup",
  Unknown = "%Unknown%",
}

export function convertAccountTodoStatus(val: string): AccountTodoStatus {
  switch (val) {
    case AccountTodoStatus.OpenTodosDup:
    case AccountTodoStatus.ClosedTodosDup:
    case AccountTodoStatus.Unknown:
      return val;
    default:
      return AccountTodoStatus.Unknown;
  }
}

export function convertNullableAccountTodoStatus(
  val: string | null,
): AccountTodoStatus | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertAccountTodoStatus(val);
}

export function convertAccountTodoStatusList(
  val: string[],
): AccountTodoStatus[] {
  return val.map((v) => convertAccountTodoStatus(v));
}

export function convertNullableAccountTodoStatusList(
  val: string[] | null,
): AccountTodoStatus[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertAccountTodoStatusList(val);
}

export interface AccountPrefs {
  finishedNux: boolean;
  enableNotifs: boolean;
  preferredLanguage: string;
}

export function convertAccountPrefs(input: any): AccountPrefs {
  return {
    finishedNux: input.finished_nux,
    enableNotifs: input.enable_notifs,
    preferredLanguage: input.preferred_language,
  };
}

export function convertNullableAccountPrefs(input: any): AccountPrefs | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertAccountPrefs(input);
}

export interface AccountPrefs2 {
  finishedNux: boolean;
  enableNotifs: boolean;
  preferredLanguage: string;
}

export function convertAccountPrefs2(input: any): AccountPrefs2 {
  return {
    finishedNux: input.finished_nux,
    enableNotifs: input.enable_notifs,
    preferredLanguage: input.preferred_language,
  };
}

export function convertNullableAccountPrefs2(input: any): AccountPrefs2 | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertAccountPrefs2(input);
}

export function convertAccountPrefs2List(input: any[]): AccountPrefs2[] {
  return input.map((v) => convertAccountPrefs2(v));
}

export function convertNullableAccountPrefs2List(
  input: any[] | null,
): AccountPrefs2[] | null {
  if (input === null || input === undefined) {
    return null;
  }
  return input.map((v) => convertAccountPrefs2(v));
}

export interface AccountPrefs3 {
  finishedNux: boolean;
  enableNotifs: boolean;
  preferredLanguage: string;
}

export function convertAccountPrefs3(input: any): AccountPrefs3 {
  return {
    finishedNux: input.finished_nux,
    enableNotifs: input.enable_notifs,
    preferredLanguage: input.preferred_language,
  };
}

export function convertNullableAccountPrefs3(input: any): AccountPrefs3 | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertAccountPrefs3(input);
}
