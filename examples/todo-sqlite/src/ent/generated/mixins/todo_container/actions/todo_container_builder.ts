// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { AssocEdgeInputOptions, Ent, ID, Viewer } from "@snowtop/ent";
import { Builder, Orchestrator } from "@snowtop/ent/action";
import { EdgeType, NodeType } from "src/ent/generated/types";
import { ITodoContainer, Todo } from "src/ent/internal";

interface IEntWithTodoContainer extends Ent<Viewer>, ITodoContainer {}

interface ITodoContainerBuilder<T extends IEntWithTodoContainer> {
  addScopedTodo(...nodes: (ID | Todo | Builder<Todo, any>)[]): this;
  addScopedTodoID(
    id: ID | Builder<Todo, any>,
    options?: AssocEdgeInputOptions,
  ): this;
  removeScopedTodo(...nodes: (ID | Todo)[]): this;
}

type Constructor<T = {}> = new (...args: any[]) => T;
interface BuilderConstructor<T extends IEntWithTodoContainer, C = {}> {
  orchestrator: Orchestrator<T, any, Viewer>;
  isBuilder<T extends Ent>(
    node: ID | T | Builder<T, any>,
  ): node is Builder<T, any>;
}

type TodoContainerBuilderIsh<T extends IEntWithTodoContainer> = Constructor<
  BuilderConstructor<T>
>;

export function TodoContainerBuilder<
  TEnt extends IEntWithTodoContainer,
  TBase extends TodoContainerBuilderIsh<TEnt>,
>(BaseClass: TBase) {
  return class TodoContainerBuilder
    extends BaseClass
    implements ITodoContainerBuilder<TEnt>
  {
    constructor(...args: any[]) {
      super(...args);
    }

    addScopedTodo(...nodes: (ID | Todo | Builder<Todo, any>)[]): this {
      for (const node of nodes) {
        if (this.isBuilder(node)) {
          this.addScopedTodoID(node);
        } else if (typeof node === "object") {
          this.addScopedTodoID(node.id);
        } else {
          this.addScopedTodoID(node);
        }
      }
      return this;
    }

    addScopedTodoID(
      id: ID | Builder<Todo, any>,
      options?: AssocEdgeInputOptions,
    ): this {
      this.orchestrator.addOutboundEdge(
        id,
        EdgeType.ObjectToScopedTodos,
        NodeType.Todo,
        options,
      );
      return this;
    }

    removeScopedTodo(...nodes: (ID | Todo)[]): this {
      for (const node of nodes) {
        if (typeof node === "object") {
          this.orchestrator.removeOutboundEdge(
            node.id,
            EdgeType.ObjectToScopedTodos,
          );
        } else {
          this.orchestrator.removeOutboundEdge(
            node,
            EdgeType.ObjectToScopedTodos,
          );
        }
      }
      return this;
    }
  };
}
