// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Workspace } from "src/ent/";
import { WorkspaceBuilder } from "src/ent/generated/workspace/actions/workspace_builder";

export interface WorkspaceCreateInput {
  id?: ID;
  createdAt?: Date;
  updatedAt?: Date;
  name: string;
  slug: string;
}

export type CreateWorkspaceActionTriggers = (
  | Trigger<
      Workspace,
      WorkspaceBuilder<WorkspaceCreateInput, Workspace | null>,
      Viewer,
      WorkspaceCreateInput,
      Workspace | null
    >
  | Trigger<
      Workspace,
      WorkspaceBuilder<WorkspaceCreateInput, Workspace | null>,
      Viewer,
      WorkspaceCreateInput,
      Workspace | null
    >[]
)[];

export type CreateWorkspaceActionObservers = Observer<
  Workspace,
  WorkspaceBuilder<WorkspaceCreateInput, Workspace | null>,
  Viewer,
  WorkspaceCreateInput,
  Workspace | null
>[];

export type CreateWorkspaceActionValidators = Validator<
  Workspace,
  WorkspaceBuilder<WorkspaceCreateInput, Workspace | null>,
  Viewer,
  WorkspaceCreateInput,
  Workspace | null
>[];

export class CreateWorkspaceActionBase
  implements
    Action<
      Workspace,
      WorkspaceBuilder<WorkspaceCreateInput, Workspace | null>,
      Viewer,
      WorkspaceCreateInput,
      Workspace | null
    >
{
  public readonly builder: WorkspaceBuilder<
    WorkspaceCreateInput,
    Workspace | null
  >;
  public readonly viewer: Viewer;
  protected input: WorkspaceCreateInput;

  constructor(viewer: Viewer, input: WorkspaceCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new WorkspaceBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<Workspace, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateWorkspaceActionTriggers {
    return [];
  }

  getObservers(): CreateWorkspaceActionObservers {
    return [];
  }

  getValidators(): CreateWorkspaceActionValidators {
    return [];
  }

  getInput(): WorkspaceCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Workspace | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Workspace> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateWorkspaceActionBase>(
    this: new (
      viewer: Viewer,
      input: WorkspaceCreateInput,
    ) => T,
    viewer: Viewer,
    input: WorkspaceCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
