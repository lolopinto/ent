// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLEnumType,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/snowtop-ts";
import {
  convertFromGQLEnum,
  mustDecodeIDFromGQLID,
} from "@snowtop/snowtop-ts/graphql";
import { Event } from "src/ent/";
import EditEventRsvpStatusAction, {
  EditEventRsvpStatusInput,
} from "src/ent/event/actions/edit_event_rsvp_status_action";
import {
  EventRsvpStatusInput,
  getEventRsvpStatusInputValues,
} from "src/ent/event/actions/generated/edit_event_rsvp_status_action_base";
import { EventType } from "src/graphql/resolvers/";

interface customEventRsvpStatusEditInput extends EditEventRsvpStatusInput {
  eventID: string;
  userID: string;
}

interface EventRsvpStatusEditPayload {
  event: Event;
}

export const EventRsvpStatusInputType = new GraphQLEnumType({
  name: "EventRsvpStatusInput",
  values: {
    ATTENDING: {
      value: "ATTENDING",
    },
    DECLINED: {
      value: "DECLINED",
    },
    MAYBE: {
      value: "MAYBE",
    },
  },
});

export const EventRsvpStatusEditInputType = new GraphQLInputObjectType({
  name: "EventRsvpStatusEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventID: {
      type: GraphQLNonNull(GraphQLID),
    },
    rsvpStatus: {
      type: GraphQLNonNull(EventRsvpStatusInputType),
    },
    userID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventRsvpStatusEditPayloadType = new GraphQLObjectType({
  name: "EventRsvpStatusEditPayload",
  fields: (): GraphQLFieldConfigMap<
    EventRsvpStatusEditPayload,
    RequestContext
  > => ({
    event: {
      type: GraphQLNonNull(EventType),
    },
  }),
});

export const EventRsvpStatusEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customEventRsvpStatusEditInput }
> = {
  type: GraphQLNonNull(EventRsvpStatusEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(EventRsvpStatusEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<EventRsvpStatusEditPayload> => {
    let event = await EditEventRsvpStatusAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.eventID),
      {
        rsvpStatus: convertFromGQLEnum(
          input.rsvpStatus,
          getEventRsvpStatusInputValues(),
          EventRsvpStatusInputType.getValues(),
        ) as EventRsvpStatusInput,
        userID: mustDecodeIDFromGQLID(input.userID),
      },
    );
    return { event: event };
  },
};
