/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import DeleteEventAction from "../../../../ent/event/actions/delete_event_action";

interface customEventDeleteInput {
  eventID: string;
}

interface EventDeletePayload {
  deletedEventID: string;
}

export const EventDeleteInputType = new GraphQLInputObjectType({
  name: "EventDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventDeletePayloadType = new GraphQLObjectType({
  name: "EventDeletePayload",
  fields: (): GraphQLFieldConfigMap<EventDeletePayload, RequestContext> => ({
    deletedEventID: {
      type: GraphQLID,
    },
  }),
});

export const EventDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customEventDeleteInput }
> = {
  type: GraphQLNonNull(EventDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(EventDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<EventDeletePayload> => {
    await DeleteEventAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.eventID),
    );
    return { deletedEventID: input.eventID };
  },
};
