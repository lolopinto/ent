// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { User } from "src/ent/";
import EditUserAction, {
  UserEditInput,
} from "src/ent/user/actions/edit_user_action";
import { UserType } from "src/graphql/resolvers/";

interface customUserEditInput extends UserEditInput {
  userID: string;
}

interface UserEditPayload {
  user: User;
}

export const UserEditInputType = new GraphQLInputObjectType({
  name: "UserEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    userID: {
      type: GraphQLNonNull(GraphQLID),
    },
    firstName: {
      type: GraphQLString,
    },
    lastName: {
      type: GraphQLString,
    },
  }),
});

export const UserEditPayloadType = new GraphQLObjectType({
  name: "UserEditPayload",
  fields: (): GraphQLFieldConfigMap<UserEditPayload, RequestContext> => ({
    user: {
      type: GraphQLNonNull(UserType),
    },
  }),
});

export const UserEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customUserEditInput }
> = {
  type: GraphQLNonNull(UserEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(UserEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<UserEditPayload> => {
    let user = await EditUserAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.userID),
      {
        firstName: input.firstName,
        lastName: input.lastName,
      },
    );
    return { user: user };
  },
};
