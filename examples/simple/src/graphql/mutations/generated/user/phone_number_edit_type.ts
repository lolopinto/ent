// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import { User } from "src/ent/";
import { UserType } from "src/graphql/resolvers/";
import EditPhoneNumberAction, {
  EditPhoneNumberInput,
} from "src/ent/user/actions/edit_phone_number_action";

interface customPhoneNumberEditInput extends EditPhoneNumberInput {
  userID: string;
}

interface PhoneNumberEditPayload {
  user: User;
}

export const PhoneNumberEditInputType = new GraphQLInputObjectType({
  name: "PhoneNumberEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    userID: {
      type: GraphQLNonNull(GraphQLID),
    },
    newPhoneNumber: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});

export const PhoneNumberEditPayloadType = new GraphQLObjectType({
  name: "PhoneNumberEditPayload",
  fields: (): GraphQLFieldConfigMap<
    PhoneNumberEditPayload,
    RequestContext
  > => ({
    user: {
      type: GraphQLNonNull(UserType),
    },
  }),
});

export const PhoneNumberEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customPhoneNumberEditInput }
> = {
  type: GraphQLNonNull(PhoneNumberEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(PhoneNumberEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<PhoneNumberEditPayload> => {
    let user = await EditPhoneNumberAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.userID),
      {
        newPhoneNumber: input.newPhoneNumber,
      },
    );
    return { user: user };
  },
};
