/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { transformUnionTypes } from "@snowtop/ent/graphql";
import { User } from "../../../../ent";
import CreateUserAction, {
  UserCreateInput,
} from "../../../../ent/user/actions/create_user_action";
import { UserNestedObjectListInputType } from "../input/user_nested_object_list_input_type";
import { UserPrefsDiffInputType } from "../input/user_prefs_diff_input_type";
import { UserPrefsStruct2InputType } from "../input/user_prefs_struct_2_input_type";
import { UserPrefsStructInputType } from "../input/user_prefs_struct_input_type";
import { UserSuperNestedObjectInputType } from "../input/user_super_nested_object_input_type";
import { DaysOffType, PreferredShiftType, UserType } from "../../../resolvers";

interface UserCreatePayload {
  user: User;
}

export const UserCreateInputType = new GraphQLInputObjectType({
  name: "UserCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    phoneNumber: {
      type: GraphQLNonNull(GraphQLString),
    },
    password: {
      type: GraphQLNonNull(GraphQLString),
    },
    nicknames: {
      type: GraphQLList(GraphQLNonNull(GraphQLString)),
    },
    prefs: {
      type: UserPrefsStructInputType,
    },
    prefsDiff: {
      type: UserPrefsDiffInputType,
    },
    daysOff: {
      type: GraphQLList(GraphQLNonNull(DaysOffType)),
    },
    preferredShift: {
      type: GraphQLList(GraphQLNonNull(PreferredShiftType)),
    },
    funUuids: {
      type: GraphQLList(GraphQLNonNull(GraphQLID)),
    },
    prefsList: {
      type: GraphQLList(GraphQLNonNull(UserPrefsStruct2InputType)),
    },
    superNestedObject: {
      type: UserSuperNestedObjectInputType,
    },
    nestedList: {
      type: GraphQLList(GraphQLNonNull(UserNestedObjectListInputType)),
    },
  }),
});

export const UserCreatePayloadType = new GraphQLObjectType({
  name: "UserCreatePayload",
  fields: (): GraphQLFieldConfigMap<UserCreatePayload, RequestContext> => ({
    user: {
      type: GraphQLNonNull(UserType),
    },
  }),
});

export const UserCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: UserCreateInput }
> = {
  type: GraphQLNonNull(UserCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(UserCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<UserCreatePayload> => {
    input = transformUnionTypes(input, [["superNestedObject", "union"]]);
    const user = await CreateUserAction.create(context.getViewer(), {
      firstName: input.firstName,
      lastName: input.lastName,
      emailAddress: input.emailAddress,
      phoneNumber: input.phoneNumber,
      password: input.password,
      nicknames: input.nicknames,
      prefs: input.prefs,
      prefsDiff: input.prefsDiff,
      daysOff: input.daysOff,
      preferredShift: input.preferredShift,
      funUuids: input.funUuids,
      prefsList: input.prefsList,
      superNestedObject: input.superNestedObject,
      nestedList: input.nestedList,
    }).saveX();
    return { user: user };
  },
};
