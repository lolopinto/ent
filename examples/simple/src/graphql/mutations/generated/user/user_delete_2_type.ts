/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLBoolean,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import DeleteUserAction2, {
  DeleteUserInput2,
} from "../../../../ent/user/actions/delete_user_action_2";

interface customUserDelete2Input extends DeleteUserInput2 {
  userID: string;
}

interface UserDelete2Payload {
  deletedUserID: string;
}

export const UserDelete2InputType = new GraphQLInputObjectType({
  name: "UserDelete2Input",
  fields: (): GraphQLInputFieldConfigMap => ({
    userID: {
      description: "id of User",
      type: GraphQLNonNull(GraphQLID),
    },
    log: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
  }),
});

export const UserDelete2PayloadType = new GraphQLObjectType({
  name: "UserDelete2Payload",
  fields: (): GraphQLFieldConfigMap<UserDelete2Payload, RequestContext> => ({
    deletedUserID: {
      type: GraphQLID,
    },
  }),
});

export const UserDelete2Type: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customUserDelete2Input }
> = {
  type: GraphQLNonNull(UserDelete2PayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(UserDelete2InputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<UserDelete2Payload> => {
    await DeleteUserAction2.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.userID),
      {
        log: input.log,
      },
    );
    return { deletedUserID: input.userID };
  },
};
