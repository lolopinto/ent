/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLBoolean,
  GraphQLFloat,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLList,
  GraphQLNonNull,
  GraphQLString,
} from "graphql";
import { GraphQLTime } from "@snowtop/ent/graphql";
import {
  CatBreedType,
  DogBreedGroupType,
  DogBreedType,
  EnumType,
  NestedEnumType,
  NestedNestedEnumType,
  RabbitBreedType,
} from "../../../resolvers";

const UserNestedObjectInputType = new GraphQLInputObjectType({
  name: "UserNestedObjectInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    nestedUuid: {
      type: GraphQLNonNull(GraphQLID),
    },
    nestedInt: {
      type: GraphQLNonNull(GraphQLInt),
    },
    nestedString: {
      type: GraphQLNonNull(GraphQLString),
    },
    nestedBool: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
    nestedFloat: {
      type: GraphQLFloat,
    },
    nestedEnum: {
      type: GraphQLNonNull(NestedEnumType),
    },
    nestedStringList: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString))),
    },
    nestedIntList: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLInt))),
    },
    nestedObj: {
      type: UserNestedNestedObjectInputType,
    },
  }),
});

const UserNestedNestedObjectInputType = new GraphQLInputObjectType({
  name: "UserNestedNestedObjectInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    nestedNestedUuid: {
      type: GraphQLNonNull(GraphQLID),
    },
    nestedNestedInt: {
      type: GraphQLNonNull(GraphQLInt),
    },
    nestedNestedString: {
      type: GraphQLNonNull(GraphQLString),
    },
    nestedNestedBool: {
      type: GraphQLBoolean,
    },
    nestedNestedFloat: {
      type: GraphQLNonNull(GraphQLFloat),
    },
    nestedNestedEnum: {
      type: GraphQLNonNull(NestedNestedEnumType),
    },
    nestedNestedStringList: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLString))),
    },
    nestedNestedIntList: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLInt))),
    },
  }),
});

const CatTypeInputType = new GraphQLInputObjectType({
  name: "CatTypeInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    birthday: {
      type: GraphQLNonNull(GraphQLTime),
    },
    breed: {
      type: GraphQLNonNull(CatBreedType),
    },
    kitten: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
  }),
});

const DogTypeInputType = new GraphQLInputObjectType({
  name: "DogTypeInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    birthday: {
      type: GraphQLNonNull(GraphQLTime),
    },
    breed: {
      type: GraphQLNonNull(DogBreedType),
    },
    breedGroup: {
      type: GraphQLNonNull(DogBreedGroupType),
    },
    puppy: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
  }),
});

const RabbitTypeInputType = new GraphQLInputObjectType({
  name: "RabbitTypeInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    birthday: {
      type: GraphQLNonNull(GraphQLTime),
    },
    breed: {
      type: GraphQLNonNull(RabbitBreedType),
    },
  }),
});

const PetUnionTypeInputType = new GraphQLInputObjectType({
  name: "PetUnionTypeInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    cat: {
      type: CatTypeInputType,
    },
    dog: {
      type: DogTypeInputType,
    },
    rabbit: {
      type: RabbitTypeInputType,
    },
  }),
});

export const UserSuperNestedObjectInputType = new GraphQLInputObjectType({
  name: "UserSuperNestedObjectInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    uuid: {
      type: GraphQLNonNull(GraphQLID),
    },
    int: {
      type: GraphQLNonNull(GraphQLInt),
    },
    string: {
      type: GraphQLNonNull(GraphQLString),
    },
    bool: {
      type: GraphQLNonNull(GraphQLBoolean),
    },
    float: {
      type: GraphQLNonNull(GraphQLFloat),
    },
    enum: {
      type: GraphQLNonNull(EnumType),
    },
    stringList: {
      type: GraphQLList(GraphQLNonNull(GraphQLString)),
    },
    intList: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLInt))),
    },
    obj: {
      type: UserNestedObjectInputType,
    },
    union: {
      type: PetUnionTypeInputType,
    },
  }),
});
