// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { AuthResolver, UserAuthInput, UserAuthPayload } from "../auth";

export const UserAuthInputType = new GraphQLInputObjectType({
  name: "UserAuthInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    password: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
});

export const UserAuthPayloadType = new GraphQLObjectType({
  name: "UserAuthPayload",
  fields: (): GraphQLFieldConfigMap<UserAuthPayload, RequestContext> => ({
    viewerID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const UserAuthType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: UserAuthInput }
> = {
  type: GraphQLNonNull(UserAuthPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(UserAuthInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<UserAuthPayload> => {
    const r = new AuthResolver();
    return r.userAuth(context, {
      emailAddress: input.emailAddress,
      password: input.password,
    });
  },
};
