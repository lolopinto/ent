/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  Contact,
  ContactToCommentsQuery,
  ContactToLikersQuery,
} from "../../../ent";
import {
  ContactEmailType,
  ContactPhoneNumberType,
  ContactToCommentsConnectionType,
  ContactToLikersConnectionType,
  UserType,
} from "../internal";

export const ContactType = new GraphQLObjectType({
  name: "Contact",
  fields: (): GraphQLFieldConfigMap<Contact, RequestContext> => ({
    emails: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(ContactEmailType))),
      resolve: (contact: Contact, args: {}, context: RequestContext) => {
        return contact.loadEmails();
      },
    },
    phoneNumbers: {
      type: GraphQLNonNull(GraphQLList(GraphQLNonNull(ContactPhoneNumberType))),
      resolve: (contact: Contact, args: {}, context: RequestContext) => {
        return contact.loadPhoneNumbers();
      },
    },
    user: {
      type: UserType,
      resolve: (contact: Contact, args: {}, context: RequestContext) => {
        return contact.loadUser();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    comments: {
      type: GraphQLNonNull(ContactToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (contact: Contact, args: {}, context: RequestContext) => {
        return new GraphQLEdgeConnection(
          contact.viewer,
          contact,
          (v, contact: Contact) => ContactToCommentsQuery.query(v, contact),
          args,
        );
      },
    },
    likers: {
      type: GraphQLNonNull(ContactToLikersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (contact: Contact, args: {}, context: RequestContext) => {
        return new GraphQLEdgeConnection(
          contact.viewer,
          contact,
          (v, contact: Contact) => ContactToLikersQuery.query(v, contact),
          args,
        );
      },
    },
    fullName: {
      type: GraphQLNonNull(GraphQLString),
    },
  }),
  interfaces: [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof Contact;
  },
});
