// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

enum DayOfWeekAlt {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum DaysOff {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum EventRsvpStatus {
  ATTENDING
  DECLINED
  MAYBE
  CAN_RSVP
}

enum PreferredShift {
  MORNING
  AFTERNOON
  EVENING
  GRAVEYARD
}

type Address implements Node {
  id: ID!
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String!
}

type Comment implements Node {
  article: NodeInterface
  id: ID!
  authorID: ID!
  body: String!
  post(first: Int, after: String, last: Int, before: String): CommentToPostConnection!
}

type Contact implements Node {
  user: User
  id: ID!
  emailAddress: String!
  firstName: String!
  lastName: String!
  comments(first: Int, after: String, last: Int, before: String): ContactToCommentsConnection!
  likers(first: Int, after: String, last: Int, before: String): ContactToLikersConnection!
  fullName: String!
}

type Event implements Node {
  creator: User
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  eventLocation: String!
  attending(first: Int, after: String, last: Int, before: String): EventToAttendingConnection!
  declined(first: Int, after: String, last: Int, before: String): EventToDeclinedConnection!
  hosts(first: Int, after: String, last: Int, before: String): EventToHostsConnection!
  invited(first: Int, after: String, last: Int, before: String): EventToInvitedConnection!
  maybe(first: Int, after: String, last: Int, before: String): EventToMaybeConnection!
  viewerRsvpStatus: EventRsvpStatus
}

type Holiday implements Node {
  id: ID!
  label: String!
  date: Time!
}

type HoursOfOperation implements Node {
  id: ID!
  dayOfWeek: DayOfWeek!
  open: String!
  close: String!
  dayOfWeekAlt: DayOfWeekAlt
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String
  accountStatus: String
  bio: String
  nicknames: [String!]
  prefs: JSON
  prefsList: [JSON!]
  prefsDiff: JSON
  daysOff: [DaysOff!]
  preferredShift: [PreferredShift!]
  timeInMs: String
  funUuids: [ID!]
  newCol: String
  newCol2: String
  selfContact: Contact
  comments(first: Int, after: String, last: Int, before: String): UserToCommentsConnection!
  createdEvents(first: Int, after: String, last: Int, before: String): UserToCreatedEventsConnection!
  declinedEvents(first: Int, after: String, last: Int, before: String): UserToDeclinedEventsConnection!
  eventsAttending(first: Int, after: String, last: Int, before: String): UserToEventsAttendingConnection!
  friends(first: Int, after: String, last: Int, before: String): UserToFriendsConnection!
  invitedEvents(first: Int, after: String, last: Int, before: String): UserToInvitedEventsConnection!
  likers(first: Int, after: String, last: Int, before: String): UserToLikersConnection!
  likes(first: Int, after: String, last: Int, before: String): UserToLikesConnection!
  maybeEvents(first: Int, after: String, last: Int, before: String): UserToMaybeEventsConnection!
  userToHostedEvents(first: Int, after: String, last: Int, before: String): UserToHostedEventsConnection!
  contacts(first: Int, after: String, last: Int, before: String): UserToContactsConnection!
  fullName: String!
  bar: String
  contactSameDomain: Contact
  contactsSameDomain: [Contact!]!
  contactsSameDomainNullable: [Contact!]
  contactsSameDomainNullableContents: [Contact]!
  contactsSameDomainNullableContentsAndList: [Contact]
}

type CommentToPostEdge implements Edge {
  node: Node!
  cursor: String!
}

type CommentToPostConnection implements Connection {
  edges: [CommentToPostEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type ContactToCommentsConnection implements Connection {
  edges: [ContactToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type ContactToLikersConnection implements Connection {
  edges: [ContactToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToAttendingEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToAttendingConnection implements Connection {
  edges: [EventToAttendingEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToDeclinedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToDeclinedConnection implements Connection {
  edges: [EventToDeclinedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToHostsEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToHostsConnection implements Connection {
  edges: [EventToHostsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToInvitedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToInvitedConnection implements Connection {
  edges: [EventToInvitedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToMaybeEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToMaybeConnection implements Connection {
  edges: [EventToMaybeEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type UserToCommentsConnection implements Connection {
  edges: [UserToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToContactsEdge implements Edge {
  node: Contact!
  cursor: String!
}

type UserToContactsConnection implements Connection {
  edges: [UserToContactsEdge!]!
  nodes: [Contact!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToCreatedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToCreatedEventsConnection implements Connection {
  edges: [UserToCreatedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToDeclinedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToDeclinedEventsConnection implements Connection {
  edges: [UserToDeclinedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToEventsAttendingEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToEventsAttendingConnection implements Connection {
  edges: [UserToEventsAttendingEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToFriendsEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToFriendsConnection implements Connection {
  edges: [UserToFriendsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToHostedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToHostedEventsConnection implements Connection {
  edges: [UserToHostedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToInvitedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToInvitedEventsConnection implements Connection {
  edges: [UserToInvitedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToLikersConnection implements Connection {
  edges: [UserToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToLikesEdge implements Edge {
  node: Node!
  cursor: String!
}

type UserToLikesConnection implements Connection {
  edges: [UserToLikesEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToMaybeEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToMaybeEventsConnection implements Connection {
  edges: [UserToMaybeEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type Viewer {
  viewerID: ID
  user: User
}

type UserAuthInput {
  emailAddress: String!
  password: String!
}

type UserAuthJWTInput {
  emailAddress: String!
  password: String!
}

type UserAuthJWTPayload {
  token: String!
  viewerID: ID!
}

type UserAuthPayload {
  viewerID: ID!
}

type AddressCreateInput {
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String
}

type AddressCreatePayload {
  address: Address!
}

type CommentCreateInput {
  authorID: ID!
  body: String!
  articleID: ID!
  articleType: String!
}

type CommentCreatePayload {
  comment: Comment!
}

type ConfirmEmailAddressEditInput {
  """id of User"""
  userID: ID!
  emailAddress: String!
  code: String!
}

type ConfirmEmailAddressEditPayload {
  user: User!
}

type ConfirmPhoneNumberEditInput {
  """id of User"""
  userID: ID!
  phoneNumber: String!
  code: String!
}

type ConfirmPhoneNumberEditPayload {
  user: User!
}

type ContactCreateInput {
  emailAddress: String!
  firstName: String!
  lastName: String!
  userID: ID!
}

type ContactCreatePayload {
  contact: Contact!
}

type ContactDeleteInput {
  """id of Contact"""
  contactID: ID!
}

type ContactDeletePayload {
  deletedContactID: ID
}

type ContactEditInput {
  """id of Contact"""
  contactID: ID!
  emailAddress: String
  firstName: String
  lastName: String
  userID: ID
}

type ContactEditPayload {
  contact: Contact!
}

type EmailAddressEditInput {
  """id of User"""
  userID: ID!
  newEmail: String!
}

type EmailAddressEditPayload {
  user: User!
}

type EventAddHostInput {
  """id of Event"""
  eventID: ID!
  hostID: ID!
}

type EventAddHostPayload {
  event: Event!
}

type EventCreateInput {
  name: String!
  creatorID: ID!
  startTime: Time!
  endTime: Time
  eventLocation: String!
}

type EventCreatePayload {
  event: Event!
}

type EventDeleteInput {
  """id of Event"""
  eventID: ID!
}

type EventDeletePayload {
  deletedEventID: ID
}

type EventEditInput {
  """id of Event"""
  eventID: ID!
  name: String
  creatorID: ID
  startTime: Time
  endTime: Time
  eventLocation: String
}

type EventEditPayload {
  event: Event!
}

type EventRemoveHostInput {
  """id of Event"""
  eventID: ID!
  hostID: ID!
}

type EventRemoveHostPayload {
  event: Event!
}

type EventRsvpStatusEditInput {
  """id of Event"""
  eventID: ID!
  rsvpStatus: EventRsvpStatusInput!
  userID: ID!
}

type EventRsvpStatusEditPayload {
  event: Event!
}

enum EventRsvpStatusInput {
  ATTENDING
  DECLINED
  MAYBE
}

type HolidayCreateInput {
  label: String!
  date: Time!
}

type HolidayCreatePayload {
  holiday: Holiday!
}

type HoursOfOperationCreateInput {
  dayOfWeek: DayOfWeek!
  open: String!
  close: String!
  dayOfWeekAlt: DayOfWeekAlt
}

type HoursOfOperationCreatePayload {
  hoursOfOperation: HoursOfOperation!
}

type PhoneNumberEditInput {
  """id of User"""
  userID: ID!
  newPhoneNumber: String!
}

type PhoneNumberEditPayload {
  user: User!
}

type UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String!
  password: String!
  nicknames: [String!]
  prefs: JSON
  prefsDiff: JSON
  daysOff: [DaysOff!]
  preferredShift: [PreferredShift!]
  funUuids: [ID!]
  prefsList: [JSON!]
}

type UserCreatePayload {
  user: User!
}

type UserDeleteInput {
  """id of User"""
  userID: ID!
}

type UserDeletePayload {
  deletedUserID: ID
}

type UserEditInput {
  """id of User"""
  userID: ID!
  firstName: String
  lastName: String
}

type UserEditPayload {
  user: User!
}

