# Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

"""node interface"""
interface Node {
  id: ID!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum CatBreed {
  BENGAL
  BURMESE
  HIMALAYAN
  SOMALI
  PERSIAN
  SIAMESE
  TABBY
  OTHER
  UNKNOWN
}

enum CommentSortColumn {
  ARTICLE_ID
  ATTACHMENT_ID
  AUTHOR_ID
  ID
}

enum ContactEmailSortColumn {
  ID
}

enum ContactInfoSource {
  FRIEND
  WORK
  ONLINE
  UNKNOWN
}

enum ContactLabel {
  WORK
  HOME
  DEFAULT
  UNKNOWN
  SELF
}

enum ContactPhoneNumberSortColumn {
  ID
}

enum ContactSortColumn {
  EMAIL_IDS
  ID
  PHONE_NUMBER_IDS
}

enum DayOfWeekAlt {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  UNKNOWN
  WEDNESDAY
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  UNKNOWN
}

enum DogBreedGroup {
  SPORTING
  HOUND
  WORKING
  TERRIER
  TOY
  NON_SPORTING
  HERDING
  UNKNOWN
}

enum DogBreed {
  GERMAN_SHEPHERD
  LABRADOR
  POMERIAN
  SIBERIAN_HUSKY
  POODLE
  GOLDEN_RETRIEVER
  OTHER
  UNKNOWN
}

enum EventRsvpStatus {
  ATTENDING
  DECLINED
  MAYBE
  CAN_RSVP
  UNKNOWN
}

enum EventSortColumn {
  CREATOR_ID
  ID
}

enum FileSortColumn {
  ID
}

enum HolidaySortColumn {
  ID
}

enum HoursOfOperationSortColumn {
  ID
}

enum IntEnumUsedInList {
  UNKNOWN
  YES
  NO
  MAYBE
}

enum NotifType {
  MOBILE
  WEB
  EMAIL
  UNKNOWN
}

enum RabbitBreed {
  AMERICAN_RABBIT
  AMERICAN_CHINCILLA
  AMERICAN_FUZZY_LOP
  AMERICAN_SABLE
  ARGENTE_BRUN
  BELGIAN_HARE
  BEVEREN
  OTHER
  UNKNOWN
}

enum ResponseType {
  YES
  NO
  MAYBE
  UNKNOWN
}

enum UserAccountStatus {
  UNVERIFIED
  VERIFIED
  DEACTIVATED
  DISABLED
  UNKNOWN
}

enum UserDaysOff {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum UserIntEnum {
  VERIFIED
  UNVERIFIED
  DISABLED
  DEACTIVATED
}

enum UserPreferredShift {
  MORNING
  AFTERNOON
  EVENING
  GRAVEYARD
  UNKNOWN
}

enum UserSortColumn {
  ID
}

enum UserStatisticsSortColumn {
  ID
  USER_ID
}

type Address implements Node {
  id: ID!
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String!
  hostedEvents(first: Int, after: String, last: Int, before: String): AddressToHostedEventsConnection!
}

type Attachment {
  fileId: ID!
  dupeFileId: ID
  note: String
  date: Date!
  phoneNumber: String
  emailAddress: String
}

type CatType {
  name: String!
  birthday: Date!
  breed: CatBreed!
  kitten: Boolean!
}

type City {
  name: String!
  population: Int!
}

type Comment implements Node {
  article: Node
  attachment: Node
  author: User
  sticker: Node
  id: ID!
  body: String!
  post(first: Int, after: String, last: Int, before: String): CommentToPostConnection!
  articles(first: Int, after: String, last: Int, before: String): CommentArticleToCommentsConnection!
}

type ContactDate implements ContactItemType {
  contact: Contact
  label: ContactLabel!
  date: Date!
  description: String!
}

type ContactEmailCanViewerDo {
  contactEmailEdit: Boolean!
}

type ContactEmail implements Node & ContactItemType {
  contact: Contact
  id: ID!
  extra: ContactInfo
  emailAddress: String!
  label: ContactLabel!
  comments(first: Int, after: String, last: Int, before: String): ContactEmailToCommentsConnection!
  likers(first: Int, after: String, last: Int, before: String): ContactEmailToLikersConnection!
  canViewerDo: ContactEmailCanViewerDo!
}

type ContactInfo {
  default: Boolean!
  source: ContactInfoSource!
}

input ContactItemFilter {
  emailDomain: String
  phoneNumberAreaCode: String
}

union ContactItemResult = ContactEmail | ContactPhoneNumber | ContactDate

interface ContactItem {
  contact: Contact
  label: ContactLabel!
}

type ContactPhoneNumber implements Node & ContactItemType {
  contact: Contact
  id: ID!
  extra: ContactInfo
  phoneNumber: String!
  label: ContactLabel!
  comments(first: Int, after: String, last: Int, before: String): ContactPhoneNumberToCommentsConnection!
  likers(first: Int, after: String, last: Int, before: String): ContactPhoneNumberToLikersConnection!
}

type Contact implements Node {
  emails: [ContactEmail!]!
  phoneNumbers: [ContactPhoneNumber!]!
  user: User
  id: ID!
  firstName: String!
  lastName: String!
  attachments: [Attachment!]
  comments(first: Int, after: String, last: Int, before: String): ContactToCommentsConnection!
  likers(first: Int, after: String, last: Int, before: String): ContactToLikersConnection!
  attachedComments(first: Int, after: String, last: Int, before: String): ContactCommentsFromAttachmentConnection!
  fullName: String!
  plusEmails: EmailInfo!
  contactItems(filter: ContactItemFilter): [ContactItemResult!]!
  filterContactEmails(filter: ContactItemFilter, first: Int, after: String, last: Int, before: String): ContactToFilterContactEmailsConnection!
}

type DogType {
  name: String!
  birthday: Date!
  breed: DogBreed!
  breedGroup: DogBreedGroup!
  puppy: Boolean!
}

type EmailInfo {
  emails: [ContactEmail!]!
  firstEmail: String!
}

type EventCanViewerSee {
  address: Boolean!
}

type Event implements Node {
  address: Address
  creator: User
  id: ID!
  name: String!
  startTime: Date!
  endTime: Date
  eventLocation: String!
  coverPhoto: Byte
  coverPhoto2: Byte
  attachments: [Attachment!]
  attending(first: Int, after: String, last: Int, before: String): EventToAttendingConnection!
  declined(first: Int, after: String, last: Int, before: String): EventToDeclinedConnection!
  hosts(first: Int, after: String, last: Int, before: String): EventToHostsConnection!
  invited(first: Int, after: String, last: Int, before: String): EventToInvitedConnection!
  maybe(first: Int, after: String, last: Int, before: String): EventToMaybeConnection!
  viewerRsvpStatus: EventRsvpStatus!
  canViewerSeeInfo: EventCanViewerSee!
  cities: [City!]!
}

type File implements Node {
  creator: User
  id: ID!
  name: String!
  path: String!
}

type GlobalCanViewerDo {
  contactCreate(userId: ID!): Boolean!
  contactEmailCreate(extra: ContactInfoInput, emailAddress: String!, label: ContactLabel!, contactId: ID!): Boolean!
}

type Holiday implements Node {
  id: ID!
  dayOfWeek: DayOfWeek!
  dayOfWeekAlt: DayOfWeekAlt!
  label: String!
  date: Date!
}

type HoursOfOperation implements Node {
  id: ID!
  dayOfWeek: DayOfWeek!
  dayOfWeekAlt: DayOfWeekAlt
  open: String!
  close: String!
}

union PetUnionType = CatType | DogType | RabbitType

type RabbitType {
  name: String!
  birthday: Date!
  breed: RabbitBreed!
}

type UserCanViewerDo {
  userEdit: Boolean!
}

type UserCanViewerEdit {
  accountStatus: Boolean!
}

type UserCanViewerSee {
  accountStatus: Boolean!
  prefs: Boolean!
  prefsList: Boolean!
  prefsDiff: Boolean!
}

type UserNestedNestedObjectList {
  int: Int!
}

type UserNestedNestedObject {
  nestedNestedUuid: ID!
  nestedNestedInt: Int!
  nestedNestedString: String!
  nestedNestedBool: Boolean
  nestedNestedFloat: Float!
  nestedNestedEnum: ResponseType!
  nestedNestedStringList: [String!]!
  nestedNestedIntList: [Int!]!
}

type UserNestedObjectList {
  type: String!
  enum: ResponseType!
  objects: [UserNestedNestedObjectList!]!
  enumList: [IntEnumUsedInList!]!
}

type UserNestedObject {
  nestedUuid: ID!
  nestedInt: Int!
  nestedString: String!
  nestedBool: Boolean!
  nestedFloat: Float
  nestedEnum: ResponseType!
  nestedStringList: [String!]!
  nestedIntList: [Int!]!
  nestedObj: UserNestedNestedObject
}

type UserPrefsDiff {
  type: String!
}

type UserPrefsStruct {
  finishedNux: Boolean
  enableNotifs: Boolean
  notifTypes: [NotifType!]!
}

type UserStatistics implements Node {
  user: User
  id: ID!
  authCodeEmailsSent: Int!
}

type UserSuperNestedObject {
  uuid: ID!
  int: Int!
  string: String!
  bool: Boolean!
  float: Float!
  enum: ResponseType!
  stringList: [String!]
  intList: [Int!]!
  obj: UserNestedObject
  union: PetUnionType
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String
  accountStatus: UserAccountStatus
  bio: String
  nicknames: [String!]
  prefs: UserPrefsStruct
  prefsList: [UserPrefsStruct!]
  prefsDiff: UserPrefsDiff
  daysOff: [UserDaysOff!]
  preferredShift: [UserPreferredShift!]
  timeInMs: String
  funUuids: [ID!]
  superNestedObject: UserSuperNestedObject
  nestedList: [UserNestedObjectList!]
  intEnum: UserIntEnum
  selfContact: Contact
  comments(first: Int, after: String, last: Int, before: String): UserToCommentsConnection!
  createdEvents(first: Int, after: String, last: Int, before: String): UserToCreatedEventsConnection!
  declinedEvents(first: Int, after: String, last: Int, before: String): UserToDeclinedEventsConnection!
  eventsAttending(first: Int, after: String, last: Int, before: String): UserToEventsAttendingConnection!
  friends(first: Int, after: String, last: Int, before: String): UserToFriendsConnection!
  invitedEvents(first: Int, after: String, last: Int, before: String): UserToInvitedEventsConnection!
  likers(first: Int, after: String, last: Int, before: String): UserToLikersConnection!
  likes(first: Int, after: String, last: Int, before: String): UserToLikesConnection!
  maybeEvents(first: Int, after: String, last: Int, before: String): UserToMaybeEventsConnection!
  userToHostedEvents(first: Int, after: String, last: Int, before: String): UserToHostedEventsConnection!
  contacts(first: Int, after: String, last: Int, before: String): UserToContactsConnection!
  articles(first: Int, after: String, last: Int, before: String): UserArticleToCommentsConnection!
  attachedComments(first: Int, after: String, last: Int, before: String): UserCommentsFromAttachmentConnection!
  commentsFromUser(first: Int, after: String, last: Int, before: String): AuthorToCommentsConnection!
  eventsCreated(first: Int, after: String, last: Int, before: String): CreatorToEventsConnection!
  canViewerSeeInfo: UserCanViewerSee!
  canViewerEditInfo: UserCanViewerEdit!
  canViewerDo: UserCanViewerDo!
  fullName: String!
  bar: String
  """contacts same domain..."""
  contactSameDomain: Contact
  contactsSameDomain: [Contact!]!
  contactsGivenDomain(domain: String!): [Contact!]!
  contactsSameDomainNullable: [Contact!]
  contactsSameDomainNullableContents: [Contact]!
  contactsSameDomainNullableContentsAndList: [Contact]
  commentsAuthored(first: Int, after: String, last: Int, before: String): UserToCommentsAuthoredConnection!
  cities: [City!]!
}

type AddressToHostedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type AddressToHostedEventsConnection implements Connection {
  edges: [AddressToHostedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type AuthorToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type AuthorToCommentsConnection implements Connection {
  edges: [AuthorToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type CommentArticleToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type CommentArticleToCommentsConnection implements Connection {
  edges: [CommentArticleToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type CommentToPostEdge implements Edge {
  node: Node!
  cursor: String!
}

type CommentToPostConnection implements Connection {
  edges: [CommentToPostEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactCommentsFromAttachmentEdge implements Edge {
  node: Comment!
  cursor: String!
}

type ContactCommentsFromAttachmentConnection implements Connection {
  edges: [ContactCommentsFromAttachmentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactEmailToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type ContactEmailToCommentsConnection implements Connection {
  edges: [ContactEmailToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactEmailToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type ContactEmailToLikersConnection implements Connection {
  edges: [ContactEmailToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactPhoneNumberToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type ContactPhoneNumberToCommentsConnection implements Connection {
  edges: [ContactPhoneNumberToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactPhoneNumberToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type ContactPhoneNumberToLikersConnection implements Connection {
  edges: [ContactPhoneNumberToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type ContactToCommentsConnection implements Connection {
  edges: [ContactToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactToFilterContactEmailsEdge implements Edge {
  node: ContactEmail!
  cursor: String!
}

type ContactToFilterContactEmailsConnection implements Connection {
  edges: [ContactToFilterContactEmailsEdge!]!
  nodes: [ContactEmail!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type ContactToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type ContactToLikersConnection implements Connection {
  edges: [ContactToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type CreatorToEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type CreatorToEventsConnection implements Connection {
  edges: [CreatorToEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToAttendingEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToAttendingConnection implements Connection {
  edges: [EventToAttendingEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToDeclinedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToDeclinedConnection implements Connection {
  edges: [EventToDeclinedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToHostsEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToHostsConnection implements Connection {
  edges: [EventToHostsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToInvitedEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToInvitedConnection implements Connection {
  edges: [EventToInvitedEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToMaybeEdge implements Edge {
  node: User!
  cursor: String!
}

type EventToMaybeConnection implements Connection {
  edges: [EventToMaybeEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToCommentEdge implements Edge {
  node: Comment!
  cursor: String!
}

type RootToCommentConnection implements Connection {
  edges: [RootToCommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToContactEdge implements Edge {
  node: Contact!
  cursor: String!
}

type RootToContactConnection implements Connection {
  edges: [RootToContactEdge!]!
  nodes: [Contact!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToContactEmailEdge implements Edge {
  node: ContactEmail!
  cursor: String!
}

type RootToContactEmailConnection implements Connection {
  edges: [RootToContactEmailEdge!]!
  nodes: [ContactEmail!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToContactPhoneNumberEdge implements Edge {
  node: ContactPhoneNumber!
  cursor: String!
}

type RootToContactPhoneNumberConnection implements Connection {
  edges: [RootToContactPhoneNumberEdge!]!
  nodes: [ContactPhoneNumber!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToEventEdge implements Edge {
  node: Event!
  cursor: String!
}

type RootToEventConnection implements Connection {
  edges: [RootToEventEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToFileEdge implements Edge {
  node: File!
  cursor: String!
}

type RootToFileConnection implements Connection {
  edges: [RootToFileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToHolidayEdge implements Edge {
  node: Holiday!
  cursor: String!
}

type RootToHolidayConnection implements Connection {
  edges: [RootToHolidayEdge!]!
  nodes: [Holiday!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToHoursOfOperationEdge implements Edge {
  node: HoursOfOperation!
  cursor: String!
}

type RootToHoursOfOperationConnection implements Connection {
  edges: [RootToHoursOfOperationEdge!]!
  nodes: [HoursOfOperation!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToUserEdge implements Edge {
  node: User!
  cursor: String!
}

type RootToUserConnection implements Connection {
  edges: [RootToUserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type RootToUserStatisticsEdge implements Edge {
  node: UserStatistics!
  cursor: String!
}

type RootToUserStatisticsConnection implements Connection {
  edges: [RootToUserStatisticsEdge!]!
  nodes: [UserStatistics!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserArticleToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type UserArticleToCommentsConnection implements Connection {
  edges: [UserArticleToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserCommentsFromAttachmentEdge implements Edge {
  node: Comment!
  cursor: String!
}

type UserCommentsFromAttachmentConnection implements Connection {
  edges: [UserCommentsFromAttachmentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToCommentsAuthoredEdge implements Edge {
  node: Comment!
  cursor: String!
}

type UserToCommentsAuthoredConnection implements Connection {
  edges: [UserToCommentsAuthoredEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToCommentsEdge implements Edge {
  node: Comment!
  cursor: String!
}

type UserToCommentsConnection implements Connection {
  edges: [UserToCommentsEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToContactsEdge implements Edge {
  node: Contact!
  cursor: String!
}

type UserToContactsConnection implements Connection {
  edges: [UserToContactsEdge!]!
  nodes: [Contact!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToCreatedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToCreatedEventsConnection implements Connection {
  edges: [UserToCreatedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToDeclinedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToDeclinedEventsConnection implements Connection {
  edges: [UserToDeclinedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToEventsAttendingEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToEventsAttendingConnection implements Connection {
  edges: [UserToEventsAttendingEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToFriendsEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToFriendsConnection implements Connection {
  edges: [UserToFriendsEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToHostedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToHostedEventsConnection implements Connection {
  edges: [UserToHostedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToInvitedEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToInvitedEventsConnection implements Connection {
  edges: [UserToInvitedEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToLikersEdge implements Edge {
  node: User!
  cursor: String!
}

type UserToLikersConnection implements Connection {
  edges: [UserToLikersEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToLikesEdge implements Edge {
  node: Node!
  cursor: String!
  time: Date!
}

type UserToLikesConnection implements Connection {
  edges: [UserToLikesEdge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type UserToMaybeEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type UserToMaybeEventsConnection implements Connection {
  edges: [UserToMaybeEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type Viewer {
  """the id of the viewer"""
  viewerID: ID
  user: User
  defaultUserPrefs: UserPrefsStruct!
}

input UserAuthInput {
  """email address of the user"""
  emailAddress: String!
  """password of the user"""
  password: String!
}

input UserAuthJWTInput {
  emailAddress: String!
  password: String!
}

type UserAuthJWTPayload {
  token: String!
  viewerID: ID!
}

type UserAuthPayload {
  viewerID: ID!
}

input AddressCreateInput {
  streetName: String!
  city: String!
  state: String!
  zip: String!
  apartment: String
  country: String
}

type AddressCreatePayload {
  address: Address!
}

input AttachmentInput {
  fileId: ID!
  dupeFileId: ID
  note: String
  date: Date!
  phoneNumber: String
  emailAddress: String
}

input CatTypeInput {
  name: String!
  birthday: Date!
  breed: CatBreed!
  kitten: Boolean!
}

input ClearEventRsvpStatusInput {
  """id of Event"""
  id: ID!
  userId: ID!
}

type ClearEventRsvpStatusPayload {
  event: Event!
}

input CommentArgInput {
  id: ID
  ids: [ID!]
}

input CommentCreateInput {
  authorId: ID!
  body: String!
  articleId: ID!
  articleType: String!
  attachmentId: ID
  attachmentType: String
  stickerId: ID
  stickerType: String
}

type CommentCreatePayload {
  comment: Comment!
}

input CommentEditInput {
  """id of Comment"""
  id: ID!
  body: String
  articleId: ID
  articleType: String
  attachmentId: ID
  attachmentType: String
  stickerId: ID
  stickerType: String
}

type CommentEditPayload {
  comment: Comment!
}

input ConfirmEditEmailAddressInput {
  """id of User"""
  id: ID!
  emailAddress: String!
  code: String!
}

type ConfirmEditEmailAddressPayload {
  user: User!
}

input ConfirmEditPhoneNumberInput {
  """id of User"""
  id: ID!
  phoneNumber: String!
  code: String!
}

type ConfirmEditPhoneNumberPayload {
  user: User!
}

input ContactArgInput {
  id: ID
  ids: [ID!]
}

input ContactCreateInput {
  firstName: String!
  lastName: String!
  userId: ID!
  attachments: [AttachmentInput!]
  emails: [EmailContactCreateInput!]
  phoneNumbers: [PhoneNumberContactCreateInput!]
}

type ContactCreatePayload {
  contact: Contact!
}

input ContactDeleteInput {
  """id of Contact"""
  id: ID!
}

type ContactDeletePayload {
  deletedContactId: ID
}

input ContactEditInput {
  """id of Contact"""
  id: ID!
  emailIds: [ID!]
  phoneNumberIds: [ID!]
  firstName: String
  lastName: String
  attachments: [AttachmentInput!]
  emails: [EmailContactEditInput!]
}

type ContactEditPayload {
  contact: Contact!
}

input ContactEmailArgInput {
  id: ID
  ids: [ID!]
}

input ContactEmailCreateInput {
  extra: ContactInfoInput
  emailAddress: String!
  label: ContactLabel!
  contactId: ID!
}

type ContactEmailCreatePayload {
  contactEmail: ContactEmail!
}

input ContactEmailDeleteInput {
  """id of ContactEmail"""
  id: ID!
}

type ContactEmailDeletePayload {
  deletedContactEmailId: ID
}

input ContactEmailEditInput {
  """id of ContactEmail"""
  id: ID!
  extra: ContactInfoInput
  emailAddress: String
  label: ContactLabel
}

type ContactEmailEditPayload {
  contactEmail: ContactEmail!
}

input ContactInfoInput {
  default: Boolean!
  source: ContactInfoSource!
}

input ContactPhoneNumberArgInput {
  id: ID
  ids: [ID!]
}

input ContactPhoneNumberCreateInput {
  extra: ContactInfoInput
  phoneNumber: String!
  label: ContactLabel!
  contactId: ID!
}

type ContactPhoneNumberCreatePayload {
  contactPhoneNumber: ContactPhoneNumber!
}

input ContactPhoneNumberDeleteInput {
  """id of ContactPhoneNumber"""
  id: ID!
}

type ContactPhoneNumberDeletePayload {
  deletedContactPhoneNumberId: ID
}

input ContactPhoneNumberEditInput {
  """id of ContactPhoneNumber"""
  id: ID!
  extra: ContactInfoInput
  phoneNumber: String
  label: ContactLabel
}

type ContactPhoneNumberEditPayload {
  contactPhoneNumber: ContactPhoneNumber!
}

input CustomEditHolidayInput {
  """id of Holiday"""
  id: ID!
  dayOfWeek: DayOfWeek
  dayOfWeekAlt: DayOfWeekAlt
  label: String
  date: Date
}

type CustomEditHolidayPayload {
  holiday: Holiday
}

type DeleteUserInput2Payload {
  deletedUserId: ID
}

input DeleteUserInput2 {
  """id of User"""
  id: ID!
  log: Boolean!
}

input DogTypeInput {
  name: String!
  birthday: Date!
  breed: DogBreed!
  breedGroup: DogBreedGroup!
  puppy: Boolean!
}

input EditEmailAddressInput {
  """id of User"""
  id: ID!
  newEmail: String!
}

type EditEmailAddressPayload {
  user: User!
}

input EditPhoneNumberInput {
  """id of User"""
  id: ID!
  newPhoneNumber: String!
}

type EditPhoneNumberPayload {
  user: User!
}

input EmailContactCreateInput {
  extra: ContactInfoInput
  emailAddress: String!
  label: ContactLabel!
}

input EmailContactEditInput {
  id: ID!
  extra: ContactInfoInput
  emailAddress: String!
  label: ContactLabel!
}

input EventAddHostInput {
  """id of Event"""
  id: ID!
  hostId: ID!
}

type EventAddHostPayload {
  event: Event!
}

input EventArgInput {
  id: ID
  ids: [ID!]
}

input EventCreateInput {
  name: String!
  creatorId: ID!
  startTime: Date!
  endTime: Date
  eventLocation: String!
  addressId: ID
  coverPhoto: Byte
  coverPhoto2: Byte
  attachments: [AttachmentInput!]
}

type EventCreatePayload {
  event: Event!
}

input EventDeleteInput {
  """id of Event"""
  id: ID!
}

type EventDeletePayload {
  deletedEventId: ID
}

input EventEditInput {
  """id of Event"""
  id: ID!
  name: String
  startTime: Date
  endTime: Date
  eventLocation: String
  addressId: ID
  coverPhoto: Byte
  coverPhoto2: Byte
  attachments: [AttachmentInput!]
}

type EventEditPayload {
  event: Event!
}

input EventRemoveHostInput {
  """id of Event"""
  id: ID!
  hostId: ID!
}

type EventRemoveHostPayload {
  event: Event!
}

input EventRsvpStatusEditInput {
  """id of Event"""
  id: ID!
  rsvpStatus: EventRsvpStatusInput!
  userId: ID!
}

type EventRsvpStatusEditPayload {
  event: Event!
}

enum EventRsvpStatusInput {
  ATTENDING
  DECLINED
  MAYBE
  UNKNOWN
}

input FileArgInput {
  id: ID
  ids: [ID!]
}

input FileCreateInput {
  name: String!
  path: String!
  creatorId: ID!
}

type FileCreatePayload {
  file: File!
}

input FileDeleteInput {
  """id of File"""
  id: ID!
}

type FileDeletePayload {
  deletedFileId: ID
}

input FileEditInput {
  """id of File"""
  id: ID!
  name: String
  path: String
  creatorId: ID
}

type FileEditPayload {
  file: File!
}

input HolidayArgInput {
  id: ID
  ids: [ID!]
}

input HolidayCreateInput {
  dayOfWeek: DayOfWeek!
  dayOfWeekAlt: DayOfWeekAlt!
  label: String!
  date: Date
  log: JSON
}

type HolidayCreatePayload {
  holiday: Holiday!
}

input HoursOfOperationArgInput {
  id: ID
  ids: [ID!]
}

input HoursOfOperationCreateInput {
  dayOfWeek: DayOfWeek!
  dayOfWeekAlt: DayOfWeekAlt
  open: String!
  close: String!
}

type HoursOfOperationCreatePayload {
  hoursOfOperation: HoursOfOperation!
}

input PetUnionTypeInput {
  cat: CatTypeInput
  dog: DogTypeInput
  rabbit: RabbitTypeInput
}

input PhoneNumberContactCreateInput {
  extra: ContactInfoInput
  phoneNumber: String!
  label: ContactLabel!
}

input RabbitTypeInput {
  name: String!
  birthday: Date!
  breed: RabbitBreed!
}

input UserArgInput {
  id: ID
  ids: [ID!]
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  phoneNumber: String!
  password: String!
  nicknames: [String!]
  prefs: UserPrefsStructInput
  prefsDiff: UserPrefsDiffInput
  daysOff: [UserDaysOff!]
  preferredShift: [UserPreferredShift!]
  funUuids: [ID!]
  prefsList: [UserPrefsStructInput!]
  superNestedObject: UserSuperNestedObjectInput
  nestedList: [UserNestedObjectListInput!]
  intEnum: UserIntEnum
  accountStatusOverride: String
}

type UserCreatePayload {
  user: User!
}

input UserDeleteInput {
  """id of User"""
  id: ID!
}

type UserDeletePayload {
  deletedUserId: ID
}

input UserEditInput {
  """id of User"""
  id: ID!
  firstName: String
  lastName: String
}

type UserEditPayload {
  user: User!
}

input UserNestedNestedObjectInput {
  nestedNestedUuid: ID!
  nestedNestedInt: Int!
  nestedNestedString: String!
  nestedNestedBool: Boolean
  nestedNestedFloat: Float!
  nestedNestedEnum: ResponseType!
  nestedNestedStringList: [String!]!
  nestedNestedIntList: [Int!]!
}

input UserNestedNestedObjectListInput {
  int: Int!
}

input UserNestedObjectInput {
  nestedUuid: ID!
  nestedInt: Int!
  nestedString: String!
  nestedBool: Boolean!
  nestedFloat: Float
  nestedEnum: ResponseType!
  nestedStringList: [String!]!
  nestedIntList: [Int!]!
  nestedObj: UserNestedNestedObjectInput
}

input UserNestedObjectListInput {
  type: String!
  enum: ResponseType!
  objects: [UserNestedNestedObjectListInput!]!
  enumList: [IntEnumUsedInList!]!
}

input UserPrefsDiffInput {
  type: String!
}

input UserPrefsStructInput {
  finishedNux: Boolean
  enableNotifs: Boolean
  notifTypes: [NotifType!]!
}

input UserStatisticsArgInput {
  id: ID
  ids: [ID!]
}

input UserStatisticsCreateInput {
  userId: ID!
  authCodeEmailsSent: Int
}

type UserStatisticsCreatePayload {
  userStatistics: UserStatistics!
}

input UserStatisticsDeleteInput {
  """id of UserStatistics"""
  id: ID!
}

type UserStatisticsDeletePayload {
  deletedUserStatisticsId: ID
}

input UserStatisticsEditInput {
  """id of UserStatistics"""
  id: ID!
  authCodeEmailsSent: Int
}

type UserStatisticsEditPayload {
  userStatistics: UserStatistics!
}

input UserSuperNestedObjectInput {
  uuid: ID!
  int: Int!
  string: String!
  bool: Boolean!
  float: Float!
  enum: ResponseType!
  stringList: [String!]
  intList: [Int!]!
  obj: UserNestedObjectInput
  union: PetUnionTypeInput
}

type Query {
  can_viewer_do: GlobalCanViewerDo
  """custom query for comment. connection"""
  comment_connection(ids: [ID!], sortCol: CommentSortColumn, query: CommentArgInput, first: Int, after: String, last: Int, before: String): RootToCommentConnection!
  """custom query for comment. list"""
  comment_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [Comment!]!
  """custom query for contact. connection"""
  contact_connection(ids: [ID!], sortCol: ContactSortColumn, query: ContactArgInput, first: Int, after: String, last: Int, before: String): RootToContactConnection!
  """custom query for contact_email. connection"""
  contact_email_connection(ids: [ID!], sortCol: ContactEmailSortColumn, query: ContactEmailArgInput, first: Int, after: String, last: Int, before: String): RootToContactEmailConnection!
  """custom query for contact_email. list"""
  contact_email_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [ContactEmail!]!
  """custom query for contact. list"""
  contact_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [Contact!]!
  """custom query for contact_phone_number. connection"""
  contact_phone_number_connection(ids: [ID!], sortCol: ContactPhoneNumberSortColumn, query: ContactPhoneNumberArgInput, first: Int, after: String, last: Int, before: String): RootToContactPhoneNumberConnection!
  """custom query for contact_phone_number. list"""
  contact_phone_number_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [ContactPhoneNumber!]!
  """custom query for event. connection"""
  event_connection(ids: [ID!], sortCol: EventSortColumn, query: EventArgInput, first: Int, after: String, last: Int, before: String): RootToEventConnection!
  """custom query for event. list"""
  event_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [Event!]!
  """custom query for file. connection"""
  file_connection(ids: [ID!], sortCol: FileSortColumn, query: FileArgInput, first: Int, after: String, last: Int, before: String): RootToFileConnection!
  """custom query for file. list"""
  file_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [File!]!
  """custom query for holiday. connection"""
  holiday_connection(ids: [ID!], sortCol: HolidaySortColumn, query: HolidayArgInput, first: Int, after: String, last: Int, before: String): RootToHolidayConnection!
  """custom query for holiday. list"""
  holiday_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [Holiday!]!
  """custom query for hours_of_operation. connection"""
  hours_of_operation_connection(ids: [ID!], sortCol: HoursOfOperationSortColumn, query: HoursOfOperationArgInput, first: Int, after: String, last: Int, before: String): RootToHoursOfOperationConnection!
  """custom query for hours_of_operation. list"""
  hours_of_operation_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [HoursOfOperation!]!
  node(id: ID!): Node
  timeDiff(time: Date!, log: JSON!): String!
  """custom query for user. connection"""
  user_connection(ids: [ID!], sortCol: UserSortColumn, query: UserArgInput, first: Int, after: String, last: Int, before: String): RootToUserConnection!
  """custom query for user. list"""
  user_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [User!]!
  """custom query for user_statistics. connection"""
  user_statistics_connection(ids: [ID!], sortCol: UserStatisticsSortColumn, query: UserStatisticsArgInput, first: Int, after: String, last: Int, before: String): RootToUserStatisticsConnection!
  """custom query for user_statistics. list"""
  user_statistics_list_deprecated(id: ID, ids: [ID!], extra: Boolean): [UserStatistics!]!
  """the viewer query"""
  viewer: Viewer!
}

type Mutation {
  addressCreate(input: AddressCreateInput!): AddressCreatePayload!
  bulkUploadContact(userId: ID!, file: Upload!, defaultLabel: ContactLabel, defaultLabel2: ContactLabel2): User!
  commentCreate(input: CommentCreateInput!): CommentCreatePayload!
  commentEdit(input: CommentEditInput!): CommentEditPayload!
  confirmEmailAddressEdit(input: ConfirmEditEmailAddressInput!): ConfirmEditEmailAddressPayload!
  confirmPhoneNumberEdit(input: ConfirmEditPhoneNumberInput!): ConfirmEditPhoneNumberPayload!
  contactCreate(input: ContactCreateInput!): ContactCreatePayload!
  contactDelete(input: ContactDeleteInput!): ContactDeletePayload!
  contactEdit(input: ContactEditInput!): ContactEditPayload!
  contactEmailCreate(input: ContactEmailCreateInput!): ContactEmailCreatePayload!
  contactEmailDelete(input: ContactEmailDeleteInput!): ContactEmailDeletePayload!
  contactEmailEdit(input: ContactEmailEditInput!): ContactEmailEditPayload!
  contactPhoneNumberCreate(input: ContactPhoneNumberCreateInput!): ContactPhoneNumberCreatePayload!
  contactPhoneNumberDelete(input: ContactPhoneNumberDeleteInput!): ContactPhoneNumberDeletePayload!
  contactPhoneNumberEdit(input: ContactPhoneNumberEditInput!): ContactPhoneNumberEditPayload!
  emailAddressEdit(input: EditEmailAddressInput!): EditEmailAddressPayload!
  eventAddHost(input: EventAddHostInput!): EventAddHostPayload!
  eventCreate(input: EventCreateInput!): EventCreatePayload!
  eventDelete(input: EventDeleteInput!): EventDeletePayload!
  eventEdit(input: EventEditInput!): EventEditPayload!
  eventRemoveHost(input: EventRemoveHostInput!): EventRemoveHostPayload!
  eventRsvpStatusClear(input: ClearEventRsvpStatusInput!): ClearEventRsvpStatusPayload!
  eventRsvpStatusEdit(input: EventRsvpStatusEditInput!): EventRsvpStatusEditPayload!
  fileCreate(input: FileCreateInput!): FileCreatePayload!
  fileDelete(input: FileDeleteInput!): FileDeletePayload!
  fileEdit(input: FileEditInput!): FileEditPayload!
  holidayCreate(input: HolidayCreateInput!): HolidayCreatePayload!
  holidayCustomEdit(input: CustomEditHolidayInput!): CustomEditHolidayPayload!
  hoursOfOperationCreate(input: HoursOfOperationCreateInput!): HoursOfOperationCreatePayload!
  phoneNumberEdit(input: EditPhoneNumberInput!): EditPhoneNumberPayload!
  """authenticate a user"""
  userAuth(input: UserAuthInput!): UserAuthPayload!
  """authenticate a user with JWT"""
  userAuthJWT(input: UserAuthJWTInput!): UserAuthJWTPayload!
  userCreate(input: UserCreateInput!): UserCreatePayload!
  userDelete(input: UserDeleteInput!): UserDeletePayload!
  userDelete2(input: DeleteUserInput2!): DeleteUserInput2Payload!
  userEdit(input: UserEditInput!): UserEditPayload!
  userStatisticsCreate(input: UserStatisticsCreateInput!): UserStatisticsCreatePayload!
  userStatisticsDelete(input: UserStatisticsDeleteInput!): UserStatisticsDeletePayload!
  userStatisticsEdit(input: UserStatisticsEditInput!): UserStatisticsEditPayload!
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Byte

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""The `Upload` scalar type represents a file upload."""
scalar Upload

