/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  Comment,
  CommentArticleToCommentsQuery,
  CommentToPostQuery,
} from "../../../ent";
import {
  CommentArticleToCommentsConnectionType,
  CommentToPostConnectionType,
  UserType,
} from "../../resolvers/internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

export const CommentType = new GraphQLObjectType({
  name: "Comment",
  fields: (): GraphQLFieldConfigMap<
    Comment,
    RequestContext<ExampleViewerAlias>
  > => ({
    article: {
      type: GraphQLNodeInterface,
      resolve: (
        obj: Comment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadArticle();
      },
    },
    attachment: {
      type: GraphQLNodeInterface,
      resolve: (
        obj: Comment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadAttachment();
      },
    },
    author: {
      type: UserType,
      resolve: (
        obj: Comment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadAuthor();
      },
    },
    sticker: {
      type: GraphQLNodeInterface,
      resolve: (
        obj: Comment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadSticker();
      },
    },
    id: {
      type: new GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    body: {
      type: new GraphQLNonNull(GraphQLString),
    },
    post: {
      type: new GraphQLNonNull(CommentToPostConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: Comment,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: Comment) => CommentToPostQuery.query(v, obj),
          args,
        );
      },
    },
    articles: {
      type: new GraphQLNonNull(CommentArticleToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: Comment,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: Comment) => CommentArticleToCommentsQuery.query(v, obj),
          args,
        );
      },
    },
  }),
  interfaces: () => [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof Comment;
  },
});
