/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLBoolean,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext, applyPrivacyPolicy } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  ContactEmail,
  ContactEmailToCommentsQuery,
  ContactEmailToLikersQuery,
} from "../../../ent";
import EditContactEmailAction from "../../../ent/contact_email/actions/edit_contact_email_action";
import {
  ContactEmailToCommentsConnectionType,
  ContactEmailToLikersConnectionType,
  ContactInfoType,
  ContactItemType,
  ContactLabelType,
  ContactType,
} from "../../resolvers/internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

class ContactEmailCanViewerDo {
  constructor(
    private context: RequestContext<ExampleViewerAlias>,
    private ent: ContactEmail,
  ) {}

  async contactEmailEdit(args: any): Promise<boolean> {
    const action = EditContactEmailAction.create(
      this.context.getViewer(),
      this.ent,
      args,
    );
    return applyPrivacyPolicy(
      this.context.getViewer(),
      action.getPrivacyPolicy(),
      this.ent,
    );
  }
}

export const ContactEmailType = new GraphQLObjectType({
  name: "ContactEmail",
  fields: (): GraphQLFieldConfigMap<
    ContactEmail,
    RequestContext<ExampleViewerAlias>
  > => ({
    contact: {
      type: ContactType,
      resolve: (
        obj: ContactEmail,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadContact();
      },
    },
    id: {
      type: new GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    extra: {
      type: ContactInfoType,
    },
    emailAddress: {
      type: new GraphQLNonNull(GraphQLString),
    },
    label: {
      type: new GraphQLNonNull(ContactLabelType),
    },
    comments: {
      type: new GraphQLNonNull(ContactEmailToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: ContactEmail,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: ContactEmail) => ContactEmailToCommentsQuery.query(v, obj),
          args,
        );
      },
    },
    likers: {
      type: new GraphQLNonNull(ContactEmailToLikersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: ContactEmail,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: ContactEmail) => ContactEmailToLikersQuery.query(v, obj),
          args,
        );
      },
    },
    canViewerDo: {
      type: new GraphQLNonNull(ContactEmailCanViewerDoType),
      resolve: (
        obj: ContactEmail,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new ContactEmailCanViewerDo(context, obj);
      },
    },
  }),
  interfaces: () => [GraphQLNodeInterface, ContactItemType],
  isTypeOf(obj) {
    return obj instanceof ContactEmail;
  },
});

export const ContactEmailCanViewerDoType = new GraphQLObjectType({
  name: "ContactEmailCanViewerDo",
  fields: (): GraphQLFieldConfigMap<
    ContactEmailCanViewerDo,
    RequestContext<ExampleViewerAlias>
  > => ({
    contactEmailEdit: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: ContactEmailCanViewerDo,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.contactEmailEdit(args);
      },
    },
  }),
});
