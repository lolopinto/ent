/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfigMap,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { GraphQLNodeInterface, GraphQLTime } from "@snowtop/ent/graphql";
import { File, loadEntByType } from "../../../ent";
import { Attachment, NodeType } from "../../../ent/generated/types";
import { FileType } from "../../resolvers/internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

export const AttachmentType = new GraphQLObjectType({
  name: "Attachment",
  fields: (): GraphQLFieldConfigMap<
    Attachment,
    RequestContext<ExampleViewerAlias>
  > => ({
    file: {
      type: FileType,
      resolve: (
        obj: Attachment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return File.load(context.getViewer(), obj.fileId);
      },
    },
    dupeFile: {
      type: FileType,
      resolve: (
        obj: Attachment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        if (obj.dupeFileId === null || obj.dupeFileId === undefined) {
          return null;
        }
        return File.load(context.getViewer(), obj.dupeFileId);
      },
    },
    note: {
      type: GraphQLString,
    },
    date: {
      type: new GraphQLNonNull(GraphQLTime),
    },
    phoneNumber: {
      type: GraphQLString,
    },
    emailAddress: {
      type: GraphQLString,
    },
    creator: {
      type: GraphQLNodeInterface,
      resolve: (
        obj: Attachment,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        if (obj.creatorId === null || obj.creatorId === undefined) {
          return null;
        }
        return loadEntByType(
          context.getViewer(),
          obj.creatorType as unknown as NodeType,
          obj.creatorId,
        );
      },
    },
    creatorType: {
      type: GraphQLString,
    },
  }),
});
