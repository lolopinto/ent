/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLBoolean,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext, applyPrivacyPolicy } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import CreateContactAction from "../../../ent/contact/actions/create_contact_action";
import CreateContactEmailAction from "../../../ent/contact_email/actions/create_contact_email_action";
import { ContactInfoInputType } from "../mutations/input/contact_info_input_type";
import { ContactLabelType } from "../../resolvers/internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

class GlobalCanViewerDo {
  constructor(private context: RequestContext<ExampleViewerAlias>) {}

  async contactCreate(args: any): Promise<boolean> {
    const action = CreateContactAction.create(this.context.getViewer(), {
      ...args,
      userID: mustDecodeIDFromGQLID(args.userID),
    });
    return applyPrivacyPolicy(
      this.context.getViewer(),
      action.getPrivacyPolicy(),
      undefined,
    );
  }

  async contactEmailCreate(args: any): Promise<boolean> {
    const action = CreateContactEmailAction.create(this.context.getViewer(), {
      ...args,
      extra: args.extra,
      emailAddress: args.emailAddress,
      label: args.label,
      contactID: mustDecodeIDFromGQLID(args.contactID),
    });
    return applyPrivacyPolicy(
      this.context.getViewer(),
      action.getPrivacyPolicy(),
      undefined,
    );
  }
}

export const GlobalCanViewerDoType = new GraphQLObjectType({
  name: "GlobalCanViewerDo",
  fields: (): GraphQLFieldConfigMap<
    GlobalCanViewerDo,
    RequestContext<ExampleViewerAlias>
  > => ({
    contactCreate: {
      type: new GraphQLNonNull(GraphQLBoolean),
      args: {
        userID: {
          description: "",
          type: new GraphQLNonNull(GraphQLID),
        },
      },
      resolve: async (
        obj: GlobalCanViewerDo,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.contactCreate(args);
      },
    },
    contactEmailCreate: {
      type: new GraphQLNonNull(GraphQLBoolean),
      args: {
        extra: {
          description: "",
          type: ContactInfoInputType,
        },
        emailAddress: {
          description: "",
          type: new GraphQLNonNull(GraphQLString),
        },
        label: {
          description: "",
          type: new GraphQLNonNull(ContactLabelType),
        },
        contactID: {
          description: "",
          type: new GraphQLNonNull(GraphQLID),
        },
      },
      resolve: async (
        obj: GlobalCanViewerDo,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.contactEmailCreate(args);
      },
    },
  }),
});

export const CanViewerDoQueryType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  {}
> = {
  type: GlobalCanViewerDoType,
  resolve: async (
    _source,
    args: {},
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ) => {
    return new GlobalCanViewerDo(context);
  },
};
