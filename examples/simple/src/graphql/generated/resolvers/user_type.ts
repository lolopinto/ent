/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLBoolean,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext, applyPrivacyPolicy } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  AuthorToCommentsQuery,
  CreatorToEventsQuery,
  User,
  UserArticleToCommentsQuery,
  UserCanViewerEdit,
  UserCanViewerSee,
  UserCommentsFromAttachmentQuery,
  UserToCommentsQuery,
  UserToContactsQuery,
  UserToCreatedEventsQuery,
  UserToDeclinedEventsQuery,
  UserToEventsAttendingQuery,
  UserToFriendsQuery,
  UserToHostedEventsQuery,
  UserToInvitedEventsQuery,
  UserToLikersQuery,
  UserToLikesQuery,
  UserToMaybeEventsQuery,
} from "../../../ent";
import EditUserAction from "../../../ent/user/actions/edit_user_action";
import {
  AuthorToCommentsConnectionType,
  ContactType,
  CreatorToEventsConnectionType,
  UserAccountStatusType,
  UserArticleToCommentsConnectionType,
  UserCommentsFromAttachmentConnectionType,
  UserDaysOffType,
  UserIntEnumType,
  UserNestedObjectListType,
  UserPreferredShiftType,
  UserPrefsDiffType,
  UserPrefsStructType,
  UserSuperNestedObjectType,
  UserToCommentsAuthoredConnectionType,
  UserToCommentsConnectionType,
  UserToContactsConnectionType,
  UserToCreatedEventsConnectionType,
  UserToDeclinedEventsConnectionType,
  UserToEventsAttendingConnectionType,
  UserToFriendsConnectionType,
  UserToHostedEventsConnectionType,
  UserToInvitedEventsConnectionType,
  UserToLikersConnectionType,
  UserToLikesConnectionType,
  UserToMaybeEventsConnectionType,
} from "../../resolvers/internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

class UserCanViewerDo {
  constructor(
    private context: RequestContext<ExampleViewerAlias>,
    private ent: User,
  ) {}

  async userEdit(args: any): Promise<boolean> {
    const action = EditUserAction.create(
      this.context.getViewer(),
      this.ent,
      args,
    );
    return applyPrivacyPolicy(
      this.context.getViewer(),
      action.getPrivacyPolicy(),
      this.ent,
    );
  }
}

export const UserType = new GraphQLObjectType({
  name: "User",
  fields: (): GraphQLFieldConfigMap<
    User,
    RequestContext<ExampleViewerAlias>
  > => ({
    id: {
      type: new GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    firstName: {
      type: new GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: new GraphQLNonNull(GraphQLString),
    },
    emailAddress: {
      type: new GraphQLNonNull(GraphQLString),
    },
    phoneNumber: {
      type: GraphQLString,
    },
    accountStatus: {
      type: UserAccountStatusType,
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.accountStatus();
      },
    },
    bio: {
      type: GraphQLString,
    },
    nicknames: {
      type: new GraphQLList(new GraphQLNonNull(GraphQLString)),
    },
    prefs: {
      type: UserPrefsStructType,
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefs();
      },
    },
    prefsList: {
      type: new GraphQLList(new GraphQLNonNull(UserPrefsStructType)),
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefsList();
      },
    },
    prefsDiff: {
      type: UserPrefsDiffType,
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefsDiff();
      },
    },
    daysOff: {
      type: new GraphQLList(new GraphQLNonNull(UserDaysOffType)),
    },
    preferredShift: {
      type: new GraphQLList(new GraphQLNonNull(UserPreferredShiftType)),
    },
    timeInMs: {
      type: GraphQLString,
    },
    funUuids: {
      type: new GraphQLList(new GraphQLNonNull(GraphQLID)),
    },
    superNestedObject: {
      type: UserSuperNestedObjectType,
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.superNestedObject();
      },
    },
    nestedList: {
      type: new GraphQLList(new GraphQLNonNull(UserNestedObjectListType)),
    },
    intEnum: {
      type: UserIntEnumType,
    },
    selfContact: {
      type: ContactType,
      resolve: (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.loadSelfContact();
      },
    },
    comments: {
      type: new GraphQLNonNull(UserToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToCommentsQuery.query(v, obj),
          args,
        );
      },
    },
    createdEvents: {
      type: new GraphQLNonNull(UserToCreatedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToCreatedEventsQuery.query(v, obj),
          args,
        );
      },
    },
    declinedEvents: {
      type: new GraphQLNonNull(UserToDeclinedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToDeclinedEventsQuery.query(v, obj),
          args,
        );
      },
    },
    eventsAttending: {
      type: new GraphQLNonNull(UserToEventsAttendingConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToEventsAttendingQuery.query(v, obj),
          args,
        );
      },
    },
    friends: {
      type: new GraphQLNonNull(UserToFriendsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToFriendsQuery.query(v, obj),
          args,
        );
      },
    },
    invitedEvents: {
      type: new GraphQLNonNull(UserToInvitedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToInvitedEventsQuery.query(v, obj),
          args,
        );
      },
    },
    likers: {
      type: new GraphQLNonNull(UserToLikersConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToLikersQuery.query(v, obj),
          args,
        );
      },
    },
    likes: {
      type: new GraphQLNonNull(UserToLikesConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToLikesQuery.query(v, obj),
          args,
        );
      },
    },
    maybeEvents: {
      type: new GraphQLNonNull(UserToMaybeEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToMaybeEventsQuery.query(v, obj),
          args,
        );
      },
    },
    userToHostedEvents: {
      type: new GraphQLNonNull(UserToHostedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToHostedEventsQuery.query(v, obj),
          args,
        );
      },
    },
    contacts: {
      type: new GraphQLNonNull(UserToContactsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserToContactsQuery.query(v, obj),
          args,
        );
      },
    },
    articles: {
      type: new GraphQLNonNull(UserArticleToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserArticleToCommentsQuery.query(v, obj),
          args,
        );
      },
    },
    attachedComments: {
      type: new GraphQLNonNull(UserCommentsFromAttachmentConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => UserCommentsFromAttachmentQuery.query(v, obj),
          args,
        );
      },
    },
    commentsFromUser: {
      type: new GraphQLNonNull(AuthorToCommentsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => AuthorToCommentsQuery.query(v, obj),
          args,
        );
      },
    },
    eventsCreated: {
      type: new GraphQLNonNull(CreatorToEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => CreatorToEventsQuery.query(v, obj),
          args,
        );
      },
    },
    canViewerSeeInfo: {
      type: new GraphQLNonNull(UserCanViewerSeeType),
      resolve: (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.canViewerSeeInfo();
      },
    },
    canViewerEditInfo: {
      type: new GraphQLNonNull(UserCanViewerEditType),
      resolve: (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.canViewerEditInfo();
      },
    },
    canViewerDo: {
      type: new GraphQLNonNull(UserCanViewerDoType),
      resolve: (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new UserCanViewerDo(context, obj);
      },
    },
    fullName: {
      type: new GraphQLNonNull(GraphQLString),
    },
    bar: {
      type: GraphQLString,
      resolve: (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getUserBar();
      },
    },
    contactSameDomain: {
      description: "contacts same domain...",
      type: ContactType,
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getFirstContactSameDomain();
      },
    },
    contactsSameDomain: {
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(ContactType)),
      ),
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getContactsSameDomain();
      },
    },
    contactsGivenDomain: {
      type: new GraphQLNonNull(
        new GraphQLList(new GraphQLNonNull(ContactType)),
      ),
      args: {
        domain: {
          description: "",
          type: new GraphQLNonNull(GraphQLString),
        },
      },
      resolve: async (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getContactsGivenDomain(args.domain);
      },
    },
    contactsSameDomainNullable: {
      type: new GraphQLList(new GraphQLNonNull(ContactType)),
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getContactsSameDomainNullable();
      },
    },
    contactsSameDomainNullableContents: {
      type: new GraphQLNonNull(new GraphQLList(ContactType)),
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getContactsSameDomainNullableContents();
      },
    },
    contactsSameDomainNullableContentsAndList: {
      type: new GraphQLList(ContactType),
      resolve: async (
        obj: User,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.getContactsSameDomainNullableContentsAndList();
      },
    },
    commentsAuthored: {
      type: new GraphQLNonNull(UserToCommentsAuthoredConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: User,
        args: any,
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: User) => obj.getCommentsAuthored(),
          args,
        );
      },
    },
  }),
  interfaces: () => [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof User;
  },
});

export const UserCanViewerSeeType = new GraphQLObjectType({
  name: "UserCanViewerSee",
  fields: (): GraphQLFieldConfigMap<
    UserCanViewerSee,
    RequestContext<ExampleViewerAlias>
  > => ({
    accountStatus: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerSee,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.accountStatus();
      },
    },
    prefs: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerSee,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefs();
      },
    },
    prefsList: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerSee,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefsList();
      },
    },
    prefsDiff: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerSee,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.prefsDiff();
      },
    },
  }),
});

export const UserCanViewerEditType = new GraphQLObjectType({
  name: "UserCanViewerEdit",
  fields: (): GraphQLFieldConfigMap<
    UserCanViewerEdit,
    RequestContext<ExampleViewerAlias>
  > => ({
    accountStatus: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerEdit,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.accountStatus();
      },
    },
  }),
});

export const UserCanViewerDoType = new GraphQLObjectType({
  name: "UserCanViewerDo",
  fields: (): GraphQLFieldConfigMap<
    UserCanViewerDo,
    RequestContext<ExampleViewerAlias>
  > => ({
    userEdit: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: async (
        obj: UserCanViewerDo,
        args: {},
        context: RequestContext<ExampleViewerAlias>,
      ) => {
        return obj.userEdit(args);
      },
    },
  }),
});
