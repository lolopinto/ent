/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { User } from "../../../../ent";
import EditPhoneNumberAction, {
  EditPhoneNumberInput,
} from "../../../../ent/user/actions/edit_phone_number_action";
import { UserType } from "../../../resolvers";
import { ExampleViewer } from "../../../../viewer/viewer";

interface customEditPhoneNumberInput extends EditPhoneNumberInput {
  userID: string;
}

interface EditPhoneNumberPayload {
  user: User;
}

export const EditPhoneNumberInputType = new GraphQLInputObjectType({
  name: "EditPhoneNumberInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    userID: {
      description: "id of User",
      type: new GraphQLNonNull(GraphQLID),
    },
    newPhoneNumber: {
      type: new GraphQLNonNull(GraphQLString),
    },
  }),
});

export const EditPhoneNumberPayloadType = new GraphQLObjectType({
  name: "EditPhoneNumberPayload",
  fields: (): GraphQLFieldConfigMap<
    EditPhoneNumberPayload,
    RequestContext
  > => ({
    user: {
      type: new GraphQLNonNull(UserType),
    },
  }),
});

export const PhoneNumberEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewer>,
  { [input: string]: customEditPhoneNumberInput }
> = {
  type: new GraphQLNonNull(EditPhoneNumberPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(EditPhoneNumberInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewer>,
    _info: GraphQLResolveInfo,
  ): Promise<EditPhoneNumberPayload> => {
    const user = await EditPhoneNumberAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.userID),
      {
        newPhoneNumber: input.newPhoneNumber,
      },
    );
    return { user: user };
  },
};
