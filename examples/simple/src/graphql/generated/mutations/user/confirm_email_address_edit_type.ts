/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { User } from "../../../../ent";
import ConfirmEditEmailAddressAction, {
  ConfirmEditEmailAddressInput,
} from "../../../../ent/user/actions/confirm_edit_email_address_action";
import { UserType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customConfirmEditEmailAddressInput
  extends ConfirmEditEmailAddressInput {
  id: string;
}

interface ConfirmEditEmailAddressPayload {
  user: User;
}

export const ConfirmEditEmailAddressInputType = new GraphQLInputObjectType({
  name: "ConfirmEditEmailAddressInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of User",
      type: new GraphQLNonNull(GraphQLID),
    },
    emailAddress: {
      type: new GraphQLNonNull(GraphQLString),
    },
    code: {
      type: new GraphQLNonNull(GraphQLString),
    },
  }),
});

export const ConfirmEditEmailAddressPayloadType = new GraphQLObjectType({
  name: "ConfirmEditEmailAddressPayload",
  fields: (): GraphQLFieldConfigMap<
    ConfirmEditEmailAddressPayload,
    RequestContext
  > => ({
    user: {
      type: new GraphQLNonNull(UserType),
    },
  }),
});

export const ConfirmEmailAddressEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customConfirmEditEmailAddressInput }
> = {
  type: new GraphQLNonNull(ConfirmEditEmailAddressPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(ConfirmEditEmailAddressInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<ConfirmEditEmailAddressPayload> => {
    const user = await ConfirmEditEmailAddressAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        emailAddress: input.emailAddress,
        code: input.code,
      },
    );
    return { user: user };
  },
};
