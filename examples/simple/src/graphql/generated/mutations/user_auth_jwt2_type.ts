/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { AuthResolver } from "../../mutations/auth";
import { UserAuthJWTLogin } from "../../mutations/auth_types";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

interface UserAuthJWT2Args {
  emailAddress: string;
  password: string;
}

export const UserAuthJWTLoginType = new GraphQLObjectType({
  name: "UserAuthJWTLogin",
  fields: (): GraphQLFieldConfigMap<
    UserAuthJWTLogin,
    RequestContext<ExampleViewerAlias>
  > => ({
    token: {
      type: new GraphQLNonNull(GraphQLString),
    },
    viewerID: {
      type: new GraphQLNonNull(GraphQLID),
    },
  }),
  isTypeOf(obj) {
    return obj instanceof UserAuthJWTLogin;
  },
});

export const UserAuthJWT2Type: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  UserAuthJWT2Args
> = {
  type: new GraphQLNonNull(UserAuthJWTLoginType),
  description: "authenticate a user with JWT",
  args: {
    emailAddress: {
      description: "",
      type: new GraphQLNonNull(GraphQLString),
    },
    password: {
      description: "",
      type: new GraphQLNonNull(GraphQLString),
    },
  },
  resolve: async (
    _source,
    args,
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ) => {
    const r = new AuthResolver();
    return r.userAuthJWT2(context, args.emailAddress, args.password);
  },
};
