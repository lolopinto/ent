/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  mustDecodeIDFromGQLID,
  mustDecodeNullableIDFromGQLID,
} from "@snowtop/ent/graphql";
import { Comment } from "../../../../ent";
import CreateCommentAction, {
  CommentCreateInput,
} from "../../../../ent/comment/actions/create_comment_action";
import { CommentType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customCommentCreateInput extends CommentCreateInput {
  authorId: string;
  articleId: string;
  attachmentId?: string;
  stickerId?: string;
}

interface CommentCreatePayload {
  comment: Comment;
}

export const CommentCreateInputType = new GraphQLInputObjectType({
  name: "CommentCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    authorId: {
      type: new GraphQLNonNull(GraphQLID),
    },
    body: {
      type: new GraphQLNonNull(GraphQLString),
    },
    articleId: {
      type: new GraphQLNonNull(GraphQLID),
    },
    articleType: {
      type: new GraphQLNonNull(GraphQLString),
    },
    attachmentId: {
      type: GraphQLID,
    },
    attachmentType: {
      type: GraphQLString,
    },
    stickerId: {
      type: GraphQLID,
    },
    stickerType: {
      type: GraphQLString,
    },
  }),
});

export const CommentCreatePayloadType = new GraphQLObjectType({
  name: "CommentCreatePayload",
  fields: (): GraphQLFieldConfigMap<
    CommentCreatePayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    comment: {
      type: new GraphQLNonNull(CommentType),
    },
  }),
});

export const CommentCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customCommentCreateInput }
> = {
  type: new GraphQLNonNull(CommentCreatePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(CommentCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<CommentCreatePayload> => {
    const comment = await CreateCommentAction.create(context.getViewer(), {
      authorId: mustDecodeIDFromGQLID(input.authorId),
      body: input.body,
      articleId: mustDecodeIDFromGQLID(input.articleId),
      articleType: input.articleType,
      attachmentId: mustDecodeNullableIDFromGQLID(input.attachmentId),
      attachmentType: input.attachmentType,
      stickerId: mustDecodeNullableIDFromGQLID(input.stickerId),
      stickerType: input.stickerType,
    }).saveX();
    return { comment: comment };
  },
};
