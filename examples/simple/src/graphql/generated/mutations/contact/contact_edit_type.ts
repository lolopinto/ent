/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { Contact } from "../../../../ent";
import EditContactAction, {
  ContactEditInput,
} from "../../../../ent/contact/actions/edit_contact_action";
import { AttachmentInputType } from "../input/attachment_input_type";
import { ContactInfoInputType } from "../input/contact_info_input_type";
import { ContactLabelType, ContactType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customContactEditInput extends ContactEditInput {
  id: string;
}

interface ContactEditPayload {
  contact: Contact;
}

export const EmailContactEditInput = new GraphQLInputObjectType({
  name: "EmailContactEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    extra: {
      type: ContactInfoInputType,
    },
    emailAddress: {
      type: new GraphQLNonNull(GraphQLString),
    },
    label: {
      type: new GraphQLNonNull(ContactLabelType),
    },
  }),
});

export const ContactEditInputType = new GraphQLInputObjectType({
  name: "ContactEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Contact",
      type: new GraphQLNonNull(GraphQLID),
    },
    emailIds: {
      type: new GraphQLList(new GraphQLNonNull(GraphQLID)),
    },
    phoneNumberIds: {
      type: new GraphQLList(new GraphQLNonNull(GraphQLID)),
    },
    firstName: {
      type: GraphQLString,
    },
    lastName: {
      type: GraphQLString,
    },
    attachments: {
      type: new GraphQLList(new GraphQLNonNull(AttachmentInputType)),
    },
    emails: {
      type: new GraphQLList(new GraphQLNonNull(EmailContactEditInput)),
    },
  }),
});

export const ContactEditPayloadType = new GraphQLObjectType({
  name: "ContactEditPayload",
  fields: (): GraphQLFieldConfigMap<
    ContactEditPayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    contact: {
      type: new GraphQLNonNull(ContactType),
    },
  }),
});

export const ContactEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customContactEditInput }
> = {
  type: new GraphQLNonNull(ContactEditPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(ContactEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<ContactEditPayload> => {
    const contact = await EditContactAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        emailIds: input.emailIds
          ? input.emailIds.map((i: any) => mustDecodeIDFromGQLID(i))
          : undefined,
        phoneNumberIds: input.phoneNumberIds
          ? input.phoneNumberIds.map((i: any) => mustDecodeIDFromGQLID(i))
          : undefined,
        firstName: input.firstName,
        lastName: input.lastName,
        attachments: input.attachments,
        emails: input.emails,
      },
    );
    return { contact };
  },
};
