/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import DeleteFileAction from "../../../../ent/file/actions/delete_file_action";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customFileDeleteInput {
  id: string;
}

interface FileDeletePayload {
  deletedFileID: string;
}

export const FileDeleteInputType = new GraphQLInputObjectType({
  name: "FileDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of File",
      type: new GraphQLNonNull(GraphQLID),
    },
  }),
});

export const FileDeletePayloadType = new GraphQLObjectType({
  name: "FileDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    FileDeletePayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    deletedFileID: {
      type: GraphQLID,
    },
  }),
});

export const FileDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customFileDeleteInput }
> = {
  type: new GraphQLNonNull(FileDeletePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(FileDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<FileDeletePayload> => {
    await DeleteFileAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
    );
    return { deletedFileID: input.id };
  },
};
