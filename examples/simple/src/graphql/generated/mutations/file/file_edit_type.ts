/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import {
  mustDecodeIDFromGQLID,
  mustDecodeNullableIDFromGQLID,
} from "@snowtop/ent/graphql";
import { File } from "../../../../ent";
import EditFileAction, {
  FileEditInput,
} from "../../../../ent/file/actions/edit_file_action";
import { FileType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customFileEditInput extends FileEditInput {
  id: string;
  creatorId?: string;
}

interface FileEditPayload {
  file: File;
}

export const FileEditInputType = new GraphQLInputObjectType({
  name: "FileEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of File",
      type: new GraphQLNonNull(GraphQLID),
    },
    name: {
      type: GraphQLString,
    },
    path: {
      type: GraphQLString,
    },
    creatorId: {
      type: GraphQLID,
    },
  }),
});

export const FileEditPayloadType = new GraphQLObjectType({
  name: "FileEditPayload",
  fields: (): GraphQLFieldConfigMap<
    FileEditPayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    file: {
      type: new GraphQLNonNull(FileType),
    },
  }),
});

export const FileEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customFileEditInput }
> = {
  type: new GraphQLNonNull(FileEditPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(FileEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<FileEditPayload> => {
    const file = await EditFileAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        name: input.name,
        path: input.path,
        creatorId: mustDecodeNullableIDFromGQLID(input.creatorId),
      },
    );
    return { file };
  },
};
