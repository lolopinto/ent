/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import DeleteEventAction from "../../../../ent/event/actions/delete_event_action";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customEventDeleteInput {
  id: string;
}

interface EventDeletePayload {
  deletedEventID: string;
}

export const EventDeleteInputType = new GraphQLInputObjectType({
  name: "EventDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Event",
      type: new GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventDeletePayloadType = new GraphQLObjectType({
  name: "EventDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    EventDeletePayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    deletedEventID: {
      type: GraphQLID,
    },
  }),
});

export const EventDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customEventDeleteInput }
> = {
  type: new GraphQLNonNull(EventDeletePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(EventDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<EventDeletePayload> => {
    await DeleteEventAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
    );
    return { deletedEventID: input.id };
  },
};
