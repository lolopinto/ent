/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { GraphQLByte } from "graphql-scalars";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLTime,
  mustDecodeIDFromGQLID,
  mustDecodeNullableIDFromGQLID,
} from "@snowtop/ent/graphql";
import { Event } from "../../../../ent";
import CreateEventAction, {
  EventCreateInput,
} from "../../../../ent/event/actions/create_event_action";
import { AttachmentInputType } from "../input/attachment_input_type";
import { EventType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customEventCreateInput extends Omit<EventCreateInput, "location"> {
  creatorId: string;
  eventLocation: string;
  addressId?: string;
}

interface EventCreatePayload {
  event: Event;
}

export const EventCreateInputType = new GraphQLInputObjectType({
  name: "EventCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
    },
    creatorId: {
      type: new GraphQLNonNull(GraphQLID),
    },
    startTime: {
      type: new GraphQLNonNull(GraphQLTime),
    },
    endTime: {
      type: GraphQLTime,
    },
    eventLocation: {
      type: new GraphQLNonNull(GraphQLString),
    },
    addressId: {
      type: GraphQLID,
    },
    coverPhoto: {
      type: GraphQLByte,
    },
    coverPhoto2: {
      type: GraphQLByte,
    },
    attachments: {
      type: new GraphQLList(new GraphQLNonNull(AttachmentInputType)),
    },
  }),
});

export const EventCreatePayloadType = new GraphQLObjectType({
  name: "EventCreatePayload",
  fields: (): GraphQLFieldConfigMap<
    EventCreatePayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    event: {
      type: new GraphQLNonNull(EventType),
    },
  }),
});

export const EventCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customEventCreateInput }
> = {
  type: new GraphQLNonNull(EventCreatePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(EventCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<EventCreatePayload> => {
    const event = await CreateEventAction.create(context.getViewer(), {
      name: input.name,
      creatorId: mustDecodeIDFromGQLID(input.creatorId),
      startTime: input.startTime,
      endTime: input.endTime,
      location: input.eventLocation,
      addressId: mustDecodeNullableIDFromGQLID(input.addressId),
      coverPhoto: input.coverPhoto,
      coverPhoto2: input.coverPhoto2,
      attachments: input.attachments,
    }).saveX();
    return { event: event };
  },
};
