/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { GraphQLByte } from "graphql-scalars";
import { RequestContext } from "@snowtop/ent";
import {
  GraphQLTime,
  mustDecodeIDFromGQLID,
  mustDecodeNullableIDFromGQLID,
} from "@snowtop/ent/graphql";
import { Event } from "../../../../ent";
import EditEventAction, {
  EventEditInput,
} from "../../../../ent/event/actions/edit_event_action";
import { EventType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customEventEditInput extends Omit<EventEditInput, "location"> {
  id: string;
  eventLocation?: string;
  addressID?: string;
}

interface EventEditPayload {
  event: Event;
}

export const EventEditInputType = new GraphQLInputObjectType({
  name: "EventEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Event",
      type: new GraphQLNonNull(GraphQLID),
    },
    name: {
      type: GraphQLString,
    },
    startTime: {
      type: GraphQLTime,
    },
    endTime: {
      type: GraphQLTime,
    },
    eventLocation: {
      type: GraphQLString,
    },
    addressID: {
      type: GraphQLID,
    },
    coverPhoto: {
      type: GraphQLByte,
    },
    coverPhoto2: {
      type: GraphQLByte,
    },
  }),
});

export const EventEditPayloadType = new GraphQLObjectType({
  name: "EventEditPayload",
  fields: (): GraphQLFieldConfigMap<
    EventEditPayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    event: {
      type: new GraphQLNonNull(EventType),
    },
  }),
});

export const EventEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customEventEditInput }
> = {
  type: new GraphQLNonNull(EventEditPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(EventEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<EventEditPayload> => {
    const event = await EditEventAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        name: input.name,
        startTime: input.startTime,
        endTime: input.endTime,
        location: input.eventLocation,
        addressID: mustDecodeNullableIDFromGQLID(input.addressID),
        coverPhoto: input.coverPhoto,
        coverPhoto2: input.coverPhoto2,
      },
    );
    return { event };
  },
};
