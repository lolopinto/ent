/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { Event } from "../../../../ent";
import ClearEventRsvpStatusAction, {
  ClearEventRsvpStatusInput,
} from "../../../../ent/event/actions/clear_event_rsvp_status_action";
import { EventType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customClearEventRsvpStatusInput extends ClearEventRsvpStatusInput {
  id: string;
  userID: string;
}

interface ClearEventRsvpStatusPayload {
  event: Event;
}

export const ClearEventRsvpStatusInputType = new GraphQLInputObjectType({
  name: "ClearEventRsvpStatusInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Event",
      type: new GraphQLNonNull(GraphQLID),
    },
    userID: {
      type: new GraphQLNonNull(GraphQLID),
    },
  }),
});

export const ClearEventRsvpStatusPayloadType = new GraphQLObjectType({
  name: "ClearEventRsvpStatusPayload",
  fields: (): GraphQLFieldConfigMap<
    ClearEventRsvpStatusPayload,
    RequestContext
  > => ({
    event: {
      type: new GraphQLNonNull(EventType),
    },
  }),
});

export const EventRsvpStatusClearType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customClearEventRsvpStatusInput }
> = {
  type: new GraphQLNonNull(ClearEventRsvpStatusPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(ClearEventRsvpStatusInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<ClearEventRsvpStatusPayload> => {
    const event = await ClearEventRsvpStatusAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        userID: mustDecodeIDFromGQLID(input.userID),
      },
    );
    return { event: event };
  },
};
