/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { UserStatistics } from "../../../../ent";
import CreateUserStatisticsAction, {
  UserStatisticsCreateInput,
} from "../../../../ent/user_statistics/actions/create_user_statistics_action";
import { UserStatisticsType } from "../../../resolvers";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

interface customUserStatisticsCreateInput extends UserStatisticsCreateInput {
  userId: string;
}

interface UserStatisticsCreatePayload {
  userStatistics: UserStatistics;
}

export const UserStatisticsCreateInputType = new GraphQLInputObjectType({
  name: "UserStatisticsCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    userId: {
      type: new GraphQLNonNull(GraphQLID),
    },
    authCodeEmailsSent: {
      type: GraphQLInt,
    },
  }),
});

export const UserStatisticsCreatePayloadType = new GraphQLObjectType({
  name: "UserStatisticsCreatePayload",
  fields: (): GraphQLFieldConfigMap<
    UserStatisticsCreatePayload,
    RequestContext<ExampleViewerAlias>
  > => ({
    userStatistics: {
      type: new GraphQLNonNull(UserStatisticsType),
    },
  }),
});

export const UserStatisticsCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext<ExampleViewerAlias>,
  { [input: string]: customUserStatisticsCreateInput }
> = {
  type: new GraphQLNonNull(UserStatisticsCreatePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(UserStatisticsCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<ExampleViewerAlias>,
    _info: GraphQLResolveInfo,
  ): Promise<UserStatisticsCreatePayload> => {
    const userStatistics = await CreateUserStatisticsAction.create(
      context.getViewer(),
      {
        userId: mustDecodeIDFromGQLID(input.userId),
        authCodeEmailsSent: input.authCodeEmailsSent,
      },
    ).saveX();
    return { userStatistics: userStatistics };
  },
};
