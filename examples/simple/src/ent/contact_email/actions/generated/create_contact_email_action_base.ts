/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Contact, ContactEmail } from "../../..";
import {
  ContactEmailBuilder,
  ContactEmailInput,
} from "./contact_email_builder";

export interface ContactEmailCreateInput {
  emailAddress: string;
  label: string;
  contactID: ID | Builder<Contact>;
}

export class CreateContactEmailActionBase implements Action<ContactEmail> {
  public readonly builder: ContactEmailBuilder;
  public readonly viewer: Viewer;
  protected input: ContactEmailCreateInput;

  constructor(viewer: Viewer, input: ContactEmailCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new ContactEmailBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): ContactEmailInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<ContactEmail>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<ContactEmail | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<ContactEmail> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateContactEmailActionBase>(
    this: new (viewer: Viewer, input: ContactEmailCreateInput) => T,
    viewer: Viewer,
    input: ContactEmailCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
