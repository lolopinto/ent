/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { Contact, ContactEmail } from "../../..";
import { NodeType } from "../../../generated/const";
import schema from "../../../../schema/contact_email";

export interface ContactEmailInput {
  emailAddress?: string;
  label?: string;
  contactID?: ID | Builder<Contact>;
}

export interface ContactEmailAction extends Action<ContactEmail> {
  getInput(): ContactEmailInput;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class ContactEmailBuilder implements Builder<ContactEmail> {
  orchestrator: Orchestrator<ContactEmail>;
  readonly placeholderID: ID;
  readonly ent = ContactEmail;
  readonly nodeType = NodeType.ContactEmail;
  private input: ContactEmailInput;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: ContactEmailAction,
    public readonly existingEnt?: ContactEmail | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-ContactEmail`;
    this.input = action.getInput();
    const updateInput = (d: ContactEmailInput) =>
      this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "contact_emails",
      key: "id",
      loaderOptions: ContactEmail.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
    });
  }

  getInput(): ContactEmailInput {
    return this.input;
  }

  updateInput(input: ContactEmailInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  deleteInputKey(key: string) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  async build(): Promise<Changeset<ContactEmail>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<ContactEmail | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<ContactEmail> {
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const fields = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("emailAddress", fields.emailAddress);
    addField("label", fields.label);
    addField("contactID", fields.contactID);
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of emailAddress. Retrieves it from the input if specified or takes it from existingEnt
  getNewEmailAddressValue(): string | undefined {
    if (this.input.emailAddress !== undefined) {
      return this.input.emailAddress;
    }
    return this.existingEnt?.emailAddress;
  }

  // get value of label. Retrieves it from the input if specified or takes it from existingEnt
  getNewLabelValue(): string | undefined {
    if (this.input.label !== undefined) {
      return this.input.label;
    }
    return this.existingEnt?.label;
  }

  // get value of contactID. Retrieves it from the input if specified or takes it from existingEnt
  getNewContactIDValue(): ID | Builder<Contact> | undefined {
    if (this.input.contactID !== undefined) {
      return this.input.contactID;
    }
    return this.existingEnt?.contactID;
  }
}
