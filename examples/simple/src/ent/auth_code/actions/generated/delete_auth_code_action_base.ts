// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { Action, WriteOperation, Changeset } from "@lolopinto/ent/action";
import {
  Viewer,
  ID,
  AllowIfViewerHasIdentityPrivacyPolicy,
  PrivacyPolicy,
} from "@lolopinto/ent";
import { AuthCode } from "src/ent/";
import {
  AuthCodeBuilder,
  AuthCodeInput,
} from "src/ent/auth_code/actions/auth_code_builder";

export class DeleteAuthCodeActionBase implements Action<AuthCode> {
  public readonly builder: AuthCodeBuilder;
  public readonly viewer: Viewer;
  protected authCode: AuthCode;

  constructor(viewer: Viewer, authCode: AuthCode) {
    this.viewer = viewer;
    this.builder = new AuthCodeBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      authCode,
    );
    this.authCode = authCode;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): AuthCodeInput {
    return {};
  }

  async changeset(): Promise<Changeset<AuthCode>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteAuthCodeActionBase>(
    this: new (viewer: Viewer, authCode: AuthCode) => T,
    viewer: Viewer,
    authCode: AuthCode,
  ): DeleteAuthCodeActionBase {
    return new this(viewer, authCode);
  }

  static async saveXFromID<T extends DeleteAuthCodeActionBase>(
    this: new (viewer: Viewer, authCode: AuthCode) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    let authCode = await AuthCode.loadX(viewer, id);
    return await new this(viewer, authCode).saveX();
  }
}
