/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { Data, Ent, ID, Viewer } from "@snowtop/ent";
import { ContactInfo } from "../types";
import { Contact } from "../../internal";
import { ExampleViewer as ExampleViewerAlias } from "../../../viewer/viewer";

export interface IContactInfoBase<
  TViewer extends ExampleViewerAlias = ExampleViewerAlias,
> extends Ent<TViewer> {
  extra: ContactInfo | null;
  contactId: ID;
  ownerId: ID;
  loadContact(): Promise<Contact | null>;
  loadContactX(): Promise<Contact>;
}

type Constructor<T extends IContactInfoBase = IContactInfoBase> = new (
  ...args: any[]
) => T;

function extractFromArgs<TViewer extends Viewer, TData extends Data>(
  args: any[],
): { viewer: TViewer; data: TData } {
  if (args.length !== 2) {
    throw new Error("args should be length 2");
  }
  return {
    viewer: args[0],
    data: args[1],
  };
}

export function ContactInfoBaseMixin<T extends Constructor>(BaseClass: T) {
  return class ContactInfoBaseMixin extends BaseClass {
    readonly extra: ContactInfo | null;
    readonly contactId: ID;
    readonly ownerId: ID;
    constructor(...args: any[]) {
      super(...args);
      const { data } = extractFromArgs(args);
      this.extra = data.extra;
      this.contactId = data.contact_id;
      this.ownerId = data.owner_id;
    }
  };
}
