/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  loadCustomCount,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { holidayLoader, holidayLoaderInfo } from "./loaders";
import { DayOfWeek, DayOfWeekAlt, NodeType } from "./types";
import { DayOfWeekMixin, IDayOfWeek } from "../internal";
import schema from "../../schema/holiday_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../viewer/viewer";

interface HolidayDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  day_of_week: DayOfWeek;
  day_of_week_alt: DayOfWeekAlt | null;
  label: string;
  date: Date;
}

export class HolidayBase
  extends DayOfWeekMixin(class {})
  implements Ent<ExampleViewerAlias>, IDayOfWeek
{
  protected readonly data: HolidayDBData;
  readonly nodeType = NodeType.Holiday;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly label: string;
  readonly date: Date;

  constructor(public viewer: ExampleViewerAlias, data: Data) {
    // @ts-ignore pass to mixin
    super(viewer, data);
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.label = data.label;
    this.date = data.date;
    // @ts-expect-error
    this.data = data;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, ExampleViewerAlias> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      HolidayBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      HolidayBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      HolidayBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    query: CustomQuery,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      {
        ...HolidayBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
    )) as T[];
  }

  static async loadCustomData<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<HolidayDBData[]> {
    return (await loadCustomData(
      {
        ...HolidayBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    )) as HolidayDBData[];
  }

  static async loadCustomCount<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<number> {
    return loadCustomCount(
      {
        ...HolidayBase.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<HolidayDBData | null> {
    const row = await holidayLoader.createLoader(context).load(id);
    if (!row) {
      return null;
    }
    return row as HolidayDBData;
  }

  static async loadRawDataX<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<HolidayDBData> {
    const row = await holidayLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row as HolidayDBData;
  }

  static loaderOptions<T extends HolidayBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
  ): LoadEntOptions<T, ExampleViewerAlias> {
    return {
      tableName: holidayLoaderInfo.tableName,
      fields: holidayLoaderInfo.fields,
      ent: this,
      loaderFactory: holidayLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (HolidayBase.schemaFields != null) {
      return HolidayBase.schemaFields;
    }
    return (HolidayBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return HolidayBase.getSchemaFields().get(key);
  }
}
