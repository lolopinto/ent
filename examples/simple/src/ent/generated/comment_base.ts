/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  loadCustomCount,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { loadEntByType, loadEntXByType } from "./loadAny";
import { CommentDBData, commentLoader, commentLoaderInfo } from "./loaders";
import { NodeType } from "./types";
import {
  ArticleToCommentsQuery,
  CommentArticleToCommentsQuery,
  CommentToPostQuery,
  CommentsFromAttachmentQuery,
  User,
} from "../internal";
import schema from "../../schema/comment_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../viewer/viewer";

export class CommentBase implements Ent<ExampleViewerAlias> {
  protected readonly data: CommentDBData;
  readonly nodeType = NodeType.Comment;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly authorId: ID;
  readonly body: string;
  readonly articleId: ID;
  readonly articleType: string;
  readonly attachmentId: ID | null;
  readonly attachmentType: string | null;
  readonly stickerId: ID | null;
  readonly stickerType: string | null;

  constructor(public viewer: ExampleViewerAlias, data: Data) {
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.authorId = data.author_id;
    this.body = data.body;
    this.articleId = data.article_id;
    this.articleType = data.article_type;
    this.attachmentId = data.attachment_id;
    this.attachmentType = data.attachment_type;
    this.stickerId = data.sticker_id;
    this.stickerType = data.sticker_type;
    // @ts-expect-error
    this.data = data;
  }

  __setRawDBData<CommentDBData>(data: CommentDBData) {}

  /** used by some ent internals to get access to raw db data. should not be depended on. may not always be on the ent **/
  ___getRawDBData(): CommentDBData {
    return this.data;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, ExampleViewerAlias> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      CommentBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      CommentBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      CommentBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    query: CustomQuery<CommentDBData>,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      {
        ...CommentBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
    )) as T[];
  }

  static async loadCustomData<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery<CommentDBData>,
    context?: Context,
  ): Promise<CommentDBData[]> {
    return loadCustomData<CommentDBData, CommentDBData>(
      {
        ...CommentBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    );
  }

  static async loadCustomCount<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery<CommentDBData>,
    context?: Context,
  ): Promise<number> {
    return loadCustomCount(
      {
        ...CommentBase.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<CommentDBData | null> {
    return commentLoader.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<CommentDBData> {
    const row = await commentLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static queryFromArticle<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    ent: Ent<ExampleViewerAlias>,
  ): ArticleToCommentsQuery {
    return ArticleToCommentsQuery.query(viewer, ent);
  }

  static queryFromAttachment<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    ent: Ent<ExampleViewerAlias>,
  ): CommentsFromAttachmentQuery {
    return CommentsFromAttachmentQuery.query(viewer, ent);
  }

  static loaderOptions<T extends CommentBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
  ): LoadEntOptions<T, ExampleViewerAlias, CommentDBData> {
    return {
      tableName: commentLoaderInfo.tableName,
      fields: commentLoaderInfo.fields,
      ent: this,
      loaderFactory: commentLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (CommentBase.schemaFields != null) {
      return CommentBase.schemaFields;
    }
    return (CommentBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return CommentBase.getSchemaFields().get(key);
  }

  queryPost(): CommentToPostQuery {
    return CommentToPostQuery.query(this.viewer, this.id);
  }

  queryArticles(): CommentArticleToCommentsQuery {
    return CommentArticleToCommentsQuery.query(this.viewer, this);
  }

  async loadArticle(): Promise<Ent | null> {
    return loadEntByType(
      this.viewer,
      this.articleType as unknown as NodeType,
      this.articleId,
    );
  }

  loadArticleX(): Promise<Ent> {
    return loadEntXByType(
      this.viewer,
      this.articleType as unknown as NodeType,
      this.articleId,
    );
  }

  async loadAttachment(): Promise<Ent | null> {
    if (!this.attachmentId) {
      return null;
    }
    return loadEntByType(
      this.viewer,
      this.attachmentType as unknown as NodeType,
      this.attachmentId,
    );
  }

  async loadAuthor(): Promise<User | null> {
    return loadEnt(this.viewer, this.authorId, User.loaderOptions());
  }

  loadAuthorX(): Promise<User> {
    return loadEntX(this.viewer, this.authorId, User.loaderOptions());
  }

  async loadSticker(): Promise<Ent | null> {
    if (!this.stickerId) {
      return null;
    }
    return loadEntByType(
      this.viewer,
      this.stickerType as unknown as NodeType,
      this.stickerId,
    );
  }
}
