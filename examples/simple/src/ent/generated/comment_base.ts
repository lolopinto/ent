/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  convertDate,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { loadEntByType, loadEntXByType } from "./loadAny";
import { commentLoader, commentLoaderInfo } from "./loaders";
import {
  ArticleToCommentsQuery,
  CommentToPostQuery,
  NodeType,
  User,
} from "../internal";
import schema from "../../schema/comment_schema";
import { ExampleViewer } from "../../viewer/viewer";

interface CommentDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  author_id: ID;
  body: string;
  article_id: ID;
  article_type: string;
}

export class CommentBase implements Ent<ExampleViewer> {
  readonly nodeType = NodeType.Comment;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly authorID: ID;
  readonly body: string;
  readonly articleID: ID;
  readonly articleType: string;

  constructor(public viewer: ExampleViewer, protected data: Data) {
    this.id = data.id;
    this.createdAt = convertDate(data.created_at);
    this.updatedAt = convertDate(data.updated_at);
    this.authorID = data.author_id;
    this.body = data.body;
    this.articleID = data.article_id;
    this.articleType = data.article_type;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, ExampleViewer> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    viewer: ExampleViewer,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      CommentBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    viewer: ExampleViewer,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      CommentBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    viewer: ExampleViewer,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      CommentBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    viewer: ExampleViewer,
    query: CustomQuery,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      CommentBase.loaderOptions.apply(this),
      query,
    )) as T[];
  }

  static async loadCustomData<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<CommentDBData[]> {
    return (await loadCustomData(
      CommentBase.loaderOptions.apply(this),
      query,
      context,
    )) as CommentDBData[];
  }

  static async loadRawData<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<CommentDBData | null> {
    const row = await commentLoader.createLoader(context).load(id);
    if (!row) {
      return null;
    }
    return row as CommentDBData;
  }

  static async loadRawDataX<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<CommentDBData> {
    const row = await commentLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row as CommentDBData;
  }

  static queryFromArticle<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
    viewer: ExampleViewer,
    ent: Ent<ExampleViewer>,
  ): ArticleToCommentsQuery {
    return ArticleToCommentsQuery.query(viewer, ent);
  }

  static loaderOptions<T extends CommentBase>(
    this: new (viewer: ExampleViewer, data: Data) => T,
  ): LoadEntOptions<T, ExampleViewer> {
    return {
      tableName: commentLoaderInfo.tableName,
      fields: commentLoaderInfo.fields,
      ent: this,
      loaderFactory: commentLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (CommentBase.schemaFields != null) {
      return CommentBase.schemaFields;
    }
    return (CommentBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return CommentBase.getSchemaFields().get(key);
  }

  queryPost(): CommentToPostQuery {
    return CommentToPostQuery.query(this.viewer, this.id);
  }

  async loadArticle(): Promise<Ent | null> {
    return loadEntByType(
      this.viewer,
      this.articleType as unknown as NodeType,
      this.articleID,
    );
  }

  loadArticleX(): Promise<Ent> {
    return loadEntXByType(
      this.viewer,
      this.articleType as unknown as NodeType,
      this.articleID,
    );
  }

  async loadAuthor(): Promise<User | null> {
    return loadEnt(this.viewer, this.authorID, User.loaderOptions());
  }

  loadAuthorX(): Promise<User> {
    return loadEntX(this.viewer, this.authorID, User.loaderOptions());
  }
}
