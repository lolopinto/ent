/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { ContactPhoneNumber } from "../../..";
import {
  ContactPhoneNumberBuilder,
  ContactPhoneNumberInput,
} from "./contact_phone_number_builder";

export class DeleteContactPhoneNumberActionBase
  implements
    Action<
      ContactPhoneNumber,
      ContactPhoneNumberBuilder<ContactPhoneNumberInput>,
      ContactPhoneNumberInput
    >
{
  public readonly builder: ContactPhoneNumberBuilder<ContactPhoneNumberInput>;
  public readonly viewer: Viewer;
  protected contactPhoneNumber: ContactPhoneNumber;

  constructor(viewer: Viewer, contactPhoneNumber: ContactPhoneNumber) {
    this.viewer = viewer;
    this.builder = new ContactPhoneNumberBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      contactPhoneNumber,
    );
    this.contactPhoneNumber = contactPhoneNumber;
  }

  getPrivacyPolicy(): PrivacyPolicy<ContactPhoneNumber> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): ContactPhoneNumberInput {
    return {};
  }

  async changeset(): Promise<Changeset<ContactPhoneNumber>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteContactPhoneNumberActionBase>(
    this: new (viewer: Viewer, contactPhoneNumber: ContactPhoneNumber) => T,
    viewer: Viewer,
    contactPhoneNumber: ContactPhoneNumber,
  ): T {
    return new this(viewer, contactPhoneNumber);
  }

  static async saveXFromID<T extends DeleteContactPhoneNumberActionBase>(
    this: new (viewer: Viewer, contactPhoneNumber: ContactPhoneNumber) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    const contactPhoneNumber = await ContactPhoneNumber.loadX(viewer, id);
    return new this(viewer, contactPhoneNumber).saveX();
  }
}
