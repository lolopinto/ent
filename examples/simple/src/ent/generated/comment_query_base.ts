/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  CustomEdgeQueryBase,
  EdgeQuerySource,
  Ent,
  ID,
  IndexLoaderFactory,
  RawCountLoaderFactory,
} from "@snowtop/ent";
import { getLoaderOptions } from "./loadAny";
import {
  Comment,
  CommentToPostEdge,
  EdgeType,
  NodeType,
  commentLoader,
} from "../internal";
import { ExampleViewer } from "../../viewer/viewer";

export const commentToPostCountLoaderFactory = new AssocEdgeCountLoaderFactory(
  EdgeType.CommentToPost,
);
export const commentToPostDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.CommentToPost,
  () => CommentToPostEdge,
);

export const articleToCommentsCountLoaderFactory = new RawCountLoaderFactory({
  ...Comment.loaderOptions(),
  groupCol: "article_id",
});
export const articleToCommentsDataLoaderFactory = new IndexLoaderFactory(
  Comment.loaderOptions(),
  "article_id",
  {
    toPrime: [commentLoader],
  },
);

export abstract class CommentToPostQueryBase extends AssocEdgeQueryBase<
  Comment,
  Ent<ExampleViewer>,
  CommentToPostEdge,
  ExampleViewer
> {
  constructor(
    viewer: ExampleViewer,
    src: EdgeQuerySource<Comment, Ent<ExampleViewer>, ExampleViewer>,
  ) {
    super(
      viewer,
      src,
      commentToPostCountLoaderFactory,
      commentToPostDataLoaderFactory,
      (str) => getLoaderOptions(str as NodeType),
    );
  }

  static query<T extends CommentToPostQueryBase>(
    this: new (
      viewer: ExampleViewer,
      src: EdgeQuerySource<Comment, Ent<ExampleViewer>>,
    ) => T,
    viewer: ExampleViewer,
    src: EdgeQuerySource<Comment, Ent<ExampleViewer>>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return Comment.load(this.viewer, id);
  }
}

export class ArticleToCommentsQueryBase extends CustomEdgeQueryBase<
  Ent<ExampleViewer>,
  Comment,
  ExampleViewer
> {
  constructor(viewer: ExampleViewer, private srcEnt: Ent<ExampleViewer>) {
    super(viewer, {
      src: srcEnt,
      countLoaderFactory: articleToCommentsCountLoaderFactory,
      dataLoaderFactory: articleToCommentsDataLoaderFactory,
      options: Comment.loaderOptions(),
    });
  }

  static query<T extends ArticleToCommentsQueryBase>(
    this: new (viewer: ExampleViewer, src: Ent<ExampleViewer>) => T,
    viewer: ExampleViewer,
    src: Ent<ExampleViewer>,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(_id: ID) {
    return this.srcEnt;
  }
}
