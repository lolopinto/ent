/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { ID, PrivacyPolicy } from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { UserStatistics } from "../../..";
import {
  UserStatisticsBuilder,
  UserStatisticsInput,
} from "./user_statistics_builder";
import schema from "../../../../schema/user_statistics_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export type DeleteUserStatisticsActionTriggers = (
  | Trigger<
      UserStatistics,
      UserStatisticsBuilder<UserStatisticsInput, UserStatistics>,
      ExampleViewerAlias,
      UserStatisticsInput,
      UserStatistics
    >
  | Trigger<
      UserStatistics,
      UserStatisticsBuilder<UserStatisticsInput, UserStatistics>,
      ExampleViewerAlias,
      UserStatisticsInput,
      UserStatistics
    >[]
)[];

export type DeleteUserStatisticsActionObservers = Observer<
  UserStatistics,
  UserStatisticsBuilder<UserStatisticsInput, UserStatistics>,
  ExampleViewerAlias,
  UserStatisticsInput,
  UserStatistics
>[];

export type DeleteUserStatisticsActionValidators = Validator<
  UserStatistics,
  UserStatisticsBuilder<UserStatisticsInput, UserStatistics>,
  ExampleViewerAlias,
  UserStatisticsInput,
  UserStatistics
>[];

export class DeleteUserStatisticsActionBase
  implements
    Action<
      UserStatistics,
      UserStatisticsBuilder<UserStatisticsInput, UserStatistics>,
      ExampleViewerAlias,
      UserStatisticsInput,
      UserStatistics
    >
{
  public readonly builder: UserStatisticsBuilder<
    UserStatisticsInput,
    UserStatistics
  >;
  public readonly viewer: ExampleViewerAlias;
  protected readonly userStatistics: UserStatistics;

  constructor(viewer: ExampleViewerAlias, userStatistics: UserStatistics) {
    this.viewer = viewer;
    this.builder = new UserStatisticsBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      userStatistics,
    );
    this.userStatistics = userStatistics;
  }

  getPrivacyPolicy(): PrivacyPolicy<UserStatistics, ExampleViewerAlias> {
    if (schema.defaultActionPrivacy === undefined) {
      throw new Error(
        `defaultActionPrivacy in schema UserStatistics is undefined. This is likely a bug in the codegen. Please file an issue.`,
      );
    }

    return typeof schema.defaultActionPrivacy === "function"
      ? schema.defaultActionPrivacy()
      : schema.defaultActionPrivacy;
  }

  getTriggers(): DeleteUserStatisticsActionTriggers {
    return [];
  }

  getObservers(): DeleteUserStatisticsActionObservers {
    return [];
  }

  getValidators(): DeleteUserStatisticsActionValidators {
    return [];
  }

  getInput(): UserStatisticsInput {
    return {};
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteUserStatisticsActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      userStatistics: UserStatistics,
    ) => T,
    viewer: ExampleViewerAlias,
    userStatistics: UserStatistics,
  ): T {
    return new this(viewer, userStatistics);
  }

  static async saveXFromID<T extends DeleteUserStatisticsActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      userStatistics: UserStatistics,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<void> {
    const userStatistics = await UserStatistics.loadX(viewer, id);
    return new this(viewer, userStatistics).saveX();
  }
}
