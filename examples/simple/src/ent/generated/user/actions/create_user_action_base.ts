/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  CreateRowOptions,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { User } from "../../..";
import {
  UserAccountStatus,
  UserDaysOff,
  UserIntEnum,
  UserNestedObjectList,
  UserPreferredShift,
  UserPrefsDiff,
  UserPrefsStruct,
  UserSuperNestedObject,
} from "../../types";
import { UserBuilder } from "./user_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface UserCreateInput {
  firstName: string;
  lastName: string;
  accountStatus?: UserAccountStatus | null;
  emailAddress: string;
  phoneNumber: string;
  password: string;
  nicknames?: string[] | null;
  prefs?: UserPrefsStruct | null;
  prefsDiff?: UserPrefsDiff | null;
  daysOff?: UserDaysOff[] | null;
  preferredShift?: UserPreferredShift[] | null;
  funUuids?: ID[] | null;
  prefsList?: UserPrefsStruct[] | null;
  superNestedObject?: UserSuperNestedObject | null;
  nestedList?: UserNestedObjectList[] | null;
  intEnum?: UserIntEnum | null;
  accountStatusOverride?: string | null;
}

export type CreateUserActionTriggers = (
  | Trigger<
      User,
      UserBuilder<UserCreateInput, User | null>,
      ExampleViewerAlias,
      UserCreateInput,
      User | null
    >
  | Trigger<
      User,
      UserBuilder<UserCreateInput, User | null>,
      ExampleViewerAlias,
      UserCreateInput,
      User | null
    >[]
)[];

export type CreateUserActionObservers = Observer<
  User,
  UserBuilder<UserCreateInput, User | null>,
  ExampleViewerAlias,
  UserCreateInput,
  User | null
>[];

export type CreateUserActionValidators = Validator<
  User,
  UserBuilder<UserCreateInput, User | null>,
  ExampleViewerAlias,
  UserCreateInput,
  User | null
>[];

type UpsertCols = "email_address" | "phone_number";
type UpsertConstraints =
  | "users_unique_email_address"
  | "users_unique_phone_number";
type UnionKeys<T> = T extends T ? keyof T : never;
type Expand<T> = T extends T ? { [K in keyof T]: T[K] } : never;
type OneOf<T extends {}[]> = {
  [K in keyof T]: Expand<
    T[K] & Partial<Record<Exclude<UnionKeys<T[number]>, keyof T[K]>, never>>
  >;
}[number];
export type CreateUserActionUpsertOptions = { update_cols?: string[] } & OneOf<
  [{ column: UpsertCols }, { constraint: UpsertConstraints }]
>;

export class CreateUserActionBase
  implements
    Action<
      User,
      UserBuilder<UserCreateInput, User | null>,
      ExampleViewerAlias,
      UserCreateInput,
      User | null
    >
{
  public readonly builder: UserBuilder<UserCreateInput, User | null>;
  public readonly viewer: ExampleViewerAlias;
  protected input: UserCreateInput;

  constructor(viewer: ExampleViewerAlias, input: UserCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new UserBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<User, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateUserActionTriggers {
    return [];
  }

  getObservers(): CreateUserActionObservers {
    return [];
  }

  getValidators(): CreateUserActionValidators {
    return [];
  }

  getInput(): UserCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<User | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<User> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  async upsert_BETA(
    options: CreateUserActionUpsertOptions,
  ): Promise<User | null> {
    const opts: CreateRowOptions["onConflict"] = {
      onConflictCols: [],
      updateCols: options.update_cols,
    };

    if (options.column) {
      opts.onConflictCols = [options.column];
    }

    if (options.constraint) {
      opts.onConflictConstraint = options.constraint;
    }
    this.builder.orchestrator.setOnConflictOptions(opts);
    return this.save();
  }

  async upsert_BETAX(options: CreateUserActionUpsertOptions): Promise<User> {
    const opts: CreateRowOptions["onConflict"] = {
      onConflictCols: [],
      updateCols: options.update_cols,
    };

    if (options.column) {
      opts.onConflictCols = [options.column];
    }

    if (options.constraint) {
      opts.onConflictConstraint = options.constraint;
    }
    this.builder.orchestrator.setOnConflictOptions(opts);
    return this.saveX();
  }

  static create<T extends CreateUserActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      input: UserCreateInput,
    ) => T,
    viewer: ExampleViewerAlias,
    input: UserCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
