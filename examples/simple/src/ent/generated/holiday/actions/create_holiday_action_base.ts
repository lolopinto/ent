/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { DayOfWeek, DayOfWeekAlt, Holiday } from "../../..";
import { HolidayBuilder } from "./holiday_builder";

export interface HolidayCreateInput {
  dayOfWeek: DayOfWeek;
  dayOfWeekAlt?: DayOfWeekAlt | null;
  label: string;
  date: Date;
}

export class CreateHolidayActionBase
  implements
    Action<
      Holiday,
      HolidayBuilder<HolidayCreateInput, Holiday | null>,
      HolidayCreateInput,
      Holiday | null
    >
{
  public readonly builder: HolidayBuilder<HolidayCreateInput, Holiday | null>;
  public readonly viewer: Viewer;
  protected input: HolidayCreateInput;

  constructor(viewer: Viewer, input: HolidayCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new HolidayBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<Holiday> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): HolidayCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<Holiday>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Holiday | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Holiday> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateHolidayActionBase>(
    this: new (viewer: Viewer, input: HolidayCreateInput) => T,
    viewer: Viewer,
    input: HolidayCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
