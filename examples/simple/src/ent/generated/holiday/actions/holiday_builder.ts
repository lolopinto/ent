/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { Ent, ID } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  OrchestratorOptions,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { Holiday } from "../../..";
import { holidayLoaderInfo } from "../../loaders";
import { DayOfWeek, DayOfWeekAlt, NodeType } from "../../types";
import schema from "../../../../schema/holiday_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface HolidayInput {
  dayOfWeek?: DayOfWeek;
  dayOfWeekAlt?: DayOfWeekAlt | null;
  label?: string;
  date?: Date;
  // allow other properties. useful for action-only fields
  [x: string]: any;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

type MaybeNull<T extends Ent> = T | null;
type TMaybleNullableEnt<T extends Ent> = T | MaybeNull<T>;

export class HolidayBuilder<
  TInput extends HolidayInput = HolidayInput,
  TExistingEnt extends TMaybleNullableEnt<Holiday> = Holiday | null,
> implements Builder<Holiday, ExampleViewerAlias, TExistingEnt>
{
  orchestrator: Orchestrator<Holiday, TInput, ExampleViewerAlias, TExistingEnt>;
  readonly placeholderID: ID;
  readonly ent = Holiday;
  readonly nodeType = NodeType.Holiday;
  private input: TInput;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: ExampleViewerAlias,
    public readonly operation: WriteOperation,
    action: Action<
      Holiday,
      Builder<Holiday, ExampleViewerAlias, TExistingEnt>,
      ExampleViewerAlias,
      TInput,
      TExistingEnt
    >,
    public readonly existingEnt: TExistingEnt,
    opts?: Partial<
      OrchestratorOptions<Holiday, TInput, ExampleViewerAlias, TExistingEnt>
    >,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-Holiday`;
    this.input = action.getInput();
    const updateInput = (d: HolidayInput) => this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "holidays",
      key: "id",
      loaderOptions: Holiday.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
      fieldInfo: holidayLoaderInfo.fieldInfo,
      ...opts,
    });
  }

  getInput(): TInput {
    return this.input;
  }

  updateInput(input: HolidayInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  deleteInputKey(key: keyof HolidayInput) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  // this returns the id of the existing ent or the id of the ent that's being created
  async getEntID() {
    if (this.existingEnt) {
      return this.existingEnt.id;
    }
    const edited = await this.orchestrator.getEditedData();
    if (!edited.id) {
      throw new Error(
        `couldn't get the id field. should have been set by 'defaultValueOnCreate'`,
      );
    }
    return edited.id;
  }
  async build(): Promise<Changeset> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<Holiday | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<Holiday> {
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const input = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("dayOfWeek", input.dayOfWeek);
    addField("dayOfWeekAlt", input.dayOfWeekAlt);
    addField("label", input.label);
    addField("date", input.date);
    return result;
  }

  isBuilder<T extends Ent>(
    node: ID | T | Builder<T, any>,
  ): node is Builder<T, any> {
    return (node as Builder<T, any>).placeholderID !== undefined;
  }

  // get value of dayOfWeek. Retrieves it from the input if specified or takes it from existingEnt
  getNewDayOfWeekValue(): DayOfWeek {
    if (this.input.dayOfWeek !== undefined) {
      return this.input.dayOfWeek;
    }

    if (!this.existingEnt) {
      throw new Error(
        "no value to return for `dayOfWeek` since not in input and no existingEnt",
      );
    }
    return this.existingEnt.dayOfWeek;
  }

  // get value of dayOfWeekAlt. Retrieves it from the input if specified or takes it from existingEnt
  getNewDayOfWeekAltValue(): DayOfWeekAlt | null {
    if (this.input.dayOfWeekAlt !== undefined) {
      return this.input.dayOfWeekAlt;
    }

    return this.existingEnt?.dayOfWeekAlt ?? null;
  }

  // get value of label. Retrieves it from the input if specified or takes it from existingEnt
  getNewLabelValue(): string {
    if (this.input.label !== undefined) {
      return this.input.label;
    }

    if (!this.existingEnt) {
      throw new Error(
        "no value to return for `label` since not in input and no existingEnt",
      );
    }
    return this.existingEnt.label;
  }

  // get value of date. Retrieves it from the input if specified or takes it from existingEnt
  getNewDateValue(): Date {
    if (this.input.date !== undefined) {
      return this.input.date;
    }

    if (!this.existingEnt) {
      throw new Error(
        "no value to return for `date` since not in input and no existingEnt",
      );
    }
    return this.existingEnt.date;
  }
}
