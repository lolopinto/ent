/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Holiday } from "../../..";
import { HolidayBuilder } from "./holiday_builder";
import { DayOfWeek, DayOfWeekAlt } from "../../types";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface CustomEditHolidayInput {
  dayOfWeek?: DayOfWeek;
  dayOfWeekAlt?: DayOfWeekAlt;
  label?: string;
  date?: Date;
}

export type CustomEditHolidayActionTriggers = (
  | Trigger<
      Holiday,
      HolidayBuilder<CustomEditHolidayInput, Holiday>,
      ExampleViewerAlias,
      CustomEditHolidayInput,
      Holiday
    >
  | Trigger<
      Holiday,
      HolidayBuilder<CustomEditHolidayInput, Holiday>,
      ExampleViewerAlias,
      CustomEditHolidayInput,
      Holiday
    >[]
)[];

export type CustomEditHolidayActionObservers = Observer<
  Holiday,
  HolidayBuilder<CustomEditHolidayInput, Holiday>,
  ExampleViewerAlias,
  CustomEditHolidayInput,
  Holiday
>[];

export type CustomEditHolidayActionValidators = Validator<
  Holiday,
  HolidayBuilder<CustomEditHolidayInput, Holiday>,
  ExampleViewerAlias,
  CustomEditHolidayInput,
  Holiday
>[];

export class CustomEditHolidayActionBase
  implements
    Action<
      Holiday,
      HolidayBuilder<CustomEditHolidayInput, Holiday>,
      ExampleViewerAlias,
      CustomEditHolidayInput,
      Holiday
    >
{
  public readonly builder: HolidayBuilder<CustomEditHolidayInput, Holiday>;
  public readonly viewer: ExampleViewerAlias;
  protected input: CustomEditHolidayInput;
  protected readonly holiday: Holiday;

  constructor(
    viewer: ExampleViewerAlias,
    holiday: Holiday,
    input: CustomEditHolidayInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new HolidayBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      holiday,
    );
    this.holiday = holiday;
  }

  getPrivacyPolicy(): PrivacyPolicy<Holiday, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CustomEditHolidayActionTriggers {
    return [];
  }

  getObservers(): CustomEditHolidayActionObservers {
    return [];
  }

  getValidators(): CustomEditHolidayActionValidators {
    return [];
  }

  getInput(): CustomEditHolidayInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Holiday | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Holiday> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CustomEditHolidayActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      holiday: Holiday,
      input: CustomEditHolidayInput,
    ) => T,
    viewer: ExampleViewerAlias,
    holiday: Holiday,
    input: CustomEditHolidayInput,
  ): T {
    return new this(viewer, holiday, input);
  }

  static async saveFromID<T extends CustomEditHolidayActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      holiday: Holiday,
      input: CustomEditHolidayInput,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
    input: CustomEditHolidayInput,
  ): Promise<Holiday | null> {
    const holiday = await Holiday.load(viewer, id);
    if (holiday === null) {
      return null;
    }
    return new this(viewer, holiday, input).save();
  }
}
