/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { DayOfWeek, DayOfWeekAlt, HoursOfOperation } from "../../..";
import { NodeType } from "../../const";
import schema from "../../../../schema/hours_of_operation_schema";

export interface HoursOfOperationInput {
  dayOfWeek?: DayOfWeek;
  dayOfWeekAlt?: DayOfWeekAlt | null;
  open?: string;
  close?: string;
  // allow other properties. useful for action-only fields
  [x: string]: any;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class HoursOfOperationBuilder<
  TData extends HoursOfOperationInput = HoursOfOperationInput,
> implements Builder<HoursOfOperation>
{
  orchestrator: Orchestrator<HoursOfOperation, TData>;
  readonly placeholderID: ID;
  readonly ent = HoursOfOperation;
  readonly nodeType = NodeType.HoursOfOperation;
  private input: TData;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: Action<HoursOfOperation, Builder<HoursOfOperation>, TData>,
    public readonly existingEnt?: HoursOfOperation | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-HoursOfOperation`;
    this.input = action.getInput();
    const updateInput = (d: HoursOfOperationInput) =>
      this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "hours_of_operations",
      key: "id",
      loaderOptions: HoursOfOperation.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
    });
  }

  getInput(): TData {
    return this.input;
  }

  updateInput(input: HoursOfOperationInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  deleteInputKey(key: keyof HoursOfOperationInput) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  async build(): Promise<Changeset<HoursOfOperation>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<HoursOfOperation | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<HoursOfOperation> {
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const fields = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("dayOfWeek", fields.dayOfWeek);
    addField("dayOfWeekAlt", fields.dayOfWeekAlt);
    addField("open", fields.open);
    addField("close", fields.close);
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of dayOfWeek. Retrieves it from the input if specified or takes it from existingEnt
  getNewDayOfWeekValue(): DayOfWeek | undefined {
    if (this.input.dayOfWeek !== undefined) {
      return this.input.dayOfWeek;
    }
    return this.existingEnt?.dayOfWeek;
  }

  // get value of dayOfWeekAlt. Retrieves it from the input if specified or takes it from existingEnt
  getNewDayOfWeekAltValue(): DayOfWeekAlt | null | undefined {
    if (this.input.dayOfWeekAlt !== undefined) {
      return this.input.dayOfWeekAlt;
    }
    return this.existingEnt?.dayOfWeekAlt;
  }

  // get value of open. Retrieves it from the input if specified or takes it from existingEnt
  getNewOpenValue(): string | undefined {
    if (this.input.open !== undefined) {
      return this.input.open;
    }
    return this.existingEnt?.open;
  }

  // get value of close. Retrieves it from the input if specified or takes it from existingEnt
  getNewCloseValue(): string | undefined {
    if (this.input.close !== undefined) {
      return this.input.close;
    }
    return this.existingEnt?.close;
  }
}
