/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  Ent,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Comment } from "../../..";
import { CommentBuilder } from "./comment_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface CommentEditInput {
  body?: string;
  articleID?: ID | Builder<Ent<ExampleViewerAlias>, ExampleViewerAlias>;
  articleType?: string;
  stickerID?: ID | null | Builder<Ent<ExampleViewerAlias>, ExampleViewerAlias>;
  stickerType?: string | null;
}

export type EditCommentActionTriggers = (
  | Trigger<
      Comment,
      CommentBuilder<CommentEditInput, Comment>,
      ExampleViewerAlias,
      CommentEditInput,
      Comment
    >
  | Trigger<
      Comment,
      CommentBuilder<CommentEditInput, Comment>,
      ExampleViewerAlias,
      CommentEditInput,
      Comment
    >[]
)[];

export type EditCommentActionObservers = Observer<
  Comment,
  CommentBuilder<CommentEditInput, Comment>,
  ExampleViewerAlias,
  CommentEditInput,
  Comment
>[];

export type EditCommentActionValidators = Validator<
  Comment,
  CommentBuilder<CommentEditInput, Comment>,
  ExampleViewerAlias,
  CommentEditInput,
  Comment
>[];

export class EditCommentActionBase
  implements
    Action<
      Comment,
      CommentBuilder<CommentEditInput, Comment>,
      ExampleViewerAlias,
      CommentEditInput,
      Comment
    >
{
  public readonly builder: CommentBuilder<CommentEditInput, Comment>;
  public readonly viewer: ExampleViewerAlias;
  protected input: CommentEditInput;
  protected readonly comment: Comment;

  constructor(
    viewer: ExampleViewerAlias,
    comment: Comment,
    input: CommentEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new CommentBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      comment,
    );
    this.comment = comment;
  }

  getPrivacyPolicy(): PrivacyPolicy<Comment, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): EditCommentActionTriggers {
    return [];
  }

  getObservers(): EditCommentActionObservers {
    return [];
  }

  getValidators(): EditCommentActionValidators {
    return [];
  }

  getInput(): CommentEditInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Comment | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Comment> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditCommentActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      comment: Comment,
      input: CommentEditInput,
    ) => T,
    viewer: ExampleViewerAlias,
    comment: Comment,
    input: CommentEditInput,
  ): T {
    return new this(viewer, comment, input);
  }

  static async saveXFromID<T extends EditCommentActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      comment: Comment,
      input: CommentEditInput,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
    input: CommentEditInput,
  ): Promise<Comment> {
    const comment = await Comment.loadX(viewer, id);
    return new this(viewer, comment, input).saveX();
  }
}
