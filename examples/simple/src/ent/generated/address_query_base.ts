/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  EdgeQuerySource,
  ID,
  Viewer,
} from "@snowtop/ent";
import {
  Address,
  AddressToHostedEventsEdge,
  EdgeType,
  Event,
  EventToAttendingQuery,
  EventToDeclinedQuery,
  EventToHostsQuery,
  EventToInvitedQuery,
  EventToMaybeQuery,
} from "../internal";

export const addressToHostedEventsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.AddressToHostedEvents);
export const addressToHostedEventsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.AddressToHostedEvents,
    () => AddressToHostedEventsEdge,
  );

export abstract class AddressToHostedEventsQueryBase extends AssocEdgeQueryBase<
  Address,
  Event,
  AddressToHostedEventsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Address, Event>) {
    super(
      viewer,
      src,
      addressToHostedEventsCountLoaderFactory,
      addressToHostedEventsDataLoaderFactory,
      Event.loaderOptions(),
    );
  }

  static query<T extends AddressToHostedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Address, Event>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Address, Event>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return Address.load(this.viewer, id);
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this);
  }
}
