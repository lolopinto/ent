/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { ID } from "@snowtop/ent";

export enum NodeType {
  // Address is the node type for the Address object. Used to identify this node in edges and other places.
  Address = "address",
  // AuthCode is the node type for the AuthCode object. Used to identify this node in edges and other places.
  AuthCode = "authCode",
  // Comment is the node type for the Comment object. Used to identify this node in edges and other places.
  Comment = "comment",
  // Contact is the node type for the Contact object. Used to identify this node in edges and other places.
  Contact = "contact",
  // ContactEmail is the node type for the ContactEmail object. Used to identify this node in edges and other places.
  ContactEmail = "contactEmail",
  // ContactPhoneNumber is the node type for the ContactPhoneNumber object. Used to identify this node in edges and other places.
  ContactPhoneNumber = "contactPhoneNumber",
  // Event is the node type for the Event object. Used to identify this node in edges and other places.
  Event = "event",
  // Holiday is the node type for the Holiday object. Used to identify this node in edges and other places.
  Holiday = "holiday",
  // HoursOfOperation is the node type for the HoursOfOperation object. Used to identify this node in edges and other places.
  HoursOfOperation = "hoursOfOperation",
  // User is the node type for the User object. Used to identify this node in edges and other places.
  User = "user",
}

export enum EdgeType {
  // AddressToHostedEvents is the edgeType for the address to hostedevents edge.
  AddressToHostedEvents = "d1979d4b-d033-4562-b078-cc528fec25bb",
  // CommentToPost is the edgeType for the comment to post edge.
  CommentToPost = "f430af94-d38a-4aaa-a92f-cfc56b6f811b",
  // EventToAttending is the edgeType for the event to attending edge.
  EventToAttending = "6ebc0c47-ea29-4635-b991-95e44162174d",
  // EventToDeclined is the edgeType for the event to declined edge.
  EventToDeclined = "db8d2454-f7b2-4147-aae1-e666daf3f3c3",
  // EventToHosts is the edgeType for the event to hosts edge.
  EventToHosts = "ebe3e709-845c-4723-ac9c-29f983f2b8ea",
  // EventToInvited is the edgeType for the event to invited edge.
  EventToInvited = "a72f5f64-3580-44fd-9bd0-d1335b803a46",
  // EventToMaybe is the edgeType for the event to maybe edge.
  EventToMaybe = "b0f6311b-fdab-4c26-b6bf-b751e0997735",
  // GlobalToLoginAuth is the edgeType for the  to loginauth edge.
  GlobalToLoginAuth = "13eb6687-d226-4272-ba65-d5e33e00954c",
  // ObjectToComments is the edgeType for the object to comments edge.
  ObjectToComments = "8caba9c4-8035-447f-9eb1-4dd09a2d250c",
  // ObjectToLikers is the edgeType for the object to likers edge.
  ObjectToLikers = "c9ccdad9-7aff-40e4-9a69-2c29cfa19763",
  // UserToCreatedEvents is the edgeType for the user to createdevents edge.
  UserToCreatedEvents = "daa3b2a3-8245-40ca-ae77-25bfb82578a7",
  // UserToDeclinedEvents is the edgeType for the user to declinedevents edge.
  UserToDeclinedEvents = "1c7c173b-63ce-4002-b121-4a87f82047dd",
  // UserToEventsAttending is the edgeType for the user to eventsattending edge.
  UserToEventsAttending = "2a98ba02-e342-4bb4-93f6-5d7ed02f5c48",
  // UserToFriends is the edgeType for the user to friends edge.
  UserToFriends = "d1a9316d-090f-4b02-b393-fd9372e2c905",
  // UserToHostedEvents is the edgeType for the user to usertohostedevents edge.
  UserToHostedEvents = "cf6542a4-8bae-427f-8a1f-01194047afb3",
  // UserToInvitedEvents is the edgeType for the user to invitedevents edge.
  UserToInvitedEvents = "e439f2b2-d93a-4d1a-83f0-865bda5c8337",
  // UserToLikes is the edgeType for the user to likes edge.
  UserToLikes = "745a20bf-4fdc-4862-b39f-569c4451db8f",
  // UserToMaybeEvents is the edgeType for the user to maybeevents edge.
  UserToMaybeEvents = "8d5b1dee-ce65-452e-9f8d-78eca1993800",
  // UserToSelfContact is the edgeType for the user to selfcontact edge.
  UserToSelfContact = "d504201d-cf3f-4eef-b6a0-0b46a7ae186b",
}

export enum CatBreed {
  Bengal = "bengal",
  Burmese = "burmese",
  Himalayan = "himalayan",
  Somali = "somali",
  Persian = "persian",
  Siamese = "siamese",
  Tabby = "tabby",
  Other = "other",
  Unknown = "%unknown%",
}

export function convertCatBreed(val: string): CatBreed {
  switch (val) {
    case CatBreed.Bengal:
    case CatBreed.Burmese:
    case CatBreed.Himalayan:
    case CatBreed.Somali:
    case CatBreed.Persian:
    case CatBreed.Siamese:
    case CatBreed.Tabby:
    case CatBreed.Other:
    case CatBreed.Unknown:
      return val;
    default:
      return CatBreed.Unknown;
  }
}

export function convertNullableCatBreed(val: string | null): CatBreed | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertCatBreed(val);
}

export function convertCatBreedList(val: string[]): CatBreed[] {
  return val.map((v) => convertCatBreed(v));
}

export function convertNullableCatBreedList(
  val: string[] | null,
): CatBreed[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertCatBreedList(val);
}

export enum ContactEmailLabel {
  Work = "work",
  Home = "home",
  Default = "default",
  Unknown = "unknown",
  Self = "self",
}

export function convertContactEmailLabel(val: string): ContactEmailLabel {
  switch (val) {
    case ContactEmailLabel.Work:
    case ContactEmailLabel.Home:
    case ContactEmailLabel.Default:
    case ContactEmailLabel.Unknown:
    case ContactEmailLabel.Self:
      return val;
    default:
      return ContactEmailLabel.Unknown;
  }
}

export function convertNullableContactEmailLabel(
  val: string | null,
): ContactEmailLabel | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactEmailLabel(val);
}

export function convertContactEmailLabelList(
  val: string[],
): ContactEmailLabel[] {
  return val.map((v) => convertContactEmailLabel(v));
}

export function convertNullableContactEmailLabelList(
  val: string[] | null,
): ContactEmailLabel[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactEmailLabelList(val);
}

export enum ContactInfoSource {
  Friend = "friend",
  Work = "work",
  Online = "online",
  Unknown = "%unknown%",
}

export function convertContactInfoSource(val: string): ContactInfoSource {
  switch (val) {
    case ContactInfoSource.Friend:
    case ContactInfoSource.Work:
    case ContactInfoSource.Online:
    case ContactInfoSource.Unknown:
      return val;
    default:
      return ContactInfoSource.Unknown;
  }
}

export function convertNullableContactInfoSource(
  val: string | null,
): ContactInfoSource | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactInfoSource(val);
}

export function convertContactInfoSourceList(
  val: string[],
): ContactInfoSource[] {
  return val.map((v) => convertContactInfoSource(v));
}

export function convertNullableContactInfoSourceList(
  val: string[] | null,
): ContactInfoSource[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactInfoSourceList(val);
}

export enum ContactPhoneNumberLabel {
  Work = "work",
  Home = "home",
  Default = "default",
  Unknown = "unknown",
}

export function convertContactPhoneNumberLabel(
  val: string,
): ContactPhoneNumberLabel {
  switch (val) {
    case ContactPhoneNumberLabel.Work:
    case ContactPhoneNumberLabel.Home:
    case ContactPhoneNumberLabel.Default:
    case ContactPhoneNumberLabel.Unknown:
      return val;
    default:
      return ContactPhoneNumberLabel.Unknown;
  }
}

export function convertNullableContactPhoneNumberLabel(
  val: string | null,
): ContactPhoneNumberLabel | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactPhoneNumberLabel(val);
}

export function convertContactPhoneNumberLabelList(
  val: string[],
): ContactPhoneNumberLabel[] {
  return val.map((v) => convertContactPhoneNumberLabel(v));
}

export function convertNullableContactPhoneNumberLabelList(
  val: string[] | null,
): ContactPhoneNumberLabel[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertContactPhoneNumberLabelList(val);
}

export enum DayOfWeek {
  Sunday = "Sunday",
  Monday = "Monday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
  Thursday = "Thursday",
  Friday = "Friday",
  Saturday = "Saturday",
  Unknown = "%Unknown%",
}

export function convertDayOfWeek(val: string): DayOfWeek {
  switch (val) {
    case DayOfWeek.Sunday:
    case DayOfWeek.Monday:
    case DayOfWeek.Tuesday:
    case DayOfWeek.Wednesday:
    case DayOfWeek.Thursday:
    case DayOfWeek.Friday:
    case DayOfWeek.Saturday:
    case DayOfWeek.Unknown:
      return val;
    default:
      return DayOfWeek.Unknown;
  }
}

export function convertNullableDayOfWeek(val: string | null): DayOfWeek | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDayOfWeek(val);
}

export function convertDayOfWeekList(val: string[]): DayOfWeek[] {
  return val.map((v) => convertDayOfWeek(v));
}

export function convertNullableDayOfWeekList(
  val: string[] | null,
): DayOfWeek[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDayOfWeekList(val);
}

export enum DayOfWeekAlt {
  Friday = "fri",
  Monday = "mon",
  Saturday = "sat",
  Sunday = "sun",
  Thursday = "thu",
  Tuesday = "tue",
  Unknown = "%unknown%",
  Wednesday = "wed",
}

export function convertDayOfWeekAlt(val: string): DayOfWeekAlt {
  switch (val) {
    case DayOfWeekAlt.Friday:
    case DayOfWeekAlt.Monday:
    case DayOfWeekAlt.Saturday:
    case DayOfWeekAlt.Sunday:
    case DayOfWeekAlt.Thursday:
    case DayOfWeekAlt.Tuesday:
    case DayOfWeekAlt.Unknown:
    case DayOfWeekAlt.Wednesday:
      return val;
    default:
      return DayOfWeekAlt.Unknown;
  }
}

export function convertNullableDayOfWeekAlt(
  val: string | null,
): DayOfWeekAlt | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDayOfWeekAlt(val);
}

export function convertDayOfWeekAltList(val: string[]): DayOfWeekAlt[] {
  return val.map((v) => convertDayOfWeekAlt(v));
}

export function convertNullableDayOfWeekAltList(
  val: string[] | null,
): DayOfWeekAlt[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDayOfWeekAltList(val);
}

export enum DogBreed {
  GermanShepherd = "german_shepherd",
  Labrador = "labrador",
  Pomerian = "pomerian",
  SiberianHusky = "siberian_husky",
  Poodle = "poodle",
  GoldenRetriever = "golden_retriever",
  Other = "other",
  Unknown = "%unknown%",
}

export function convertDogBreed(val: string): DogBreed {
  switch (val) {
    case DogBreed.GermanShepherd:
    case DogBreed.Labrador:
    case DogBreed.Pomerian:
    case DogBreed.SiberianHusky:
    case DogBreed.Poodle:
    case DogBreed.GoldenRetriever:
    case DogBreed.Other:
    case DogBreed.Unknown:
      return val;
    default:
      return DogBreed.Unknown;
  }
}

export function convertNullableDogBreed(val: string | null): DogBreed | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDogBreed(val);
}

export function convertDogBreedList(val: string[]): DogBreed[] {
  return val.map((v) => convertDogBreed(v));
}

export function convertNullableDogBreedList(
  val: string[] | null,
): DogBreed[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDogBreedList(val);
}

export enum DogBreedGroup {
  Sporting = "sporting",
  Hound = "hound",
  Working = "working",
  Terrier = "terrier",
  Toy = "toy",
  NonSporting = "non_sporting",
  Herding = "herding",
  Unknown = "%unknown%",
}

export function convertDogBreedGroup(val: string): DogBreedGroup {
  switch (val) {
    case DogBreedGroup.Sporting:
    case DogBreedGroup.Hound:
    case DogBreedGroup.Working:
    case DogBreedGroup.Terrier:
    case DogBreedGroup.Toy:
    case DogBreedGroup.NonSporting:
    case DogBreedGroup.Herding:
    case DogBreedGroup.Unknown:
      return val;
    default:
      return DogBreedGroup.Unknown;
  }
}

export function convertNullableDogBreedGroup(
  val: string | null,
): DogBreedGroup | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDogBreedGroup(val);
}

export function convertDogBreedGroupList(val: string[]): DogBreedGroup[] {
  return val.map((v) => convertDogBreedGroup(v));
}

export function convertNullableDogBreedGroupList(
  val: string[] | null,
): DogBreedGroup[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertDogBreedGroupList(val);
}

export enum EnumUsedInList {
  Yes = "yes",
  No = "no",
  Maybe = "maybe",
  Unknown = "%unknown%",
}

export function convertEnumUsedInList(val: string): EnumUsedInList {
  switch (val) {
    case EnumUsedInList.Yes:
    case EnumUsedInList.No:
    case EnumUsedInList.Maybe:
    case EnumUsedInList.Unknown:
      return val;
    default:
      return EnumUsedInList.Unknown;
  }
}

export function convertNullableEnumUsedInList(
  val: string | null,
): EnumUsedInList | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertEnumUsedInList(val);
}

export function convertEnumUsedInListList(val: string[]): EnumUsedInList[] {
  return val.map((v) => convertEnumUsedInList(v));
}

export function convertNullableEnumUsedInListList(
  val: string[] | null,
): EnumUsedInList[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertEnumUsedInListList(val);
}

export enum EventRsvpStatus {
  Attending = "attending",
  Declined = "declined",
  Maybe = "maybe",
  CanRsvp = "canRsvp",
  Unknown = "%Unknown%",
}

export function convertEventRsvpStatus(val: string): EventRsvpStatus {
  switch (val) {
    case EventRsvpStatus.Attending:
    case EventRsvpStatus.Declined:
    case EventRsvpStatus.Maybe:
    case EventRsvpStatus.CanRsvp:
    case EventRsvpStatus.Unknown:
      return val;
    default:
      return EventRsvpStatus.Unknown;
  }
}

export function convertNullableEventRsvpStatus(
  val: string | null,
): EventRsvpStatus | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertEventRsvpStatus(val);
}

export function convertEventRsvpStatusList(val: string[]): EventRsvpStatus[] {
  return val.map((v) => convertEventRsvpStatus(v));
}

export function convertNullableEventRsvpStatusList(
  val: string[] | null,
): EventRsvpStatus[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertEventRsvpStatusList(val);
}

export enum IntEnumUsedInList {
  Unknown = -9007199254740991,
  Yes = 1,
  No = 2,
  Maybe = 3,
}

export function convertIntEnumUsedInList(val: number): IntEnumUsedInList {
  switch (val) {
    case IntEnumUsedInList.Unknown:
    case IntEnumUsedInList.Yes:
    case IntEnumUsedInList.No:
    case IntEnumUsedInList.Maybe:
      return val;
    default:
      return IntEnumUsedInList.Unknown;
  }
}

export function convertNullableIntEnumUsedInList(
  val: number | null,
): IntEnumUsedInList | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertIntEnumUsedInList(val);
}

export function convertIntEnumUsedInListList(
  val: number[],
): IntEnumUsedInList[] {
  return val.map((v) => convertIntEnumUsedInList(v));
}

export function convertNullableIntEnumUsedInListList(
  val: number[] | null,
): IntEnumUsedInList[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertIntEnumUsedInListList(val);
}

export enum NestedObjNestedNestedEnum {
  Yes = "yes",
  No = "no",
  Maybe = "maybe",
  Unknown = "%unknown%",
}

export function convertNestedObjNestedNestedEnum(
  val: string,
): NestedObjNestedNestedEnum {
  switch (val) {
    case NestedObjNestedNestedEnum.Yes:
    case NestedObjNestedNestedEnum.No:
    case NestedObjNestedNestedEnum.Maybe:
    case NestedObjNestedNestedEnum.Unknown:
      return val;
    default:
      return NestedObjNestedNestedEnum.Unknown;
  }
}

export function convertNullableNestedObjNestedNestedEnum(
  val: string | null,
): NestedObjNestedNestedEnum | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNestedObjNestedNestedEnum(val);
}

export function convertNestedObjNestedNestedEnumList(
  val: string[],
): NestedObjNestedNestedEnum[] {
  return val.map((v) => convertNestedObjNestedNestedEnum(v));
}

export function convertNullableNestedObjNestedNestedEnumList(
  val: string[] | null,
): NestedObjNestedNestedEnum[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNestedObjNestedNestedEnumList(val);
}

export enum NotifType {
  MOBILE = "MOBILE",
  WEB = "WEB",
  EMAIL = "EMAIL",
  UNKNOWN = "%UNKNOWN%",
}

export function convertNotifType(val: string): NotifType {
  switch (val) {
    case NotifType.MOBILE:
    case NotifType.WEB:
    case NotifType.EMAIL:
    case NotifType.UNKNOWN:
      return val;
    default:
      return NotifType.UNKNOWN;
  }
}

export function convertNullableNotifType(val: string | null): NotifType | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNotifType(val);
}

export function convertNotifTypeList(val: string[]): NotifType[] {
  return val.map((v) => convertNotifType(v));
}

export function convertNullableNotifTypeList(
  val: string[] | null,
): NotifType[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNotifTypeList(val);
}

export enum NotifType2 {
  MOBILE = "MOBILE",
  WEB = "WEB",
  EMAIL = "EMAIL",
  UNKNOWN = "%UNKNOWN%",
}

export function convertNotifType2(val: string): NotifType2 {
  switch (val) {
    case NotifType2.MOBILE:
    case NotifType2.WEB:
    case NotifType2.EMAIL:
    case NotifType2.UNKNOWN:
      return val;
    default:
      return NotifType2.UNKNOWN;
  }
}

export function convertNullableNotifType2(
  val: string | null,
): NotifType2 | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNotifType2(val);
}

export function convertNotifType2List(val: string[]): NotifType2[] {
  return val.map((v) => convertNotifType2(v));
}

export function convertNullableNotifType2List(
  val: string[] | null,
): NotifType2[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertNotifType2List(val);
}

export enum ObjNestedEnum {
  Yes = "yes",
  No = "no",
  Maybe = "maybe",
  Unknown = "%unknown%",
}

export function convertObjNestedEnum(val: string): ObjNestedEnum {
  switch (val) {
    case ObjNestedEnum.Yes:
    case ObjNestedEnum.No:
    case ObjNestedEnum.Maybe:
    case ObjNestedEnum.Unknown:
      return val;
    default:
      return ObjNestedEnum.Unknown;
  }
}

export function convertNullableObjNestedEnum(
  val: string | null,
): ObjNestedEnum | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertObjNestedEnum(val);
}

export function convertObjNestedEnumList(val: string[]): ObjNestedEnum[] {
  return val.map((v) => convertObjNestedEnum(v));
}

export function convertNullableObjNestedEnumList(
  val: string[] | null,
): ObjNestedEnum[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertObjNestedEnumList(val);
}

export enum RabbitBreed {
  AmericanRabbit = "american_rabbit",
  AmericanChincilla = "american_chincilla",
  AmericanFuzzyLop = "american_fuzzy_lop",
  AmericanSable = "american_sable",
  ArgenteBrun = "argente_brun",
  BelgianHare = "belgian_hare",
  Beveren = "beveren",
  Other = "other",
  Unknown = "%unknown%",
}

export function convertRabbitBreed(val: string): RabbitBreed {
  switch (val) {
    case RabbitBreed.AmericanRabbit:
    case RabbitBreed.AmericanChincilla:
    case RabbitBreed.AmericanFuzzyLop:
    case RabbitBreed.AmericanSable:
    case RabbitBreed.ArgenteBrun:
    case RabbitBreed.BelgianHare:
    case RabbitBreed.Beveren:
    case RabbitBreed.Other:
    case RabbitBreed.Unknown:
      return val;
    default:
      return RabbitBreed.Unknown;
  }
}

export function convertNullableRabbitBreed(
  val: string | null,
): RabbitBreed | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertRabbitBreed(val);
}

export function convertRabbitBreedList(val: string[]): RabbitBreed[] {
  return val.map((v) => convertRabbitBreed(v));
}

export function convertNullableRabbitBreedList(
  val: string[] | null,
): RabbitBreed[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertRabbitBreedList(val);
}

export enum SuperNestedObjectEnum {
  Yes = "yes",
  No = "no",
  Maybe = "maybe",
  Unknown = "%unknown%",
}

export function convertSuperNestedObjectEnum(
  val: string,
): SuperNestedObjectEnum {
  switch (val) {
    case SuperNestedObjectEnum.Yes:
    case SuperNestedObjectEnum.No:
    case SuperNestedObjectEnum.Maybe:
    case SuperNestedObjectEnum.Unknown:
      return val;
    default:
      return SuperNestedObjectEnum.Unknown;
  }
}

export function convertNullableSuperNestedObjectEnum(
  val: string | null,
): SuperNestedObjectEnum | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertSuperNestedObjectEnum(val);
}

export function convertSuperNestedObjectEnumList(
  val: string[],
): SuperNestedObjectEnum[] {
  return val.map((v) => convertSuperNestedObjectEnum(v));
}

export function convertNullableSuperNestedObjectEnumList(
  val: string[] | null,
): SuperNestedObjectEnum[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertSuperNestedObjectEnumList(val);
}

export enum UserAccountStatus {
  UNVERIFIED = "UNVERIFIED",
  VERIFIED = "VERIFIED",
  DEACTIVATED = "DEACTIVATED",
  DISABLED = "DISABLED",
  UNKNOWN = "%UNKNOWN%",
}

export function convertUserAccountStatus(val: string): UserAccountStatus {
  switch (val) {
    case UserAccountStatus.UNVERIFIED:
    case UserAccountStatus.VERIFIED:
    case UserAccountStatus.DEACTIVATED:
    case UserAccountStatus.DISABLED:
    case UserAccountStatus.UNKNOWN:
      return val;
    default:
      return UserAccountStatus.UNKNOWN;
  }
}

export function convertNullableUserAccountStatus(
  val: string | null,
): UserAccountStatus | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertUserAccountStatus(val);
}

export function convertUserAccountStatusList(
  val: string[],
): UserAccountStatus[] {
  return val.map((v) => convertUserAccountStatus(v));
}

export function convertNullableUserAccountStatusList(
  val: string[] | null,
): UserAccountStatus[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertUserAccountStatusList(val);
}

export enum UserDaysOff {
  Monday = "monday",
  Tuesday = "tuesday",
  Wednesday = "wednesday",
  Thursday = "thursday",
  Friday = "friday",
  Saturday = "saturday",
  Sunday = "sunday",
}

export enum UserIntEnum {
  VERIFIED = 1,
  UNVERIFIED = 2,
  DISABLED = 3,
  DEACTIVATED = 4,
  // @deprecated FOO = 5,
}

export enum UserPreferredShift {
  Morning = "morning",
  Afternoon = "afternoon",
  Evening = "evening",
  Graveyard = "graveyard",
  Unknown = "%unknown%",
}

export function convertUserPreferredShift(val: string): UserPreferredShift {
  switch (val) {
    case UserPreferredShift.Morning:
    case UserPreferredShift.Afternoon:
    case UserPreferredShift.Evening:
    case UserPreferredShift.Graveyard:
    case UserPreferredShift.Unknown:
      return val;
    default:
      return UserPreferredShift.Unknown;
  }
}

export function convertNullableUserPreferredShift(
  val: string | null,
): UserPreferredShift | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertUserPreferredShift(val);
}

export function convertUserPreferredShiftList(
  val: string[],
): UserPreferredShift[] {
  return val.map((v) => convertUserPreferredShift(v));
}

export function convertNullableUserPreferredShiftList(
  val: string[] | null,
): UserPreferredShift[] | null {
  if (val === null || val === undefined) {
    return null;
  }
  return convertUserPreferredShiftList(val);
}

export interface ContactInfo {
  default: boolean;
  source: ContactInfoSource;
}

export interface UserNestedNestedObjectList {
  int: number;
}

export interface UserNestedObjectList {
  type: string;
  enum: EnumUsedInList;
  objects: UserNestedNestedObjectList[];
  enumList: IntEnumUsedInList[];
}

export function convertUserNestedObjectList(input: any): UserNestedObjectList {
  return {
    type: input.type,
    enum: input.enum,
    objects: input.objects,
    enumList: input.enum_list,
  };
}

export function convertNullableUserNestedObjectList(
  input: any,
): UserNestedObjectList | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserNestedObjectList(input);
}

export function convertUserNestedObjectListList(
  input: any[],
): UserNestedObjectList[] {
  return input.map((v) => convertUserNestedObjectList(v));
}

export function convertNullableUserNestedObjectListList(
  input: any[] | null,
): UserNestedObjectList[] | null {
  if (input === null || input === undefined) {
    return null;
  }
  return input.map((v) => convertUserNestedObjectList(v));
}

export interface UserPrefsDiff {
  type: string;
}

export interface UserPrefsStruct {
  finishedNux?: boolean | null;
  enableNotifs?: boolean | null;
  notifTypes: NotifType[];
}

export function convertUserPrefsStruct(input: any): UserPrefsStruct {
  return {
    finishedNux: input.finished_nux,
    enableNotifs: input.enable_notifs,
    notifTypes: input.notif_types,
  };
}

export function convertNullableUserPrefsStruct(
  input: any,
): UserPrefsStruct | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserPrefsStruct(input);
}

export interface UserPrefsStruct2 {
  finishedNux?: boolean | null;
  enableNotifs?: boolean | null;
  notifTypes: NotifType2[];
}

export function convertUserPrefsStruct2(input: any): UserPrefsStruct2 {
  return {
    finishedNux: input.finished_nux,
    enableNotifs: input.enable_notifs,
    notifTypes: input.notif_types,
  };
}

export function convertNullableUserPrefsStruct2(
  input: any,
): UserPrefsStruct2 | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserPrefsStruct2(input);
}

export function convertUserPrefsStruct2List(input: any[]): UserPrefsStruct2[] {
  return input.map((v) => convertUserPrefsStruct2(v));
}

export function convertNullableUserPrefsStruct2List(
  input: any[] | null,
): UserPrefsStruct2[] | null {
  if (input === null || input === undefined) {
    return null;
  }
  return input.map((v) => convertUserPrefsStruct2(v));
}

export interface UserNestedObject {
  nestedUuid: ID;
  nestedInt: number;
  nestedString: string;
  nestedBool: boolean;
  nestedFloat?: number | null;
  nestedEnum: ObjNestedEnum;
  nestedStringList: string[];
  nestedIntList: number[];
  nestedObj?: UserNestedNestedObject | null;
}

export function convertUserNestedObject(input: any): UserNestedObject {
  return {
    nestedUuid: input.nested_uuid,
    nestedInt: input.nested_int,
    nestedString: input.nested_string,
    nestedBool: input.nested_bool,
    nestedFloat: input.nested_float,
    nestedEnum: input.nested_enum,
    nestedStringList: input.nested_string_list,
    nestedIntList: input.nested_int_list,
    nestedObj: convertNullableUserNestedNestedObject(input.nested_obj),
  };
}

export function convertNullableUserNestedObject(
  input: any,
): UserNestedObject | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserNestedObject(input);
}

export interface UserNestedNestedObject {
  nestedNestedUuid: ID;
  nestedNestedInt: number;
  nestedNestedString: string;
  nestedNestedBool?: boolean | null;
  nestedNestedFloat: number;
  nestedNestedEnum: NestedObjNestedNestedEnum;
  nestedNestedStringList: string[];
  nestedNestedIntList: number[];
}

export function convertUserNestedNestedObject(
  input: any,
): UserNestedNestedObject {
  return {
    nestedNestedUuid: input.nested_nested_uuid,
    nestedNestedInt: input.nested_nested_int,
    nestedNestedString: input.nested_nested_string,
    nestedNestedBool: input.nested_nested_bool,
    nestedNestedFloat: input.nested_nested_float,
    nestedNestedEnum: input.nested_nested_enum,
    nestedNestedStringList: input.nested_nested_string_list,
    nestedNestedIntList: input.nested_nested_int_list,
  };
}

export function convertNullableUserNestedNestedObject(
  input: any,
): UserNestedNestedObject | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserNestedNestedObject(input);
}

export interface CatType {
  name: string;
  birthday: Date;
  breed: CatBreed;
  kitten: boolean;
}

export interface DogType {
  name: string;
  birthday: Date;
  breed: DogBreed;
  breedGroup: DogBreedGroup;
  puppy: boolean;
}

export function convertDogType(input: any): DogType {
  return {
    name: input.name,
    birthday: input.birthday,
    breed: input.breed,
    breedGroup: input.breed_group,
    puppy: input.puppy,
  };
}

export function convertNullableDogType(input: any): DogType | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertDogType(input);
}

export interface RabbitType {
  name: string;
  birthday: Date;
  breed: RabbitBreed;
}

export type PetUnionType = CatType | DogType | RabbitType;

function convertPetUnionType(input: any): PetUnionType {
  if (input.breed_group !== undefined) {
    return convertDogType(input);
  }
  return input;
}

function convertNullablePetUnionType(input: any): PetUnionType | null {
  if (input === null || input === undefined) {
    return null;
  }
  return convertPetUnionType(input);
}

export interface UserSuperNestedObject {
  uuid: ID;
  int: number;
  string: string;
  bool: boolean;
  float: number;
  enum: SuperNestedObjectEnum;
  stringList?: string[] | null;
  intList: number[];
  obj?: UserNestedObject | null;
  union?: PetUnionType | null;
}

export function convertUserSuperNestedObject(
  input: any,
): UserSuperNestedObject {
  return {
    uuid: input.uuid,
    int: input.int,
    string: input.string,
    bool: input.bool,
    float: input.float,
    enum: input.enum,
    stringList: input.string_list,
    intList: input.int_list,
    obj: convertNullableUserNestedObject(input.obj),
    union: convertNullablePetUnionType(input.union),
  };
}

export function convertNullableUserSuperNestedObject(
  input: any,
): UserSuperNestedObject | null {
  if (input === undefined || input === null) {
    return null;
  }
  return convertUserSuperNestedObject(input);
}
