/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { File, User } from "../../..";
import { FileBuilder } from "./file_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface FileEditInput {
  name?: string;
  path?: string;
  creatorId?: ID | Builder<User, ExampleViewerAlias>;
}

export type EditFileActionTriggers = (
  | Trigger<
      File,
      FileBuilder<FileEditInput, File>,
      ExampleViewerAlias,
      FileEditInput,
      File
    >
  | Trigger<
      File,
      FileBuilder<FileEditInput, File>,
      ExampleViewerAlias,
      FileEditInput,
      File
    >[]
)[];

export type EditFileActionObservers = Observer<
  File,
  FileBuilder<FileEditInput, File>,
  ExampleViewerAlias,
  FileEditInput,
  File
>[];

export type EditFileActionValidators = Validator<
  File,
  FileBuilder<FileEditInput, File>,
  ExampleViewerAlias,
  FileEditInput,
  File
>[];

export class EditFileActionBase
  implements
    Action<
      File,
      FileBuilder<FileEditInput, File>,
      ExampleViewerAlias,
      FileEditInput,
      File
    >
{
  public readonly builder: FileBuilder<FileEditInput, File>;
  public readonly viewer: ExampleViewerAlias;
  protected input: FileEditInput;
  protected readonly file: File;

  constructor(viewer: ExampleViewerAlias, file: File, input: FileEditInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new FileBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      file,
    );
    this.file = file;
  }

  getPrivacyPolicy(): PrivacyPolicy<File, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): EditFileActionTriggers {
    return [];
  }

  getObservers(): EditFileActionObservers {
    return [];
  }

  getValidators(): EditFileActionValidators {
    return [];
  }

  getInput(): FileEditInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<File | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<File> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditFileActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      file: File,
      input: FileEditInput,
    ) => T,
    viewer: ExampleViewerAlias,
    file: File,
    input: FileEditInput,
  ): T {
    return new this(viewer, file, input);
  }

  static async saveXFromID<T extends EditFileActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      file: File,
      input: FileEditInput,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
    input: FileEditInput,
  ): Promise<File> {
    const file = await File.loadX(viewer, id);
    return new this(viewer, file, input).saveX();
  }
}
