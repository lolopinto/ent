/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { File, User } from "../../..";
import { FileBuilder } from "./file_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export interface FileCreateInput {
  name: string;
  path: string;
  creatorId: ID | Builder<User, ExampleViewerAlias>;
}

export type CreateFileActionTriggers = (
  | Trigger<
      File,
      FileBuilder<FileCreateInput, File | null>,
      ExampleViewerAlias,
      FileCreateInput,
      File | null
    >
  | Trigger<
      File,
      FileBuilder<FileCreateInput, File | null>,
      ExampleViewerAlias,
      FileCreateInput,
      File | null
    >[]
)[];

export type CreateFileActionObservers = Observer<
  File,
  FileBuilder<FileCreateInput, File | null>,
  ExampleViewerAlias,
  FileCreateInput,
  File | null
>[];

export type CreateFileActionValidators = Validator<
  File,
  FileBuilder<FileCreateInput, File | null>,
  ExampleViewerAlias,
  FileCreateInput,
  File | null
>[];

export class CreateFileActionBase
  implements
    Action<
      File,
      FileBuilder<FileCreateInput, File | null>,
      ExampleViewerAlias,
      FileCreateInput,
      File | null
    >
{
  public readonly builder: FileBuilder<FileCreateInput, File | null>;
  public readonly viewer: ExampleViewerAlias;
  protected input: FileCreateInput;

  constructor(viewer: ExampleViewerAlias, input: FileCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new FileBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<File, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateFileActionTriggers {
    return [];
  }

  getObservers(): CreateFileActionObservers {
    return [];
  }

  getValidators(): CreateFileActionValidators {
    return [];
  }

  getInput(): FileCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<File | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<File> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateFileActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      input: FileCreateInput,
    ) => T,
    viewer: ExampleViewerAlias,
    input: FileCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
