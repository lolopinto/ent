/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { File } from "../../..";
import { FileBuilder, FileInput } from "./file_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export type DeleteFileActionTriggers = (
  | Trigger<
      File,
      FileBuilder<FileInput, File>,
      ExampleViewerAlias,
      FileInput,
      File
    >
  | Trigger<
      File,
      FileBuilder<FileInput, File>,
      ExampleViewerAlias,
      FileInput,
      File
    >[]
)[];

export type DeleteFileActionObservers = Observer<
  File,
  FileBuilder<FileInput, File>,
  ExampleViewerAlias,
  FileInput,
  File
>[];

export type DeleteFileActionValidators = Validator<
  File,
  FileBuilder<FileInput, File>,
  ExampleViewerAlias,
  FileInput,
  File
>[];

export class DeleteFileActionBase
  implements
    Action<
      File,
      FileBuilder<FileInput, File>,
      ExampleViewerAlias,
      FileInput,
      File
    >
{
  public readonly builder: FileBuilder<FileInput, File>;
  public readonly viewer: ExampleViewerAlias;
  protected readonly file: File;

  constructor(viewer: ExampleViewerAlias, file: File) {
    this.viewer = viewer;
    this.builder = new FileBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      file,
    );
    this.file = file;
  }

  getPrivacyPolicy(): PrivacyPolicy<File, ExampleViewerAlias> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): DeleteFileActionTriggers {
    return [];
  }

  getObservers(): DeleteFileActionObservers {
    return [];
  }

  getValidators(): DeleteFileActionValidators {
    return [];
  }

  getInput(): FileInput {
    return {};
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteFileActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      file: File,
    ) => T,
    viewer: ExampleViewerAlias,
    file: File,
  ): T {
    return new this(viewer, file);
  }

  static async saveXFromID<T extends DeleteFileActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      file: File,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<void> {
    const file = await File.loadX(viewer, id);
    return new this(viewer, file).saveX();
  }
}
