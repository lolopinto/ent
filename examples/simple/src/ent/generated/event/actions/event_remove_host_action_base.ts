/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { ID, PrivacyPolicy } from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Event, User } from "../../..";
import { EventBuilder, EventInput } from "./event_builder";
import schema from "../../../../schema/event_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export type EventRemoveHostActionTriggers = (
  | Trigger<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >
  | Trigger<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >[]
)[];

export type EventRemoveHostActionObservers = Observer<
  Event,
  EventBuilder<EventInput, Event>,
  ExampleViewerAlias,
  EventInput,
  Event
>[];

export type EventRemoveHostActionValidators = Validator<
  Event,
  EventBuilder<EventInput, Event>,
  ExampleViewerAlias,
  EventInput,
  Event
>[];

export class EventRemoveHostActionBase
  implements
    Action<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >
{
  public readonly builder: EventBuilder<EventInput, Event>;
  public readonly viewer: ExampleViewerAlias;
  protected readonly event: Event;

  constructor(viewer: ExampleViewerAlias, event: Event) {
    this.viewer = viewer;
    this.builder = new EventBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      event,
    );
    this.event = event;
  }

  getPrivacyPolicy(): PrivacyPolicy<Event, ExampleViewerAlias> {
    if (schema.defaultActionPrivacy === undefined) {
      throw new Error(
        `defaultActionPrivacy in schema Event is undefined. This is likely a bug in the codegen. Please file an issue.`,
      );
    }

    return typeof schema.defaultActionPrivacy === "function"
      ? schema.defaultActionPrivacy()
      : schema.defaultActionPrivacy;
  }

  getTriggers(): EventRemoveHostActionTriggers {
    return [];
  }

  getObservers(): EventRemoveHostActionObservers {
    return [];
  }

  getValidators(): EventRemoveHostActionValidators {
    return [];
  }

  getInput(): EventInput {
    return {};
  }

  removeHost(...nodes: (ID | User)[]): this {
    nodes.forEach((node) => this.builder.removeHost(node));
    return this;
  }
  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Event | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Event> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EventRemoveHostActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      event: Event,
    ) => T,
    viewer: ExampleViewerAlias,
    event: Event,
  ): T {
    return new this(viewer, event);
  }

  static async saveXFromID<T extends EventRemoveHostActionBase>(
    this: new (
      viewer: ExampleViewerAlias,
      event: Event,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
    hostID: ID,
  ): Promise<Event> {
    const event = await Event.loadX(viewer, id);
    return new this(viewer, event).removeHost(hostID).saveX();
  }
}
