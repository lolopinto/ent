/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  AssocEdgeInputOptions,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Event, User } from "../../..";
import { EventBuilder, EventInput } from "./event_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export type EventAddHostActionTriggers = (
  | Trigger<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >
  | Trigger<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >[]
)[];

export type EventAddHostActionObservers = Observer<
  Event,
  EventBuilder<EventInput, Event>,
  ExampleViewerAlias,
  EventInput,
  Event
>[];

export type EventAddHostActionValidators = Validator<
  Event,
  EventBuilder<EventInput, Event>,
  ExampleViewerAlias,
  EventInput,
  Event
>[];

export class EventAddHostActionBase
  implements
    Action<
      Event,
      EventBuilder<EventInput, Event>,
      ExampleViewerAlias,
      EventInput,
      Event
    >
{
  public readonly builder: EventBuilder<EventInput, Event>;
  public readonly viewer: ExampleViewerAlias;
  protected readonly event: Event;

  constructor(viewer: ExampleViewerAlias, event: Event) {
    this.viewer = viewer;
    this.builder = new EventBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      event,
    );
    this.event = event;
  }

  getPrivacyPolicy(): PrivacyPolicy<Event> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): EventAddHostActionTriggers {
    return [];
  }

  getObservers(): EventAddHostActionObservers {
    return [];
  }

  getValidators(): EventAddHostActionValidators {
    return [];
  }

  getInput(): EventInput {
    return {};
  }

  addHost(...nodes: (ID | User | Builder<User>)[]): this {
    nodes.forEach((node) => this.builder.addHost(node));
    return this;
  }

  addHostID(id: ID | Builder<User>, options?: AssocEdgeInputOptions): this {
    this.builder.addHostID(id, options);
    return this;
  }
  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Event | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Event> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EventAddHostActionBase>(
    this: new (viewer: ExampleViewerAlias, event: Event) => T,
    viewer: ExampleViewerAlias,
    event: Event,
  ): T {
    return new this(viewer, event);
  }

  static async saveXFromID<T extends EventAddHostActionBase>(
    this: new (viewer: ExampleViewerAlias, event: Event) => T,
    viewer: ExampleViewerAlias,
    id: ID,
    hostID: ID,
  ): Promise<Event> {
    const event = await Event.loadX(viewer, id);
    return new this(viewer, event).addHost(hostID).saveX();
  }
}
