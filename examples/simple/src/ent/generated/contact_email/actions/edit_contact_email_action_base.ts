/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/ent/action";
import { Contact, ContactEmail } from "../../..";
import { ContactEmailBuilder } from "./contact_email_builder";

export interface ContactEmailEditInput {
  emailAddress?: string;
  label?: string;
  contactID?: ID | Builder<Contact>;
}

export class EditContactEmailActionBase
  implements
    Action<
      ContactEmail,
      ContactEmailBuilder<ContactEmailEditInput, ContactEmail>,
      ContactEmailEditInput,
      ContactEmail
    >
{
  public readonly builder: ContactEmailBuilder<
    ContactEmailEditInput,
    ContactEmail
  >;
  public readonly viewer: Viewer;
  protected input: ContactEmailEditInput;
  protected contactEmail: ContactEmail;

  constructor(
    viewer: Viewer,
    contactEmail: ContactEmail,
    input: ContactEmailEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new ContactEmailBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      contactEmail,
    );
    this.contactEmail = contactEmail;
  }

  getPrivacyPolicy(): PrivacyPolicy<ContactEmail> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): ContactEmailEditInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<ContactEmail>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<ContactEmail | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<ContactEmail> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditContactEmailActionBase>(
    this: new (
      viewer: Viewer,
      contactEmail: ContactEmail,
      input: ContactEmailEditInput,
    ) => T,
    viewer: Viewer,
    contactEmail: ContactEmail,
    input: ContactEmailEditInput,
  ): T {
    return new this(viewer, contactEmail, input);
  }

  static async saveXFromID<T extends EditContactEmailActionBase>(
    this: new (
      viewer: Viewer,
      contactEmail: ContactEmail,
      input: ContactEmailEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: ContactEmailEditInput,
  ): Promise<ContactEmail> {
    const contactEmail = await ContactEmail.loadX(viewer, id);
    return new this(viewer, contactEmail, input).saveX();
  }
}
