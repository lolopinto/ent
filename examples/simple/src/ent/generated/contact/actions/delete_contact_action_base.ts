/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Contact } from "../../..";
import { ContactBuilder, ContactInput } from "./contact_builder";
import { ExampleViewer as ExampleViewerAlias } from "../../../../viewer/viewer";

export type DeleteContactActionTriggers = (
  | Trigger<
      Contact,
      ContactBuilder<ContactInput, Contact>,
      ExampleViewerAlias,
      ContactInput,
      Contact
    >
  | Trigger<
      Contact,
      ContactBuilder<ContactInput, Contact>,
      ExampleViewerAlias,
      ContactInput,
      Contact
    >[]
)[];

export type DeleteContactActionObservers = Observer<
  Contact,
  ContactBuilder<ContactInput, Contact>,
  ExampleViewerAlias,
  ContactInput,
  Contact
>[];

export type DeleteContactActionValidators = Validator<
  Contact,
  ContactBuilder<ContactInput, Contact>,
  ExampleViewerAlias,
  ContactInput,
  Contact
>[];

export class DeleteContactActionBase
  implements
    Action<
      Contact,
      ContactBuilder<ContactInput, Contact>,
      ExampleViewerAlias,
      ContactInput,
      Contact
    >
{
  public readonly builder: ContactBuilder<ContactInput, Contact>;
  public readonly viewer: ExampleViewerAlias;
  protected readonly contact: Contact;

  constructor(viewer: ExampleViewerAlias, contact: Contact) {
    this.viewer = viewer;
    this.builder = new ContactBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      contact,
    );
    this.contact = contact;
  }

  getPrivacyPolicy(): PrivacyPolicy<Contact> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): DeleteContactActionTriggers {
    return [];
  }

  getObservers(): DeleteContactActionObservers {
    return [];
  }

  getValidators(): DeleteContactActionValidators {
    return [];
  }

  getInput(): ContactInput {
    return {};
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteContactActionBase>(
    this: new (viewer: ExampleViewerAlias, contact: Contact) => T,
    viewer: ExampleViewerAlias,
    contact: Contact,
  ): T {
    return new this(viewer, contact);
  }

  static async saveXFromID<T extends DeleteContactActionBase>(
    this: new (viewer: ExampleViewerAlias, contact: Contact) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<void> {
    const contact = await Contact.loadX(viewer, id);
    return new this(viewer, contact).saveX();
  }
}
