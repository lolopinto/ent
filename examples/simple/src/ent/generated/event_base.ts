/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  applyPrivacyPolicy,
  convertNullableTextToBuffer,
  getEdgeTypeInGroup,
  loadCustomCount,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields, getFieldsWithPrivacy } from "@snowtop/ent/schema";
import { EventDBData, eventLoader, eventLoaderInfo } from "./loaders";
import {
  Attachment,
  EdgeType,
  EventRsvpStatus,
  NodeType,
  convertNullableAttachmentList,
} from "./types";
import {
  Address,
  EventToAttendingQuery,
  EventToDeclinedQuery,
  EventToHostsQuery,
  EventToInvitedQuery,
  EventToMaybeQuery,
  User,
} from "../internal";
import schema from "../../schema/event_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../viewer/viewer";

export interface EventCanViewerSee {
  addressId: () => Promise<boolean>;
}

export class EventBase implements Ent<ExampleViewerAlias> {
  protected readonly data: EventDBData;
  readonly nodeType = NodeType.Event;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly name: string;
  readonly creatorId: ID;
  readonly startTime: Date;
  readonly endTime: Date | null;
  readonly location: string;
  protected readonly _addressId: ID | null;
  readonly coverPhoto: Buffer | null;
  readonly coverPhoto2: Buffer | null;
  readonly attachments: Attachment[] | null;

  constructor(public viewer: ExampleViewerAlias, data: Data) {
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.name = data.name;
    this.creatorId = data.user_id;
    this.startTime = data.start_time;
    this.endTime = data.end_time;
    this.location = data.location;
    this._addressId = data.address_id;
    this.coverPhoto = data.cover_photo;
    this.coverPhoto2 = convertNullableTextToBuffer(data.cover_photo2);
    this.attachments = convertNullableAttachmentList(data.attachments);
    // @ts-expect-error
    this.data = data;
  }

  __setRawDBData<EventDBData>(data: EventDBData) {}

  /** used by some ent internals to get access to raw db data. should not be depended on. may not always be on the ent **/
  ___getRawDBData(): EventDBData {
    return this.data;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, ExampleViewerAlias> {
    return AllowIfViewerPrivacyPolicy;
  }

  async addressId(): Promise<ID | null> {
    if (this._addressId === null) {
      return null;
    }
    const m = getFieldsWithPrivacy(schema, eventLoaderInfo.fieldInfo);
    const p = m.get("address_id");
    if (!p) {
      throw new Error(`couldn't get field privacy policy for addressId`);
    }
    const v = await applyPrivacyPolicy(this.viewer, p, this);
    return v ? this._addressId : null;
  }

  static async load<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      EventBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      EventBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      EventBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    viewer: ExampleViewerAlias,
    query: CustomQuery<EventDBData>,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      {
        ...EventBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
    )) as T[];
  }

  static async loadCustomData<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery<EventDBData>,
    context?: Context,
  ): Promise<EventDBData[]> {
    return loadCustomData<EventDBData, EventDBData>(
      {
        ...EventBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    );
  }

  static async loadCustomCount<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    query: CustomQuery<EventDBData>,
    context?: Context,
  ): Promise<number> {
    return loadCustomCount(
      {
        ...EventBase.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<EventDBData | null> {
    return eventLoader.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<EventDBData> {
    const row = await eventLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static loaderOptions<T extends EventBase>(
    this: new (
      viewer: ExampleViewerAlias,
      data: Data,
    ) => T,
  ): LoadEntOptions<T, ExampleViewerAlias, EventDBData> {
    return {
      tableName: eventLoaderInfo.tableName,
      fields: eventLoaderInfo.fields,
      ent: this,
      loaderFactory: eventLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (EventBase.schemaFields != null) {
      return EventBase.schemaFields;
    }
    return (EventBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return EventBase.getSchemaFields().get(key);
  }

  getEventRsvpStatusMap() {
    let m: Map<EventRsvpStatus, EdgeType> = new Map();
    m.set(EventRsvpStatus.Attending, EdgeType.EventToAttending);
    m.set(EventRsvpStatus.Declined, EdgeType.EventToDeclined);
    m.set(EventRsvpStatus.Maybe, EdgeType.EventToMaybe);
    return m;
  }

  async viewerRsvpStatus(): Promise<EventRsvpStatus> {
    const ret = EventRsvpStatus.CanRsvp;
    if (!this.viewer.viewerID) {
      return ret;
    }
    const g = await getEdgeTypeInGroup(
      this.viewer,
      this.id,
      this.viewer.viewerID,
      this.getEventRsvpStatusMap(),
    );
    return g ? g[0] : ret;
  }

  queryAttending(): EventToAttendingQuery {
    return EventToAttendingQuery.query(this.viewer, this.id);
  }

  queryDeclined(): EventToDeclinedQuery {
    return EventToDeclinedQuery.query(this.viewer, this.id);
  }

  queryHosts(): EventToHostsQuery {
    return EventToHostsQuery.query(this.viewer, this.id);
  }

  queryInvited(): EventToInvitedQuery {
    return EventToInvitedQuery.query(this.viewer, this.id);
  }

  queryMaybe(): EventToMaybeQuery {
    return EventToMaybeQuery.query(this.viewer, this.id);
  }

  async loadAddress(): Promise<Address | null> {
    const addressId = await this.addressId();
    if (!addressId) {
      return null;
    }

    return loadEnt(this.viewer, addressId, Address.loaderOptions());
  }

  async loadCreator(): Promise<User | null> {
    return loadEnt(this.viewer, this.creatorId, User.loaderOptions());
  }

  loadCreatorX(): Promise<User> {
    return loadEntX(this.viewer, this.creatorId, User.loaderOptions());
  }

  canViewerSeeInfo(): EventCanViewerSee {
    const fieldPrivacy = getFieldsWithPrivacy(
      schema,
      eventLoaderInfo.fieldInfo,
    );
    return {
      addressId: () =>
        applyPrivacyPolicy(this.viewer, fieldPrivacy.get("address_id")!, this),
    };
  }
}
