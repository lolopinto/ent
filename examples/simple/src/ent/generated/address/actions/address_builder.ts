/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { AssocEdgeInputOptions, Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { Address, Event } from "../../..";
import { EdgeType, NodeType } from "../../const";
import { addressLoaderInfo } from "../../loaders";
import schema from "../../../../schema/address";

export interface AddressInput {
  streetName?: string;
  city?: string;
  state?: string;
  zip?: string;
  apartment?: string | null;
  country?: string;
  // allow other properties. useful for action-only fields
  [x: string]: any;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

type MaybeNull<T extends Ent> = T | null;
type TMaybleNullableEnt<T extends Ent> = T | MaybeNull<T>;

export class AddressBuilder<
  TInput extends AddressInput = AddressInput,
  TExistingEnt extends TMaybleNullableEnt<Address> = Address | null,
> implements Builder<Address, TExistingEnt>
{
  orchestrator: Orchestrator<Address, TInput>;
  readonly placeholderID: ID;
  readonly ent = Address;
  readonly nodeType = NodeType.Address;
  private input: TInput;
  private m: Map<string, any> = new Map();

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: Action<Address, Builder<Address, TExistingEnt>, TInput>,
    public readonly existingEnt: TExistingEnt,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-Address`;
    this.input = action.getInput();
    const updateInput = (d: AddressInput) => this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "addresses",
      key: "id",
      loaderOptions: Address.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
      fieldInfo: addressLoaderInfo.fieldInfo,
    });
  }

  getInput(): TInput {
    return this.input;
  }

  updateInput(input: AddressInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  deleteInputKey(key: keyof AddressInput) {
    delete this.input[key];
  }

  // store data in Builder that can be retrieved by another validator, trigger, observer later in the action
  storeData(k: string, v: any) {
    this.m.set(k, v);
  }

  // retrieve data stored in this Builder with key
  getStoredData(k: string) {
    return this.m.get(k);
  }

  // this gets the inputs that have been written for a given edgeType and operation
  // WriteOperation.Insert for adding an edge and WriteOperation.Delete for deleting an edge
  getEdgeInputData(edgeType: EdgeType, op: WriteOperation) {
    return this.orchestrator.getInputEdges(edgeType, op);
  }

  clearInputEdges(edgeType: EdgeType, op: WriteOperation, id?: ID) {
    this.orchestrator.clearInputEdges(edgeType, op, id);
  }

  addHostedEvent(
    ...nodes: (ID | Event | Builder<Event>)[]
  ): AddressBuilder<TInput, TExistingEnt> {
    for (const node of nodes) {
      if (this.isBuilder(node)) {
        this.addHostedEventID(node);
      } else if (typeof node === "object") {
        this.addHostedEventID(node.id);
      } else {
        this.addHostedEventID(node);
      }
    }
    return this;
  }

  addHostedEventID(
    id: ID | Builder<Event>,
    options?: AssocEdgeInputOptions,
  ): AddressBuilder<TInput, TExistingEnt> {
    this.orchestrator.addOutboundEdge(
      id,
      EdgeType.AddressToHostedEvents,
      NodeType.Event,
      options,
    );
    return this;
  }

  removeHostedEvent(
    ...nodes: (ID | Event)[]
  ): AddressBuilder<TInput, TExistingEnt> {
    for (const node of nodes) {
      if (typeof node === "object") {
        this.orchestrator.removeOutboundEdge(
          node.id,
          EdgeType.AddressToHostedEvents,
        );
      } else {
        this.orchestrator.removeOutboundEdge(
          node,
          EdgeType.AddressToHostedEvents,
        );
      }
    }
    return this;
  }

  async build(): Promise<Changeset<Address>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<Address | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<Address> {
    return this.orchestrator.editedEntX();
  }

  private async getEditedFields(): Promise<Map<string, any>> {
    const fields = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("street_name", fields.streetName);
    addField("city", fields.city);
    addField("state", fields.state);
    addField("zip", fields.zip);
    addField("apartment", fields.apartment);
    addField("country", fields.country);
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of street_name. Retrieves it from the input if specified or takes it from existingEnt
  getNewStreetNameValue(): string | undefined {
    if (this.input.streetName !== undefined) {
      return this.input.streetName;
    }
    return this.existingEnt?.streetName;
  }

  // get value of city. Retrieves it from the input if specified or takes it from existingEnt
  getNewCityValue(): string | undefined {
    if (this.input.city !== undefined) {
      return this.input.city;
    }
    return this.existingEnt?.city;
  }

  // get value of state. Retrieves it from the input if specified or takes it from existingEnt
  getNewStateValue(): string | undefined {
    if (this.input.state !== undefined) {
      return this.input.state;
    }
    return this.existingEnt?.state;
  }

  // get value of zip. Retrieves it from the input if specified or takes it from existingEnt
  getNewZipValue(): string | undefined {
    if (this.input.zip !== undefined) {
      return this.input.zip;
    }
    return this.existingEnt?.zip;
  }

  // get value of apartment. Retrieves it from the input if specified or takes it from existingEnt
  getNewApartmentValue(): string | null | undefined {
    if (this.input.apartment !== undefined) {
      return this.input.apartment;
    }
    return this.existingEnt?.apartment;
  }

  // get value of country. Retrieves it from the input if specified or takes it from existingEnt
  getNewCountryValue(): string | undefined {
    if (this.input.country !== undefined) {
      return this.input.country;
    }
    return this.existingEnt?.country;
  }
}
