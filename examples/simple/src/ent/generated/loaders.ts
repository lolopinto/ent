/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import { ObjectLoaderFactory } from "@snowtop/ent";
import { NodeType } from "./const";

const addressTable = "addresses";
const addressFields = [
  "id",
  "created_at",
  "updated_at",
  "street_name",
  "city",
  "state",
  "zip",
  "apartment",
  "country",
];

export const addressLoader = new ObjectLoaderFactory({
  tableName: addressTable,
  fields: addressFields,
  key: "id",
});

export const addressLoaderInfo = {
  tableName: addressTable,
  fields: addressFields,
  nodeType: NodeType.Address,
  loaderFactory: addressLoader,
};

const authCodeTable = "auth_codes";
const authCodeFields = [
  "id",
  "created_at",
  "updated_at",
  "code",
  "user_id",
  "email_address",
  "phone_number",
];

export const authCodeLoader = new ObjectLoaderFactory({
  tableName: authCodeTable,
  fields: authCodeFields,
  key: "id",
});

export const authCodeLoaderInfo = {
  tableName: authCodeTable,
  fields: authCodeFields,
  nodeType: NodeType.AuthCode,
  loaderFactory: authCodeLoader,
};

const commentTable = "comments";
const commentFields = [
  "id",
  "created_at",
  "updated_at",
  "author_id",
  "body",
  "article_id",
  "article_type",
];

export const commentLoader = new ObjectLoaderFactory({
  tableName: commentTable,
  fields: commentFields,
  key: "id",
});

export const commentLoaderInfo = {
  tableName: commentTable,
  fields: commentFields,
  nodeType: NodeType.Comment,
  loaderFactory: commentLoader,
};

const contactTable = "contacts";
const contactFields = [
  "id",
  "created_at",
  "updated_at",
  "email_ids",
  "phone_number_ids",
  "first_name",
  "last_name",
  "user_id",
];

export const contactLoader = new ObjectLoaderFactory({
  tableName: contactTable,
  fields: contactFields,
  key: "id",
});

export const contactLoaderInfo = {
  tableName: contactTable,
  fields: contactFields,
  nodeType: NodeType.Contact,
  loaderFactory: contactLoader,
};

const contactEmailTable = "contact_emails";
const contactEmailFields = [
  "id",
  "created_at",
  "updated_at",
  "email_address",
  "label",
  "contact_id",
];

export const contactEmailLoader = new ObjectLoaderFactory({
  tableName: contactEmailTable,
  fields: contactEmailFields,
  key: "id",
});

export const contactEmailLoaderInfo = {
  tableName: contactEmailTable,
  fields: contactEmailFields,
  nodeType: NodeType.ContactEmail,
  loaderFactory: contactEmailLoader,
};

const contactPhoneNumberTable = "contact_phone_numbers";
const contactPhoneNumberFields = [
  "id",
  "created_at",
  "updated_at",
  "phone_number",
  "label",
  "contact_id",
];

export const contactPhoneNumberLoader = new ObjectLoaderFactory({
  tableName: contactPhoneNumberTable,
  fields: contactPhoneNumberFields,
  key: "id",
});

export const contactPhoneNumberLoaderInfo = {
  tableName: contactPhoneNumberTable,
  fields: contactPhoneNumberFields,
  nodeType: NodeType.ContactPhoneNumber,
  loaderFactory: contactPhoneNumberLoader,
};

const eventTable = "events";
const eventFields = [
  "id",
  "created_at",
  "updated_at",
  "name",
  "user_id",
  "start_time",
  "end_time",
  "location",
  "address_id",
];

export const eventLoader = new ObjectLoaderFactory({
  tableName: eventTable,
  fields: eventFields,
  key: "id",
});

export const eventLoaderInfo = {
  tableName: eventTable,
  fields: eventFields,
  nodeType: NodeType.Event,
  loaderFactory: eventLoader,
};

const holidayTable = "holidays";
const holidayFields = [
  "id",
  "created_at",
  "updated_at",
  "day_of_week",
  "day_of_week_alt",
  "label",
  "date",
];

export const holidayLoader = new ObjectLoaderFactory({
  tableName: holidayTable,
  fields: holidayFields,
  key: "id",
});

export const holidayLoaderInfo = {
  tableName: holidayTable,
  fields: holidayFields,
  nodeType: NodeType.Holiday,
  loaderFactory: holidayLoader,
};

const hoursOfOperationTable = "hours_of_operations";
const hoursOfOperationFields = [
  "id",
  "created_at",
  "updated_at",
  "day_of_week",
  "day_of_week_alt",
  "open",
  "close",
];

export const hoursOfOperationLoader = new ObjectLoaderFactory({
  tableName: hoursOfOperationTable,
  fields: hoursOfOperationFields,
  key: "id",
});

export const hoursOfOperationLoaderInfo = {
  tableName: hoursOfOperationTable,
  fields: hoursOfOperationFields,
  nodeType: NodeType.HoursOfOperation,
  loaderFactory: hoursOfOperationLoader,
};

const userTable = "users";
const userFields = [
  "id",
  "created_at",
  "updated_at",
  "first_name",
  "last_name",
  "email_address",
  "phone_number",
  "password",
  "account_status",
  "email_verified",
  "bio",
  "nicknames",
  "prefs",
  "prefs_list",
  "prefs_diff",
  "days_off",
  "preferred_shift",
  "time_in_ms",
  "fun_uuids",
  "new_col",
  "new_col_2",
  "super_nested_object",
  "nested_list",
];

export const userLoader = new ObjectLoaderFactory({
  tableName: userTable,
  fields: userFields,
  key: "id",
});

export const userEmailAddressLoader = new ObjectLoaderFactory({
  tableName: userTable,
  fields: userFields,
  key: "email_address",
});

export const userPhoneNumberLoader = new ObjectLoaderFactory({
  tableName: userTable,
  fields: userFields,
  key: "phone_number",
});

export const userLoaderInfo = {
  tableName: userTable,
  fields: userFields,
  nodeType: NodeType.User,
  loaderFactory: userLoader,
};

userLoader.addToPrime(userEmailAddressLoader);
userLoader.addToPrime(userPhoneNumberLoader);
userEmailAddressLoader.addToPrime(userLoader);
userEmailAddressLoader.addToPrime(userPhoneNumberLoader);
userPhoneNumberLoader.addToPrime(userLoader);
userPhoneNumberLoader.addToPrime(userEmailAddressLoader);

export function getLoaderInfoFromSchema(schema: string) {
  switch (schema) {
    case "Address":
      return addressLoaderInfo;
    case "AuthCode":
      return authCodeLoaderInfo;
    case "Comment":
      return commentLoaderInfo;
    case "Contact":
      return contactLoaderInfo;
    case "ContactEmail":
      return contactEmailLoaderInfo;
    case "ContactPhoneNumber":
      return contactPhoneNumberLoaderInfo;
    case "Event":
      return eventLoaderInfo;
    case "Holiday":
      return holidayLoaderInfo;
    case "HoursOfOperation":
      return hoursOfOperationLoaderInfo;
    case "User":
      return userLoaderInfo;
    default:
      throw new Error(
        `invalid schema ${schema} passed to getLoaderInfoFromSchema`,
      );
  }
}

export function getLoaderInfoFromNodeType(nodeType: NodeType) {
  switch (nodeType) {
    case NodeType.Address:
      return addressLoaderInfo;
    case NodeType.AuthCode:
      return authCodeLoaderInfo;
    case NodeType.Comment:
      return commentLoaderInfo;
    case NodeType.Contact:
      return contactLoaderInfo;
    case NodeType.ContactEmail:
      return contactEmailLoaderInfo;
    case NodeType.ContactPhoneNumber:
      return contactPhoneNumberLoaderInfo;
    case NodeType.Event:
      return eventLoaderInfo;
    case NodeType.Holiday:
      return holidayLoaderInfo;
    case NodeType.HoursOfOperation:
      return hoursOfOperationLoaderInfo;
    case NodeType.User:
      return userLoaderInfo;
    default:
      throw new Error(
        `invalid nodeType ${nodeType} passed to getLoaderInfoFromNodeType`,
      );
  }
}
