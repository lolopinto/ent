/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  convertDate,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { authCodeLoader, authCodeLoaderInfo } from "./loaders";
import { NodeType, User } from "../internal";
import schema from "../../schema/auth_code_schema";
import { ExampleViewer as ExampleViewerAlias } from "../../viewer/viewer";

interface AuthCodeDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  code: string;
  user_id: ID;
  email_address: string | null;
  phone_number: string | null;
}

export class AuthCodeBase implements Ent<ExampleViewerAlias> {
  readonly nodeType = NodeType.AuthCode;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly code: string;
  readonly userID: ID;
  readonly emailAddress: string | null;
  readonly phoneNumber: string | null;

  constructor(public viewer: ExampleViewerAlias, protected data: Data) {
    this.id = data.id;
    this.createdAt = convertDate(data.created_at);
    this.updatedAt = convertDate(data.updated_at);
    this.code = data.code;
    this.userID = data.user_id;
    this.emailAddress = data.email_address;
    this.phoneNumber = data.phone_number;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, ExampleViewerAlias> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      AuthCodeBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    viewer: ExampleViewerAlias,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      AuthCodeBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    viewer: ExampleViewerAlias,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      AuthCodeBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    viewer: ExampleViewerAlias,
    query: CustomQuery,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      AuthCodeBase.loaderOptions.apply(this),
      query,
    )) as T[];
  }

  static async loadCustomData<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<AuthCodeDBData[]> {
    return (await loadCustomData(
      AuthCodeBase.loaderOptions.apply(this),
      query,
      context,
    )) as AuthCodeDBData[];
  }

  static async loadRawData<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<AuthCodeDBData | null> {
    const row = await authCodeLoader.createLoader(context).load(id);
    if (!row) {
      return null;
    }
    return row as AuthCodeDBData;
  }

  static async loadRawDataX<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<AuthCodeDBData> {
    const row = await authCodeLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row as AuthCodeDBData;
  }

  static loaderOptions<T extends AuthCodeBase>(
    this: new (viewer: ExampleViewerAlias, data: Data) => T,
  ): LoadEntOptions<T, ExampleViewerAlias> {
    return {
      tableName: authCodeLoaderInfo.tableName,
      fields: authCodeLoaderInfo.fields,
      ent: this,
      loaderFactory: authCodeLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (AuthCodeBase.schemaFields != null) {
      return AuthCodeBase.schemaFields;
    }
    return (AuthCodeBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return AuthCodeBase.getSchemaFields().get(key);
  }

  loadUser(): Promise<User | null> {
    return loadEnt(this.viewer, this.userID, User.loaderOptions());
  }

  loadUserX(): Promise<User> {
    return loadEntX(this.viewer, this.userID, User.loaderOptions());
  }
}
