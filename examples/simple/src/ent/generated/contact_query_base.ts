/**
 * Copyright whaa whaa
 * Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.
 */

import {
  CustomEdgeQueryBase,
  ID,
  IndexLoaderFactory,
  RawCountLoaderFactory,
  Viewer,
} from "@snowtop/ent";
import {
  Contact,
  ContactEmail,
  ContactPhoneNumber,
  contactEmailLoader,
  contactPhoneNumberLoader,
} from "../internal";

export const contactToContactEmailsCountLoaderFactory =
  new RawCountLoaderFactory({
    ...ContactEmail.loaderOptions(),
    groupCol: "contact_id",
  });
export const contactToContactEmailsDataLoaderFactory = new IndexLoaderFactory(
  ContactEmail.loaderOptions(),
  "contact_id",
  {
    toPrime: [contactEmailLoader],
  },
);
export const contactToContactPhoneNumbersCountLoaderFactory =
  new RawCountLoaderFactory({
    ...ContactPhoneNumber.loaderOptions(),
    groupCol: "contact_id",
  });
export const contactToContactPhoneNumbersDataLoaderFactory =
  new IndexLoaderFactory(ContactPhoneNumber.loaderOptions(), "contact_id", {
    toPrime: [contactPhoneNumberLoader],
  });

export class ContactToContactEmailsQueryBase extends CustomEdgeQueryBase<
  Contact,
  ContactEmail
> {
  constructor(viewer: Viewer, src: Contact | ID) {
    super(viewer, {
      src: src,
      countLoaderFactory: contactToContactEmailsCountLoaderFactory,
      dataLoaderFactory: contactToContactEmailsDataLoaderFactory,
      options: ContactEmail.loaderOptions(),
    });
  }

  static query<T extends ContactToContactEmailsQueryBase>(
    this: new (viewer: Viewer, src: Contact | ID) => T,
    viewer: Viewer,
    src: Contact | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Contact.load(this.viewer, id);
  }
}

export class ContactToContactPhoneNumbersQueryBase extends CustomEdgeQueryBase<
  Contact,
  ContactPhoneNumber
> {
  constructor(viewer: Viewer, src: Contact | ID) {
    super(viewer, {
      src: src,
      countLoaderFactory: contactToContactPhoneNumbersCountLoaderFactory,
      dataLoaderFactory: contactToContactPhoneNumbersDataLoaderFactory,
      options: ContactPhoneNumber.loaderOptions(),
    });
  }

  static query<T extends ContactToContactPhoneNumbersQueryBase>(
    this: new (viewer: Viewer, src: Contact | ID) => T,
    viewer: Viewer,
    src: Contact | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Contact.load(this.viewer, id);
  }
}
