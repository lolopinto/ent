// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { Guest } from "src/ent/";
import CreateGuestAction, {
  GuestCreateInput,
} from "src/ent/guest/actions/create_guest_action";
import { GuestType } from "src/graphql/resolvers/";

interface customGuestCreateInput extends GuestCreateInput {
  eventID: string;
  guestGroupID: string;
}

interface GuestCreatePayload {
  guest: Guest;
}

export const GuestCreateInputType = new GraphQLInputObjectType({
  name: "GuestCreateInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    name: {
      type: GraphQLNonNull(GraphQLString),
    },
    eventID: {
      type: GraphQLNonNull(GraphQLID),
    },
    emailAddress: {
      type: GraphQLString,
    },
    guestGroupID: {
      type: GraphQLNonNull(GraphQLID),
    },
    title: {
      type: GraphQLString,
    },
  }),
});

export const GuestCreatePayloadType = new GraphQLObjectType({
  name: "GuestCreatePayload",
  fields: (): GraphQLFieldConfigMap<GuestCreatePayload, RequestContext> => ({
    guest: {
      type: GraphQLNonNull(GuestType),
    },
  }),
});

export const GuestCreateType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customGuestCreateInput }
> = {
  type: GraphQLNonNull(GuestCreatePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(GuestCreateInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<GuestCreatePayload> => {
    const guest = await CreateGuestAction.create(context.getViewer(), {
      name: input.name,
      eventID: mustDecodeIDFromGQLID(input.eventID),
      emailAddress: input.emailAddress,
      guestGroupID: mustDecodeIDFromGQLID(input.guestGroupID),
      title: input.title,
    }).saveX();
    return { guest: guest };
  },
};
