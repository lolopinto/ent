// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import DeleteEventActivityAction from "src/ent/event_activity/actions/delete_event_activity_action";

interface customEventActivityDeleteInput {
  eventActivityID: string;
}

interface EventActivityDeletePayload {
  deletedEventActivityID: string;
}

export const EventActivityDeleteInputType = new GraphQLInputObjectType({
  name: "EventActivityDeleteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventActivityID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventActivityDeletePayloadType = new GraphQLObjectType({
  name: "EventActivityDeletePayload",
  fields: (): GraphQLFieldConfigMap<
    EventActivityDeletePayload,
    RequestContext
  > => ({
    deletedEventActivityID: {
      type: GraphQLID,
    },
  }),
});

export const EventActivityDeleteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customEventActivityDeleteInput }
> = {
  type: GraphQLNonNull(EventActivityDeletePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(EventActivityDeleteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<EventActivityDeletePayload> => {
    await DeleteEventActivityAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.eventActivityID),
    );
    return { deletedEventActivityID: input.eventActivityID };
  },
};
