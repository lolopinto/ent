// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { EventActivity } from "src/ent/";
import EventActivityRemoveInviteAction from "src/ent/event_activity/actions/event_activity_remove_invite_action";
import { EventActivityType } from "src/graphql/resolvers/";

interface customEventActivityRemoveInviteInput {
  eventActivityID: string;
  inviteID: string;
}

interface EventActivityRemoveInvitePayload {
  eventActivity: EventActivity;
}

export const EventActivityRemoveInviteInputType = new GraphQLInputObjectType({
  name: "EventActivityRemoveInviteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventActivityID: {
      type: GraphQLNonNull(GraphQLID),
    },
    inviteID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventActivityRemoveInvitePayloadType = new GraphQLObjectType({
  name: "EventActivityRemoveInvitePayload",
  fields: (): GraphQLFieldConfigMap<
    EventActivityRemoveInvitePayload,
    RequestContext
  > => ({
    eventActivity: {
      type: GraphQLNonNull(EventActivityType),
    },
  }),
});

export const EventActivityRemoveInviteType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customEventActivityRemoveInviteInput }
> = {
  type: GraphQLNonNull(EventActivityRemoveInvitePayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(EventActivityRemoveInviteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<EventActivityRemoveInvitePayload> => {
    const eventActivity = await EventActivityRemoveInviteAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.eventActivityID),
      mustDecodeIDFromGQLID(input.inviteID),
    );
    return { eventActivity: eventActivity };
  },
};
