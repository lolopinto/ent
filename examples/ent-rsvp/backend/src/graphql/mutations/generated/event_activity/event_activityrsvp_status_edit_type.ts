// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLID,
  GraphQLNonNull,
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLResolveInfo,
  GraphQLInputFieldConfigMap,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import { mustDecodeIDFromGQLID } from "@lolopinto/ent/graphql";
import {
  EventActivityRsvpStatusInputType,
  EventActivityType,
} from "src/graphql/resolvers/";
import { EventActivity } from "src/ent/";
import EditEventActivityRsvpStatusAction, {
  EditEventActivityRsvpStatusInput,
} from "src/ent/event_activity/actions/edit_event_activity_rsvp_status_action";

interface customEventActivityrsvpStatusEditInput
  extends EditEventActivityRsvpStatusInput {
  eventActivityID: string;
}

interface EventActivityrsvpStatusEditPayload {
  eventActivity: EventActivity;
}

export const EventActivityrsvpStatusEditInputType = new GraphQLInputObjectType({
  name: "EventActivityrsvpStatusEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    eventActivityID: {
      type: GraphQLNonNull(GraphQLID),
    },
    rsvpStatus: {
      type: GraphQLNonNull(EventActivityRsvpStatusInputType),
    },
    guestID: {
      type: GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventActivityrsvpStatusEditPayloadType = new GraphQLObjectType({
  name: "EventActivityrsvpStatusEditPayload",
  fields: (): GraphQLFieldConfigMap<
    EventActivityrsvpStatusEditPayload,
    RequestContext
  > => ({
    eventActivity: {
      type: GraphQLNonNull(EventActivityType),
    },
  }),
});

export const EventActivityrsvpStatusEditType: GraphQLFieldConfig<
  undefined,
  RequestContext,
  { [input: string]: customEventActivityrsvpStatusEditInput }
> = {
  type: GraphQLNonNull(EventActivityrsvpStatusEditPayloadType),
  args: {
    input: {
      description: "",
      type: GraphQLNonNull(EventActivityrsvpStatusEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext,
    _info: GraphQLResolveInfo,
  ): Promise<EventActivityrsvpStatusEditPayload> => {
    let eventActivity = await EditEventActivityRsvpStatusAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.eventActivityID),
      {
        rsvpStatus: input.rsvpStatus,
        guestID: input.guestID,
      },
    );
    return { eventActivity: eventActivity };
  },
};
