type Query {
  emailAvailable(email: String!): Boolean!
  event(slug: String!): Event
  eventSlugAvailable(slug: String!): Boolean!
  node(id: ID!): Node
  viewer: Viewer
}

type Event implements Node {
  creator: User
  id: ID!
  name: String!
  slug: String
  eventActivities(first: Int, after: String, last: Int, before: String): EventToEventActivitiesConnection!
  guestGroups(first: Int, after: String, last: Int, before: String): EventToGuestGroupsConnection!
  guests(first: Int, after: String, last: Int, before: String): EventToGuestsConnection!
}

"""node interface"""
interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  events(first: Int, after: String, last: Int, before: String): UserToEventsConnection!
}

type UserToEventsConnection implements Connection {
  edges: [UserToEventsEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

"""connection interface"""
interface Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
}

"""edge interface"""
interface Edge {
  node: Node!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type UserToEventsEdge implements Edge {
  node: Event!
  cursor: String!
}

type EventToEventActivitiesConnection implements Connection {
  edges: [EventToEventActivitiesEdge!]!
  nodes: [EventActivity!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToEventActivitiesEdge implements Edge {
  node: EventActivity!
  cursor: String!
}

type EventActivity implements Node {
  event: Event
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  location: String!
  description: String
  inviteAllGuests: Boolean!
  attending(first: Int, after: String, last: Int, before: String): EventActivityToAttendingConnection!
  declined(first: Int, after: String, last: Int, before: String): EventActivityToDeclinedConnection!
  invites(first: Int, after: String, last: Int, before: String): EventActivityToInvitesConnection!
  viewerRsvpStatus: EventActivityRsvpStatus
  address: Address
}

"""Time scalar type"""
scalar Time

type EventActivityToAttendingConnection implements Connection {
  edges: [EventActivityToAttendingEdge!]!
  nodes: [Guest!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventActivityToAttendingEdge implements Edge {
  node: Guest!
  cursor: String!
  dietaryRestrictions: String
}

type Guest implements Node {
  event: Event
  guestGroup: GuestGroup
  id: ID!
  name: String!
  emailAddress: String
  title: String
  guestToAttendingEvents(first: Int, after: String, last: Int, before: String): GuestToAttendingEventsConnection!
  guestToDeclinedEvents(first: Int, after: String, last: Int, before: String): GuestToDeclinedEventsConnection!
}

type GuestGroup implements Node {
  event: Event
  id: ID!
  invitationName: String!
  guestGroupToInvitedEvents(first: Int, after: String, last: Int, before: String): GuestGroupToInvitedEventsConnection!
  guests(first: Int, after: String, last: Int, before: String): GuestGroupToGuestsConnection!
}

type GuestGroupToInvitedEventsConnection implements Connection {
  edges: [GuestGroupToInvitedEventsEdge!]!
  nodes: [EventActivity!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type GuestGroupToInvitedEventsEdge implements Edge {
  node: EventActivity!
  cursor: String!
}

type GuestGroupToGuestsConnection implements Connection {
  edges: [GuestGroupToGuestsEdge!]!
  nodes: [Guest!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type GuestGroupToGuestsEdge implements Edge {
  node: Guest!
  cursor: String!
}

type GuestToAttendingEventsConnection implements Connection {
  edges: [GuestToAttendingEventsEdge!]!
  nodes: [EventActivity!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type GuestToAttendingEventsEdge implements Edge {
  node: EventActivity!
  cursor: String!
  dietaryRestrictions: String
}

type GuestToDeclinedEventsConnection implements Connection {
  edges: [GuestToDeclinedEventsEdge!]!
  nodes: [EventActivity!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type GuestToDeclinedEventsEdge implements Edge {
  node: EventActivity!
  cursor: String!
}

type EventActivityToDeclinedConnection implements Connection {
  edges: [EventActivityToDeclinedEdge!]!
  nodes: [Guest!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventActivityToDeclinedEdge implements Edge {
  node: Guest!
  cursor: String!
}

type EventActivityToInvitesConnection implements Connection {
  edges: [EventActivityToInvitesEdge!]!
  nodes: [GuestGroup!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventActivityToInvitesEdge implements Edge {
  node: GuestGroup!
  cursor: String!
}

enum EventActivityRsvpStatus {
  ATTENDING
  DECLINED
  CAN_RSVP
  CANNOT_RSVP
}

type Address implements Node {
  owner: Node
  id: ID!
  street: String!
  city: String!
  state: String!
  zipCode: String!
  apartment: String
}

type EventToGuestGroupsConnection implements Connection {
  edges: [EventToGuestGroupsEdge!]!
  nodes: [GuestGroup!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToGuestGroupsEdge implements Edge {
  node: GuestGroup!
  cursor: String!
}

type EventToGuestsConnection implements Connection {
  edges: [EventToGuestsEdge!]!
  nodes: [Guest!]!
  pageInfo: PageInfo!
  rawCount: Int!
}

type EventToGuestsEdge implements Edge {
  node: Guest!
  cursor: String!
}

type Viewer {
  user: User
  guest: Guest
}

type Mutation {
  addressCreate(input: AddressCreateInput!): AddressCreatePayload!
  addressDelete(input: AddressDeleteInput!): AddressDeletePayload!
  addressEdit(input: AddressEditInput!): AddressEditPayload!
  authGuest(input: AuthGuestInput!): AuthGuestPayload!
  authUser(input: AuthUserInput!): AuthUserPayload!
  emailAvailable(email: String!): Boolean!
  eventActivityAddInvite(input: EventActivityAddInviteInput!): EventActivityAddInvitePayload!
  eventActivityCreate(input: EventActivityCreateInput!): EventActivityCreatePayload!
  eventActivityDelete(input: EventActivityDeleteInput!): EventActivityDeletePayload!
  eventActivityEdit(input: EventActivityEditInput!): EventActivityEditPayload!
  eventActivityRemoveInvite(input: EventActivityRemoveInviteInput!): EventActivityRemoveInvitePayload!
  eventActivityRsvpStatusEdit(input: EventActivityRsvpStatusEditInput!): EventActivityRsvpStatusEditPayload!
  eventCreate(input: EventCreateInput!): EventCreatePayload!
  guestCreate(input: GuestCreateInput!): GuestCreatePayload!
  guestDelete(input: GuestDeleteInput!): GuestDeletePayload!
  guestEdit(input: GuestEditInput!): GuestEditPayload!
  guestGroupCreate(input: GuestGroupCreateInput!): GuestGroupCreatePayload!
  guestGroupDelete(input: GuestGroupDeleteInput!): GuestGroupDeletePayload!
  guestGroupEdit(input: GuestGroupEditInput!): GuestGroupEditPayload!
  importGuests(eventID: ID!, file: Upload!): Event!
  userCreate(input: UserCreateInput!): UserCreatePayload!
}

type AddressCreatePayload {
  address: Address!
}

input AddressCreateInput {
  street: String!
  city: String!
  state: String!
  zipCode: String!
  apartment: String
  ownerID: ID!
  ownerType: String!
}

type AddressDeletePayload {
  deletedAddressID: ID
}

input AddressDeleteInput {
  addressID: ID!
}

type AddressEditPayload {
  address: Address!
}

input AddressEditInput {
  addressID: ID!
  street: String
  city: String
  state: String
  zipCode: String
  apartment: String
  ownerID: ID
  ownerType: String
}

type AuthGuestPayload {
  token: String!
  viewer: Viewer!
}

input AuthGuestInput {
  emailAddress: String!
  code: String!
}

type AuthUserPayload {
  token: String!
  viewer: Viewer!
}

input AuthUserInput {
  emailAddress: String!
  password: String!
}

type EventActivityAddInvitePayload {
  eventActivity: EventActivity!
}

input EventActivityAddInviteInput {
  eventActivityID: ID!
  inviteID: ID!
}

type EventActivityCreatePayload {
  eventActivity: EventActivity!
}

input EventActivityCreateInput {
  name: String!
  eventID: ID!
  startTime: Time!
  endTime: Time
  location: String!
  description: String
  inviteAllGuests: Boolean
  address: AddressEventActivityCreateInput
}

input AddressEventActivityCreateInput {
  street: String!
  city: String!
  state: String!
  zipCode: String!
  apartment: String
}

type EventActivityDeletePayload {
  deletedEventActivityID: ID
}

input EventActivityDeleteInput {
  eventActivityID: ID!
}

type EventActivityEditPayload {
  eventActivity: EventActivity!
}

input EventActivityEditInput {
  eventActivityID: ID!
  name: String
  eventID: ID
  startTime: Time
  endTime: Time
  location: String
  description: String
  inviteAllGuests: Boolean
}

type EventActivityRemoveInvitePayload {
  eventActivity: EventActivity!
}

input EventActivityRemoveInviteInput {
  eventActivityID: ID!
  inviteID: ID!
}

type EventActivityRsvpStatusEditPayload {
  eventActivity: EventActivity!
}

input EventActivityRsvpStatusEditInput {
  eventActivityID: ID!
  rsvpStatus: EventActivityRsvpStatusInput!
  guestID: ID!
  dietaryRestrictions: String
}

enum EventActivityRsvpStatusInput {
  ATTENDING
  DECLINED
}

type EventCreatePayload {
  event: Event!
}

input EventCreateInput {
  name: String!
  slug: String
  creatorID: ID!
  activities: [ActivityEventCreateInput!]
}

input ActivityEventCreateInput {
  name: String!
  startTime: Time!
  endTime: Time
  location: String!
  description: String
  inviteAllGuests: Boolean!
  address: AddressEventActivityCreateInput
}

type GuestCreatePayload {
  guest: Guest!
}

input GuestCreateInput {
  name: String!
  eventID: ID!
  emailAddress: String
  guestGroupID: ID!
  title: String
}

type GuestDeletePayload {
  deletedGuestID: ID
}

input GuestDeleteInput {
  guestID: ID!
}

type GuestEditPayload {
  guest: Guest!
}

input GuestEditInput {
  guestID: ID!
  name: String
  emailAddress: String
}

type GuestGroupCreatePayload {
  guestGroup: GuestGroup!
}

input GuestGroupCreateInput {
  invitationName: String!
  eventID: ID!
  guests: [GuestGuestGroupCreateInput!]
}

input GuestGuestGroupCreateInput {
  name: String!
  emailAddress: String
  title: String
}

type GuestGroupDeletePayload {
  deletedGuestGroupID: ID
}

input GuestGroupDeleteInput {
  guestGroupID: ID!
}

type GuestGroupEditPayload {
  guestGroup: GuestGroup!
}

input GuestGroupEditInput {
  guestGroupID: ID!
  invitationName: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserCreatePayload {
  user: User!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  password: String!
}
