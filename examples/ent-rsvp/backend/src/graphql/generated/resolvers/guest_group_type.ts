// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInt,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import {
  GraphQLEdgeConnection,
  GraphQLNodeInterface,
  nodeIDEncoder,
} from "@snowtop/ent/graphql";
import {
  GuestGroup,
  GuestGroupToGuestsQuery,
  GuestGroupToInvitedEventsQuery,
} from "src/ent/";
import {
  EventType,
  GuestGroupToGuestsConnectionType,
  GuestGroupToInvitedEventsConnectionType,
  GuestTagType,
} from "src/graphql/resolvers/internal";

export const GuestGroupType = new GraphQLObjectType({
  name: "GuestGroup",
  fields: (): GraphQLFieldConfigMap<GuestGroup, RequestContext<Viewer>> => ({
    event: {
      type: EventType,
      resolve: (obj: GuestGroup, args: {}, context: RequestContext<Viewer>) => {
        return obj.loadEvent();
      },
    },
    id: {
      type: new GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    invitationName: {
      type: new GraphQLNonNull(GraphQLString),
    },
    tag: {
      type: GuestTagType,
    },
    guestGroupToInvitedEvents: {
      type: new GraphQLNonNull(GuestGroupToInvitedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: GuestGroup,
        args: any,
        context: RequestContext<Viewer>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: GuestGroup) => GuestGroupToInvitedEventsQuery.query(v, obj),
          args,
        );
      },
    },
    guests: {
      type: new GraphQLNonNull(GuestGroupToGuestsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (
        obj: GuestGroup,
        args: any,
        context: RequestContext<Viewer>,
      ) => {
        return new GraphQLEdgeConnection(
          obj.viewer,
          obj,
          (v, obj: GuestGroup) => GuestGroupToGuestsQuery.query(v, obj),
          args,
        );
      },
    },
  }),
  interfaces: () => [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof GuestGroup;
  },
});
