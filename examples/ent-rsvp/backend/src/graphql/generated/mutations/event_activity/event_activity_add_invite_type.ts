// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import { mustDecodeIDFromGQLID } from "@snowtop/ent/graphql";
import { EventActivity } from "src/ent/";
import EventActivityAddInviteAction from "src/ent/event_activity/actions/event_activity_add_invite_action";
import { EventActivityType } from "src/graphql/resolvers/";

interface customEventActivityAddInviteInput {
  id: string;
  inviteID: string;
}

interface EventActivityAddInvitePayload {
  eventActivity: EventActivity;
}

export const EventActivityAddInviteInputType = new GraphQLInputObjectType({
  name: "EventActivityAddInviteInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of EventActivity",
      type: new GraphQLNonNull(GraphQLID),
    },
    inviteID: {
      type: new GraphQLNonNull(GraphQLID),
    },
  }),
});

export const EventActivityAddInvitePayloadType = new GraphQLObjectType({
  name: "EventActivityAddInvitePayload",
  fields: (): GraphQLFieldConfigMap<
    EventActivityAddInvitePayload,
    RequestContext
  > => ({
    eventActivity: {
      type: new GraphQLNonNull(EventActivityType),
    },
  }),
});

export const EventActivityAddInviteType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: customEventActivityAddInviteInput }
> = {
  type: new GraphQLNonNull(EventActivityAddInvitePayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(EventActivityAddInviteInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<EventActivityAddInvitePayload> => {
    const eventActivity = await EventActivityAddInviteAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      mustDecodeIDFromGQLID(input.inviteID),
    );
    return { eventActivity: eventActivity };
  },
};
