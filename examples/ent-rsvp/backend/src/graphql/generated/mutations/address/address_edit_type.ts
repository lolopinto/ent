// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLID,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
  GraphQLString,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import {
  mustDecodeIDFromGQLID,
  mustDecodeNullableIDFromGQLID,
} from "@snowtop/ent/graphql";
import { Address } from "src/ent/";
import EditAddressAction, {
  AddressEditInput,
} from "src/ent/address/actions/edit_address_action";
import { AddressType } from "src/graphql/resolvers/";

interface customAddressEditInput extends AddressEditInput {
  id: string;
  ownerID?: string;
}

interface AddressEditPayload {
  address: Address;
}

export const AddressEditInputType = new GraphQLInputObjectType({
  name: "AddressEditInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    id: {
      description: "id of Address",
      type: new GraphQLNonNull(GraphQLID),
    },
    street: {
      type: GraphQLString,
    },
    city: {
      type: GraphQLString,
    },
    state: {
      type: GraphQLString,
    },
    zipCode: {
      type: GraphQLString,
    },
    apartment: {
      type: GraphQLString,
    },
    ownerID: {
      type: GraphQLID,
    },
    ownerType: {
      type: GraphQLString,
    },
  }),
});

export const AddressEditPayloadType = new GraphQLObjectType({
  name: "AddressEditPayload",
  fields: (): GraphQLFieldConfigMap<
    AddressEditPayload,
    RequestContext<Viewer>
  > => ({
    address: {
      type: new GraphQLNonNull(AddressType),
    },
  }),
});

export const AddressEditType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: customAddressEditInput }
> = {
  type: new GraphQLNonNull(AddressEditPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(AddressEditInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<AddressEditPayload> => {
    const address = await EditAddressAction.saveXFromID(
      context.getViewer(),
      mustDecodeIDFromGQLID(input.id),
      {
        street: input.street,
        city: input.city,
        state: input.state,
        zipCode: input.zipCode,
        apartment: input.apartment,
        ownerID: mustDecodeNullableIDFromGQLID(input.ownerID),
        ownerType: input.ownerType,
      },
    );
    return { address };
  },
};
