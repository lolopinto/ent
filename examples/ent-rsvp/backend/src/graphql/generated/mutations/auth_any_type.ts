// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLFieldConfig,
  GraphQLFieldConfigMap,
  GraphQLInputFieldConfigMap,
  GraphQLInputObjectType,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLResolveInfo,
} from "graphql";
import { RequestContext, Viewer } from "@snowtop/ent";
import {
  AuthGuestInputType,
  AuthGuestPayloadType,
} from "src/graphql/generated/mutations/auth_guest_type";
import {
  AuthUserInputType,
  AuthUserPayloadType,
} from "src/graphql/generated/mutations/auth_user_type";
import { AuthResolver } from "src/graphql/mutations/auth/auth";
import {
  AuthAnyInput,
  AuthAnyPayload,
} from "src/graphql/mutations/auth/auth_types";

export const AuthAnyInputType = new GraphQLInputObjectType({
  name: "AuthAnyInput",
  fields: (): GraphQLInputFieldConfigMap => ({
    user: {
      type: AuthUserInputType,
    },
    guest: {
      type: AuthGuestInputType,
    },
  }),
});

export const AuthAnyPayloadType = new GraphQLObjectType({
  name: "AuthAnyPayload",
  fields: (): GraphQLFieldConfigMap<
    AuthAnyPayload,
    RequestContext<Viewer>
  > => ({
    user: {
      type: AuthUserPayloadType,
    },
    guest: {
      type: AuthGuestPayloadType,
    },
  }),
  isTypeOf(obj) {
    return obj instanceof AuthAnyPayload;
  },
});

export const AuthAnyType: GraphQLFieldConfig<
  undefined,
  RequestContext<Viewer>,
  { [input: string]: AuthAnyInput }
> = {
  type: new GraphQLNonNull(AuthAnyPayloadType),
  args: {
    input: {
      description: "",
      type: new GraphQLNonNull(AuthAnyInputType),
    },
  },
  resolve: async (
    _source,
    { input },
    context: RequestContext<Viewer>,
    _info: GraphQLResolveInfo,
  ): Promise<AuthAnyPayload> => {
    const r = new AuthResolver();
    return r.authAny(context, { user: input.user, guest: input.guest });
  },
};
