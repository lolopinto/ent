// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { Guest } from "src/ent/";
import {
  GuestBuilder,
  GuestInput,
} from "src/ent/guest/actions/generated/guest_builder";

export interface GuestEditInput {
  name?: string;
  emailAddress?: string | null;
}

export class EditGuestActionBase implements Action<Guest> {
  public readonly builder: GuestBuilder;
  public readonly viewer: Viewer;
  protected input: GuestEditInput;
  protected guest: Guest;

  constructor(viewer: Viewer, guest: Guest, input: GuestEditInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new GuestBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      guest,
    );
    this.guest = guest;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): GuestInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<Guest>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Guest | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Guest> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditGuestActionBase>(
    this: new (viewer: Viewer, guest: Guest, input: GuestEditInput) => T,
    viewer: Viewer,
    guest: Guest,
    input: GuestEditInput,
  ): T {
    return new this(viewer, guest, input);
  }

  static async saveXFromID<T extends EditGuestActionBase>(
    this: new (viewer: Viewer, guest: Guest, input: GuestEditInput) => T,
    viewer: Viewer,
    id: ID,
    input: GuestEditInput,
  ): Promise<Guest> {
    const guest = await Guest.loadX(viewer, id);
    return new this(viewer, guest, input).saveX();
  }
}
