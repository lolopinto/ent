// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Address, Event } from "src/ent/";
import { EventBuilder } from "src/ent/generated/event/actions/event_builder";

interface customActivityInput {
  addressId?: ID | null | Builder<Address, Viewer>;
  name: string;
  startTime: Date;
  endTime?: Date | null;
  location: string;
  description?: string | null;
  inviteAllGuests: boolean;
  address?: customAddressInput | null;
}

interface customAddressInput {
  street: string;
  city: string;
  state: string;
  zipCode: string;
  apartment?: string | null;
}

export interface EventCreateInput {
  name: string;
  slug?: string | null;
  activities?: customActivityInput[] | null;
}

export type CreateEventActionTriggers = (
  | Trigger<
      Event,
      EventBuilder<EventCreateInput, Event | null>,
      Viewer,
      EventCreateInput,
      Event | null
    >
  | Trigger<
      Event,
      EventBuilder<EventCreateInput, Event | null>,
      Viewer,
      EventCreateInput,
      Event | null
    >[]
)[];

export type CreateEventActionObservers = Observer<
  Event,
  EventBuilder<EventCreateInput, Event | null>,
  Viewer,
  EventCreateInput,
  Event | null
>[];

export type CreateEventActionValidators = Validator<
  Event,
  EventBuilder<EventCreateInput, Event | null>,
  Viewer,
  EventCreateInput,
  Event | null
>[];

export class CreateEventActionBase
  implements
    Action<
      Event,
      EventBuilder<EventCreateInput, Event | null>,
      Viewer,
      EventCreateInput,
      Event | null
    >
{
  public readonly builder: EventBuilder<EventCreateInput, Event | null>;
  public readonly viewer: Viewer;
  protected input: EventCreateInput;

  constructor(viewer: Viewer, input: EventCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new EventBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<Event, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateEventActionTriggers {
    return [];
  }

  getObservers(): CreateEventActionObservers {
    return [];
  }

  getValidators(): CreateEventActionValidators {
    return [];
  }

  getInput(): EventCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Event | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Event> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateEventActionBase>(
    this: new (
      viewer: Viewer,
      input: EventCreateInput,
    ) => T,
    viewer: Viewer,
    input: EventCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
