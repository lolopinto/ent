// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Address, Event, EventActivity } from "src/ent/";
import { EventActivityBuilder } from "src/ent/generated/event_activity/actions/event_activity_builder";

interface customAddressInput {
  street: string;
  city: string;
  state: string;
  zipCode: string;
  apartment?: string | null;
}

export interface EventActivityCreateInput {
  addressId?: ID | null | Builder<Address, Viewer>;
  name: string;
  eventID: ID | Builder<Event, Viewer>;
  startTime: Date;
  endTime?: Date | null;
  location: string;
  description?: string | null;
  inviteAllGuests?: boolean;
  address?: customAddressInput | null;
}

export type CreateEventActivityActionTriggers = (
  | Trigger<
      EventActivity,
      EventActivityBuilder<EventActivityCreateInput, EventActivity | null>,
      Viewer,
      EventActivityCreateInput,
      EventActivity | null
    >
  | Trigger<
      EventActivity,
      EventActivityBuilder<EventActivityCreateInput, EventActivity | null>,
      Viewer,
      EventActivityCreateInput,
      EventActivity | null
    >[]
)[];

export type CreateEventActivityActionObservers = Observer<
  EventActivity,
  EventActivityBuilder<EventActivityCreateInput, EventActivity | null>,
  Viewer,
  EventActivityCreateInput,
  EventActivity | null
>[];

export type CreateEventActivityActionValidators = Validator<
  EventActivity,
  EventActivityBuilder<EventActivityCreateInput, EventActivity | null>,
  Viewer,
  EventActivityCreateInput,
  EventActivity | null
>[];

export class CreateEventActivityActionBase
  implements
    Action<
      EventActivity,
      EventActivityBuilder<EventActivityCreateInput, EventActivity | null>,
      Viewer,
      EventActivityCreateInput,
      EventActivity | null
    >
{
  public readonly builder: EventActivityBuilder<
    EventActivityCreateInput,
    EventActivity | null
  >;
  public readonly viewer: Viewer;
  protected input: EventActivityCreateInput;

  constructor(viewer: Viewer, input: EventActivityCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new EventActivityBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<EventActivity, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateEventActivityActionTriggers {
    return [];
  }

  getObservers(): CreateEventActivityActionObservers {
    return [];
  }

  getValidators(): CreateEventActivityActionValidators {
    return [];
  }

  getInput(): EventActivityCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<EventActivity | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<EventActivity> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateEventActivityActionBase>(
    this: new (
      viewer: Viewer,
      input: EventActivityCreateInput,
    ) => T,
    viewer: Viewer,
    input: EventActivityCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
