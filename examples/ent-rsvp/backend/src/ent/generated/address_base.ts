// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  ObjectLoaderFactory,
  PrivacyPolicy,
  Viewer,
  convertDate,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntViaKey,
  loadEntX,
  loadEntXViaKey,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import { loadEntByType, loadEntXByType } from "src/ent/generated/loadAny";
import { NodeType } from "src/ent/internal";
import schema from "src/schema/address";

const tableName = "addresses";
const fields = [
  "id",
  "created_at",
  "updated_at",
  "street",
  "city",
  "state",
  "zip_code",
  "apartment",
  "owner_id",
  "owner_type",
];

export class AddressBase {
  readonly nodeType = NodeType.Address;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly street: string;
  readonly city: string;
  readonly state: string;
  readonly zipCode: string;
  readonly apartment: string | null;
  readonly ownerID: ID;
  readonly ownerType: string;

  constructor(public viewer: Viewer, protected data: Data) {
    this.id = data.id;
    this.createdAt = convertDate(data.created_at);
    this.updatedAt = convertDate(data.updated_at);
    this.street = data.street;
    this.city = data.city;
    this.state = data.state;
    this.zipCode = data.zip_code;
    this.apartment = data.apartment;
    this.ownerID = data.owner_id;
    this.ownerType = data.owner_type;
  }

  privacyPolicy: PrivacyPolicy = AllowIfViewerPrivacyPolicy;

  static async load<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      AddressBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      AddressBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<T[]> {
    return (await loadEnts(
      viewer,
      AddressBase.loaderOptions.apply(this),
      ...ids,
    )) as T[];
  }

  static async loadCustom<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    query: CustomQuery,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      AddressBase.loaderOptions.apply(this),
      query,
    )) as T[];
  }

  static async loadCustomData<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    query: CustomQuery,
    context?: Context,
  ): Promise<Data[]> {
    return loadCustomData(
      AddressBase.loaderOptions.apply(this),
      query,
      context,
    );
  }

  static async loadRawData<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<Data | null> {
    return addressLoader.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    id: ID,
    context?: Context,
  ): Promise<Data> {
    const row = await addressLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static async loadFromOwnerID<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    ownerID: ID,
  ): Promise<T | null> {
    return (await loadEntViaKey(viewer, ownerID, {
      ...AddressBase.loaderOptions.apply(this),
      loaderFactory: addressOwnerIDLoader,
    })) as T | null;
  }

  static async loadFromOwnerIDX<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    viewer: Viewer,
    ownerID: ID,
  ): Promise<T> {
    return (await loadEntXViaKey(viewer, ownerID, {
      ...AddressBase.loaderOptions.apply(this),
      loaderFactory: addressOwnerIDLoader,
    })) as T;
  }

  static async loadIDFromOwnerID<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    ownerID: ID,
    context?: Context,
  ): Promise<ID | undefined> {
    const row = await addressOwnerIDLoader.createLoader(context).load(ownerID);
    return row?.id;
  }

  static async loadRawDataFromOwnerID<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
    ownerID: ID,
    context?: Context,
  ): Promise<Data | null> {
    return addressOwnerIDLoader.createLoader(context).load(ownerID);
  }

  static loaderOptions<T extends AddressBase>(
    this: new (viewer: Viewer, data: Data) => T,
  ): LoadEntOptions<T> {
    return {
      tableName,
      fields,
      ent: this,
      loaderFactory: addressLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (AddressBase.schemaFields != null) {
      return AddressBase.schemaFields;
    }
    return (AddressBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return AddressBase.getSchemaFields().get(key);
  }

  async loadOwner(): Promise<Ent | null> {
    return loadEntByType(
      this.viewer,
      this.ownerType as unknown as NodeType,
      this.ownerID,
    );
  }

  loadOwnerX(): Promise<Ent> {
    return loadEntXByType(
      this.viewer,
      this.ownerType as unknown as NodeType,
      this.ownerID,
    );
  }
}

export const addressLoader = new ObjectLoaderFactory({
  tableName,
  fields,
  key: "id",
});

export const addressOwnerIDLoader = new ObjectLoaderFactory({
  tableName,
  fields,
  key: "owner_id",
});

addressLoader.addToPrime(addressOwnerIDLoader);
addressOwnerIDLoader.addToPrime(addressLoader);
