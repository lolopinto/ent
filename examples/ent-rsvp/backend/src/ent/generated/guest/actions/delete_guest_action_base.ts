// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Guest } from "src/ent/";
import {
  GuestBuilder,
  GuestInput,
} from "src/ent/generated/guest/actions/guest_builder";

export type DeleteGuestActionTriggers = (
  | Trigger<Guest, GuestBuilder<GuestInput, Guest>, Viewer, GuestInput, Guest>
  | Trigger<Guest, GuestBuilder<GuestInput, Guest>, Viewer, GuestInput, Guest>[]
)[];

export type DeleteGuestActionObservers = Observer<
  Guest,
  GuestBuilder<GuestInput, Guest>,
  Viewer,
  GuestInput,
  Guest
>[];

export type DeleteGuestActionValidators = Validator<
  Guest,
  GuestBuilder<GuestInput, Guest>,
  Viewer,
  GuestInput,
  Guest
>[];

export class DeleteGuestActionBase
  implements
    Action<Guest, GuestBuilder<GuestInput, Guest>, Viewer, GuestInput, Guest>
{
  public readonly builder: GuestBuilder<GuestInput, Guest>;
  public readonly viewer: Viewer;
  protected readonly guest: Guest;

  constructor(viewer: Viewer, guest: Guest) {
    this.viewer = viewer;
    this.builder = new GuestBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      guest,
    );
    this.guest = guest;
  }

  getPrivacyPolicy(): PrivacyPolicy<Guest, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): DeleteGuestActionTriggers {
    return [];
  }

  getObservers(): DeleteGuestActionObservers {
    return [];
  }

  getValidators(): DeleteGuestActionValidators {
    return [];
  }

  getInput(): GuestInput {
    return {};
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteGuestActionBase>(
    this: new (
      viewer: Viewer,
      guest: Guest,
    ) => T,
    viewer: Viewer,
    guest: Guest,
  ): T {
    return new this(viewer, guest);
  }

  static async saveXFromID<T extends DeleteGuestActionBase>(
    this: new (
      viewer: Viewer,
      guest: Guest,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    const guest = await Guest.loadX(viewer, id);
    return new this(viewer, guest).saveX();
  }
}
