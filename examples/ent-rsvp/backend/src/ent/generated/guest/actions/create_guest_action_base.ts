// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Address, Event, Guest, GuestData, GuestGroup } from "src/ent/";
import { GuestBuilder } from "src/ent/generated/guest/actions/guest_builder";

export interface GuestCreateInput {
  addressId?: ID | null | Builder<Address, Viewer>;
  name: string;
  eventID: ID | Builder<Event, Viewer>;
  emailAddress?: string | null;
  guestGroupID: ID | Builder<GuestGroup, Viewer>;
  title?: string | null;
  guestDataId?: ID | null | Builder<GuestData, Viewer>;
}

export type CreateGuestActionTriggers = (
  | Trigger<
      Guest,
      GuestBuilder<GuestCreateInput, Guest | null>,
      Viewer,
      GuestCreateInput,
      Guest | null
    >
  | Trigger<
      Guest,
      GuestBuilder<GuestCreateInput, Guest | null>,
      Viewer,
      GuestCreateInput,
      Guest | null
    >[]
)[];

export type CreateGuestActionObservers = Observer<
  Guest,
  GuestBuilder<GuestCreateInput, Guest | null>,
  Viewer,
  GuestCreateInput,
  Guest | null
>[];

export type CreateGuestActionValidators = Validator<
  Guest,
  GuestBuilder<GuestCreateInput, Guest | null>,
  Viewer,
  GuestCreateInput,
  Guest | null
>[];

export class CreateGuestActionBase
  implements
    Action<
      Guest,
      GuestBuilder<GuestCreateInput, Guest | null>,
      Viewer,
      GuestCreateInput,
      Guest | null
    >
{
  public readonly builder: GuestBuilder<GuestCreateInput, Guest | null>;
  public readonly viewer: Viewer;
  protected input: GuestCreateInput;

  constructor(viewer: Viewer, input: GuestCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new GuestBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<Guest, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateGuestActionTriggers {
    return [];
  }

  getObservers(): CreateGuestActionObservers {
    return [];
  }

  getValidators(): CreateGuestActionValidators {
    return [];
  }

  getInput(): GuestCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<Guest | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<Guest> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateGuestActionBase>(
    this: new (
      viewer: Viewer,
      input: GuestCreateInput,
    ) => T,
    viewer: Viewer,
    input: GuestCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
