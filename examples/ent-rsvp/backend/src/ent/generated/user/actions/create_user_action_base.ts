// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { User } from "src/ent/";
import { UserBuilder } from "src/ent/generated/user/actions/user_builder";

export interface UserCreateInput {
  firstName: string;
  lastName: string;
  emailAddress: string;
  password: string;
}

export type CreateUserActionTriggers = (
  | Trigger<
      User,
      UserBuilder<UserCreateInput, User | null>,
      Viewer,
      UserCreateInput,
      User | null
    >
  | Trigger<
      User,
      UserBuilder<UserCreateInput, User | null>,
      Viewer,
      UserCreateInput,
      User | null
    >[]
)[];

export type CreateUserActionObservers = Observer<
  User,
  UserBuilder<UserCreateInput, User | null>,
  Viewer,
  UserCreateInput,
  User | null
>[];

export type CreateUserActionValidators = Validator<
  User,
  UserBuilder<UserCreateInput, User | null>,
  Viewer,
  UserCreateInput,
  User | null
>[];

export class CreateUserActionBase
  implements
    Action<
      User,
      UserBuilder<UserCreateInput, User | null>,
      Viewer,
      UserCreateInput,
      User | null
    >
{
  public readonly builder: UserBuilder<UserCreateInput, User | null>;
  public readonly viewer: Viewer;
  protected input: UserCreateInput;

  constructor(viewer: Viewer, input: UserCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new UserBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<User, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateUserActionTriggers {
    return [];
  }

  getObservers(): CreateUserActionObservers {
    return [];
  }

  getValidators(): CreateUserActionValidators {
    return [];
  }

  getInput(): UserCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<User | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<User> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateUserActionBase>(
    this: new (viewer: Viewer, input: UserCreateInput) => T,
    viewer: Viewer,
    input: UserCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
