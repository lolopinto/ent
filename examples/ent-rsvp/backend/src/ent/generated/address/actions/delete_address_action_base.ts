// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { Address } from "src/ent/";
import {
  AddressBuilder,
  AddressInput,
} from "src/ent/generated/address/actions/address_builder";

export type DeleteAddressActionTriggers = (
  | Trigger<
      Address,
      AddressBuilder<AddressInput, Address>,
      Viewer,
      AddressInput,
      Address
    >
  | Trigger<
      Address,
      AddressBuilder<AddressInput, Address>,
      Viewer,
      AddressInput,
      Address
    >[]
)[];

export type DeleteAddressActionObservers = Observer<
  Address,
  AddressBuilder<AddressInput, Address>,
  Viewer,
  AddressInput,
  Address
>[];

export type DeleteAddressActionValidators = Validator<
  Address,
  AddressBuilder<AddressInput, Address>,
  Viewer,
  AddressInput,
  Address
>[];

export class DeleteAddressActionBase
  implements
    Action<
      Address,
      AddressBuilder<AddressInput, Address>,
      Viewer,
      AddressInput,
      Address
    >
{
  public readonly builder: AddressBuilder<AddressInput, Address>;
  public readonly viewer: Viewer;
  protected readonly address: Address;

  constructor(viewer: Viewer, address: Address) {
    this.viewer = viewer;
    this.builder = new AddressBuilder(
      this.viewer,
      WriteOperation.Delete,
      this,
      address,
    );
    this.address = address;
  }

  getPrivacyPolicy(): PrivacyPolicy<Address, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): DeleteAddressActionTriggers {
    return [];
  }

  getObservers(): DeleteAddressActionObservers {
    return [];
  }

  getValidators(): DeleteAddressActionValidators {
    return [];
  }

  getInput(): AddressInput {
    return {};
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<void> {
    await this.builder.save();
  }

  async saveX(): Promise<void> {
    await this.builder.saveX();
  }

  static create<T extends DeleteAddressActionBase>(
    this: new (
      viewer: Viewer,
      address: Address,
    ) => T,
    viewer: Viewer,
    address: Address,
  ): T {
    return new this(viewer, address);
  }

  static async saveXFromID<T extends DeleteAddressActionBase>(
    this: new (
      viewer: Viewer,
      address: Address,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<void> {
    const address = await Address.loadX(viewer, id);
    return new this(viewer, address).saveX();
  }
}
