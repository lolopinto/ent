// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Changeset,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { GuestGroup } from "src/ent/";
import { GuestGroupBuilder } from "src/ent/generated/guest_group/actions/guest_group_builder";

export interface GuestGroupEditInput {
  invitationName?: string;
}

export type EditGuestGroupActionTriggers = (
  | Trigger<
      GuestGroup,
      GuestGroupBuilder<GuestGroupEditInput, GuestGroup>,
      Viewer,
      GuestGroupEditInput,
      GuestGroup
    >
  | Trigger<
      GuestGroup,
      GuestGroupBuilder<GuestGroupEditInput, GuestGroup>,
      Viewer,
      GuestGroupEditInput,
      GuestGroup
    >[]
)[];

export type EditGuestGroupActionObservers = Observer<
  GuestGroup,
  GuestGroupBuilder<GuestGroupEditInput, GuestGroup>,
  Viewer,
  GuestGroupEditInput,
  GuestGroup
>[];

export type EditGuestGroupActionValidators = Validator<
  GuestGroup,
  GuestGroupBuilder<GuestGroupEditInput, GuestGroup>,
  Viewer,
  GuestGroupEditInput,
  GuestGroup
>[];

export class EditGuestGroupActionBase
  implements
    Action<
      GuestGroup,
      GuestGroupBuilder<GuestGroupEditInput, GuestGroup>,
      Viewer,
      GuestGroupEditInput,
      GuestGroup
    >
{
  public readonly builder: GuestGroupBuilder<GuestGroupEditInput, GuestGroup>;
  public readonly viewer: Viewer;
  protected input: GuestGroupEditInput;
  protected readonly guestGroup: GuestGroup;

  constructor(
    viewer: Viewer,
    guestGroup: GuestGroup,
    input: GuestGroupEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new GuestGroupBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      guestGroup,
    );
    this.guestGroup = guestGroup;
  }

  getPrivacyPolicy(): PrivacyPolicy<GuestGroup, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): EditGuestGroupActionTriggers {
    return [];
  }

  getObservers(): EditGuestGroupActionObservers {
    return [];
  }

  getValidators(): EditGuestGroupActionValidators {
    return [];
  }

  getInput(): GuestGroupEditInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<GuestGroup | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<GuestGroup> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends EditGuestGroupActionBase>(
    this: new (
      viewer: Viewer,
      guestGroup: GuestGroup,
      input: GuestGroupEditInput,
    ) => T,
    viewer: Viewer,
    guestGroup: GuestGroup,
    input: GuestGroupEditInput,
  ): T {
    return new this(viewer, guestGroup, input);
  }

  static async saveXFromID<T extends EditGuestGroupActionBase>(
    this: new (
      viewer: Viewer,
      guestGroup: GuestGroup,
      input: GuestGroupEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: GuestGroupEditInput,
  ): Promise<GuestGroup> {
    const guestGroup = await GuestGroup.loadX(viewer, id);
    return new this(viewer, guestGroup, input).saveX();
  }
}
