// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  EdgeType,
  Guest,
  EventActivity,
  AuthCode,
  GuestData,
  EventActivityToAttendingQuery,
  EventActivityToDeclinedQuery,
  EventActivityToInvitesQuery,
  GuestToAttendingEventsEdge,
  GuestToDeclinedEventsEdge,
} from "src/ent/internal";
import {
  ID,
  Viewer,
  EdgeQuerySource,
  AssocEdgeQueryBase,
  CustomEdgeQueryBase,
  query,
} from "@lolopinto/ent";

export class GuestToAttendingEventsQueryBase extends AssocEdgeQueryBase<
  Guest,
  EventActivity,
  GuestToAttendingEventsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Guest>) {
    super(
      viewer,
      src,
      EdgeType.GuestToAttendingEvents,
      EventActivity.loaderOptions(),
      GuestToAttendingEventsEdge,
    );
  }

  static query<T extends GuestToAttendingEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Guest>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Guest>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export class GuestToDeclinedEventsQueryBase extends AssocEdgeQueryBase<
  Guest,
  EventActivity,
  GuestToDeclinedEventsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Guest>) {
    super(
      viewer,
      src,
      EdgeType.GuestToDeclinedEvents,
      EventActivity.loaderOptions(),
      GuestToDeclinedEventsEdge,
    );
  }

  static query<T extends GuestToDeclinedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Guest>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Guest>,
  ): T {
    return new this(viewer, src);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export class GuestToAuthCodesQueryBase extends CustomEdgeQueryBase<AuthCode> {
  constructor(viewer: Viewer, src: Guest | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, AuthCode.loaderOptions(), query.Eq("guest_id", id));
  }

  static query<T extends GuestToAuthCodesQueryBase>(
    this: new (viewer: Viewer, src: Guest | ID) => T,
    viewer: Viewer,
    src: Guest | ID,
  ): T {
    return new this(viewer, src);
  }
}

export class GuestToGuestDataQueryBase extends CustomEdgeQueryBase<GuestData> {
  constructor(viewer: Viewer, src: Guest | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, GuestData.loaderOptions(), query.Eq("guest_id", id));
  }

  static query<T extends GuestToGuestDataQueryBase>(
    this: new (viewer: Viewer, src: Guest | ID) => T,
    viewer: Viewer,
    src: Guest | ID,
  ): T {
    return new this(viewer, src);
  }
}
