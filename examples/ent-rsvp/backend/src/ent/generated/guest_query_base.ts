// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  CustomEdgeQueryBase,
  EdgeQuerySource,
  ID,
  Viewer,
} from "@snowtop/ent";
import {
  AuthCode,
  EdgeType,
  EventActivity,
  EventActivityToAttendingQuery,
  EventActivityToDeclinedQuery,
  EventActivityToInvitesQuery,
  Guest,
  GuestData,
  GuestToAttendingEventsEdge,
  GuestToDeclinedEventsEdge,
} from "src/ent/internal";

export const guestToAttendingEventsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.GuestToAttendingEvents);
export const guestToAttendingEventsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.GuestToAttendingEvents,
    () => GuestToAttendingEventsEdge,
  );

export const guestToDeclinedEventsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.GuestToDeclinedEvents);
export const guestToDeclinedEventsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.GuestToDeclinedEvents,
    () => GuestToDeclinedEventsEdge,
  );

export abstract class GuestToAttendingEventsQueryBase extends AssocEdgeQueryBase<
  Guest,
  EventActivity,
  GuestToAttendingEventsEdge,
  Viewer
> {
  constructor(
    viewer: Viewer,
    src: EdgeQuerySource<Guest, EventActivity, Viewer>,
  ) {
    super(
      viewer,
      src,
      guestToAttendingEventsCountLoaderFactory,
      guestToAttendingEventsDataLoaderFactory,
      EventActivity.loaderOptions(),
    );
  }

  static query<T extends GuestToAttendingEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Guest, EventActivity>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Guest, EventActivity>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return Guest.load(this.viewer, id);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export abstract class GuestToDeclinedEventsQueryBase extends AssocEdgeQueryBase<
  Guest,
  EventActivity,
  GuestToDeclinedEventsEdge,
  Viewer
> {
  constructor(
    viewer: Viewer,
    src: EdgeQuerySource<Guest, EventActivity, Viewer>,
  ) {
    super(
      viewer,
      src,
      guestToDeclinedEventsCountLoaderFactory,
      guestToDeclinedEventsDataLoaderFactory,
      EventActivity.loaderOptions(),
    );
  }

  static query<T extends GuestToDeclinedEventsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Guest, EventActivity>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Guest, EventActivity>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return Guest.load(this.viewer, id);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export class GuestToAuthCodesQueryBase extends CustomEdgeQueryBase<
  Guest,
  AuthCode,
  Viewer
> {
  constructor(viewer: Viewer, src: Guest | ID) {
    super(viewer, {
      src: src,
      groupCol: "guest_id",
      loadEntOptions: AuthCode.loaderOptions(),
      name: "GuestToAuthCodesQuery",
    });
  }

  static query<T extends GuestToAuthCodesQueryBase>(
    this: new (viewer: Viewer, src: Guest | ID) => T,
    viewer: Viewer,
    src: Guest | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Guest.load(this.viewer, id);
  }
}

export class GuestToGuestDataQueryBase extends CustomEdgeQueryBase<
  Guest,
  GuestData,
  Viewer
> {
  constructor(viewer: Viewer, src: Guest | ID) {
    super(viewer, {
      src: src,
      groupCol: "guest_id",
      loadEntOptions: GuestData.loaderOptions(),
      name: "GuestToGuestDataQuery",
    });
  }

  static query<T extends GuestToGuestDataQueryBase>(
    this: new (viewer: Viewer, src: Guest | ID) => T,
    viewer: Viewer,
    src: Guest | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return Guest.load(this.viewer, id);
  }
}
