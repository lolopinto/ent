// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  Event,
  EventActivity,
  GuestData,
  GuestGroup,
  Guest,
} from "src/ent/internal";
import { ID, Viewer, CustomEdgeQueryBase, query } from "@lolopinto/ent";

export class EventToEventActivitiesQueryBase extends CustomEdgeQueryBase<
  EventActivity
> {
  constructor(viewer: Viewer, src: Event | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, EventActivity.loaderOptions(), query.Eq("event_id", id));
  }

  static query<T extends EventToEventActivitiesQueryBase>(
    this: new (viewer: Viewer, src: Event | ID) => T,
    viewer: Viewer,
    src: Event | ID,
  ): T {
    return new this(viewer, src);
  }
}

export class EventToGuestDataQueryBase extends CustomEdgeQueryBase<GuestData> {
  constructor(viewer: Viewer, src: Event | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, GuestData.loaderOptions(), query.Eq("event_id", id));
  }

  static query<T extends EventToGuestDataQueryBase>(
    this: new (viewer: Viewer, src: Event | ID) => T,
    viewer: Viewer,
    src: Event | ID,
  ): T {
    return new this(viewer, src);
  }
}

export class EventToGuestGroupsQueryBase extends CustomEdgeQueryBase<
  GuestGroup
> {
  constructor(viewer: Viewer, src: Event | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, GuestGroup.loaderOptions(), query.Eq("event_id", id));
  }

  static query<T extends EventToGuestGroupsQueryBase>(
    this: new (viewer: Viewer, src: Event | ID) => T,
    viewer: Viewer,
    src: Event | ID,
  ): T {
    return new this(viewer, src);
  }
}

export class EventToGuestsQueryBase extends CustomEdgeQueryBase<Guest> {
  constructor(viewer: Viewer, src: Event | ID) {
    let id: ID;
    if (typeof src === "object") {
      id = src.id;
    } else {
      id = src;
    }
    super(viewer, src, Guest.loaderOptions(), query.Eq("event_id", id));
  }

  static query<T extends EventToGuestsQueryBase>(
    this: new (viewer: Viewer, src: Event | ID) => T,
    viewer: Viewer,
    src: Event | ID,
  ): T {
    return new this(viewer, src);
  }
}
