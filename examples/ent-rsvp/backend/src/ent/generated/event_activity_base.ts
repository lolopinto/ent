// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  Viewer,
  getEdgeTypeInGroup,
  loadCustomCount,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import {
  EventActivityDBData,
  eventActivityLoader,
  eventActivityLoaderInfo,
} from "src/ent/generated/loaders";
import {
  EdgeType,
  EventActivityRsvpStatus,
  NodeType,
} from "src/ent/generated/types";
import {
  Address,
  Event,
  EventActivityToAttendingQuery,
  EventActivityToDeclinedQuery,
  EventActivityToInvitesQuery,
  Guest,
  IWithAddress,
  WithAddressMixin,
} from "src/ent/internal";
import schema from "src/schema/event_activity_schema";

export class EventActivityBase
  extends WithAddressMixin(class {})
  implements Ent<Viewer>, IWithAddress
{
  protected readonly data: EventActivityDBData;
  readonly nodeType = NodeType.EventActivity;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly name: string;
  readonly eventID: ID;
  readonly startTime: Date;
  readonly endTime: Date | null;
  readonly location: string;
  readonly description: string | null;
  readonly inviteAllGuests: boolean;

  constructor(public viewer: Viewer, data: Data) {
    // @ts-ignore pass to mixin
    super(viewer, data);
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.name = data.name;
    this.eventID = data.event_id;
    this.startTime = data.start_time;
    this.endTime = data.end_time;
    this.location = data.location;
    this.description = data.description;
    this.inviteAllGuests = data.invite_all_guests;
    // @ts-expect-error
    this.data = data;
  }

  __setRawDBData<EventActivityDBData>(data: EventActivityDBData) {}

  /** used by some ent internals to get access to raw db data. should not be depended on. may not always be on the ent **/
  ___getRawDBData(): EventActivityDBData {
    return this.data;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, Viewer> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      EventActivityBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      EventActivityBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      EventActivityBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    query: CustomQuery<EventActivityDBData>,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      {
        ...EventActivityBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
    )) as T[];
  }

  static async loadCustomData<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    query: CustomQuery<EventActivityDBData>,
    context?: Context,
  ): Promise<EventActivityDBData[]> {
    return loadCustomData<EventActivityDBData, EventActivityDBData>(
      {
        ...EventActivityBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    );
  }

  static async loadCustomCount<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    query: CustomQuery<EventActivityDBData>,
    context?: Context,
  ): Promise<number> {
    return loadCustomCount(
      {
        ...EventActivityBase.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<EventActivityDBData | null> {
    const row = await eventActivityLoader.createLoader(context).load(id);
    if (!row) {
      return null;
    }
    return row;
  }

  static async loadRawDataX<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<EventActivityDBData> {
    const row = await eventActivityLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static loaderOptions<T extends EventActivityBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
  ): LoadEntOptions<T, Viewer, EventActivityDBData> {
    return {
      tableName: eventActivityLoaderInfo.tableName,
      fields: eventActivityLoaderInfo.fields,
      ent: this,
      loaderFactory: eventActivityLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (EventActivityBase.schemaFields != null) {
      return EventActivityBase.schemaFields;
    }
    return (EventActivityBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return EventActivityBase.getSchemaFields().get(key);
  }

  // this should be overwritten by subclasses as needed.
  protected async rsvpStatus(guest: Guest) {
    return EventActivityRsvpStatus.CanRsvp;
  }

  getEventActivityRsvpStatusMap() {
    let m: Map<EventActivityRsvpStatus, EdgeType> = new Map();
    m.set(EventActivityRsvpStatus.Attending, EdgeType.EventActivityToAttending);
    m.set(EventActivityRsvpStatus.Declined, EdgeType.EventActivityToDeclined);
    return m;
  }

  async rsvpStatusFor(guest: Guest): Promise<EventActivityRsvpStatus> {
    const ret = await this.rsvpStatus(guest);
    const g = await getEdgeTypeInGroup(
      this.viewer,
      this.id,
      guest.id,
      this.getEventActivityRsvpStatusMap(),
    );
    return g ? g[0] : ret;
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this.id);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this.id);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this.id);
  }

  async loadAddress(): Promise<Address | null> {
    if (!this.addressId) {
      return null;
    }

    return loadEnt(this.viewer, this.addressId, Address.loaderOptions());
  }

  async loadEvent(): Promise<Event | null> {
    return loadEnt(this.viewer, this.eventID, Event.loaderOptions());
  }

  loadEventX(): Promise<Event> {
    return loadEntX(this.viewer, this.eventID, Event.loaderOptions());
  }
}
