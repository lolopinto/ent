// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  CustomEdgeQueryBase,
  EdgeQuerySource,
  Ent,
  ID,
  IndexLoaderFactory,
  RawCountLoaderFactory,
  Viewer,
} from "@snowtop/ent";
import {
  Address,
  AddressToLocatedAtEdge,
  EdgeType,
  EventActivity,
  EventActivityToAttendingQuery,
  EventActivityToDeclinedQuery,
  EventActivityToInvitesQuery,
  addressLoader,
} from "src/ent/internal";

export const addressToLocatedAtCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.AddressToLocatedAt);
export const addressToLocatedAtDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.AddressToLocatedAt,
  () => AddressToLocatedAtEdge,
);

export const ownerToAddressesCountLoaderFactory = new RawCountLoaderFactory({
  ...Address.loaderOptions(),
  groupCol: "owner_id",
});
export const ownerToAddressesDataLoaderFactory = new IndexLoaderFactory(
  Address.loaderOptions(),
  "owner_id",
  {
    toPrime: [addressLoader],
  },
);

export abstract class AddressToLocatedAtQueryBase extends AssocEdgeQueryBase<
  Address,
  EventActivity,
  AddressToLocatedAtEdge,
  Viewer
> {
  constructor(
    viewer: Viewer,
    src: EdgeQuerySource<Address, EventActivity, Viewer>,
  ) {
    super(
      viewer,
      src,
      addressToLocatedAtCountLoaderFactory,
      addressToLocatedAtDataLoaderFactory,
      EventActivity.loaderOptions(),
    );
  }

  static query<T extends AddressToLocatedAtQueryBase>(
    this: new (
      viewer: Viewer,
      src: EdgeQuerySource<Address, EventActivity>,
    ) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Address, EventActivity>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return Address.load(this.viewer, id);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export class OwnerToAddressesQueryBase extends CustomEdgeQueryBase<
  Ent<Viewer>,
  Address,
  Viewer
> {
  constructor(viewer: Viewer, private srcEnt: Ent<Viewer>) {
    super(viewer, {
      src: srcEnt,
      countLoaderFactory: ownerToAddressesCountLoaderFactory,
      dataLoaderFactory: ownerToAddressesDataLoaderFactory,
      options: Address.loaderOptions(),
    });
  }

  static query<T extends OwnerToAddressesQueryBase>(
    this: new (viewer: Viewer, src: Ent<Viewer>) => T,
    viewer: Viewer,
    src: Ent<Viewer>,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(_id: ID) {
    return this.srcEnt;
  }
}
