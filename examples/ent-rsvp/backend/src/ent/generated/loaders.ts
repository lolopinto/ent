// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { ID, ObjectLoaderFactory } from "@snowtop/ent";
import { GuestDataSource } from "src/ent/generated/types";
import { NodeType } from "./types";

export interface AddressDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  street: string;
  city: string;
  state: string;
  zip_code: string;
  apartment: string | null;
  owner_id: ID;
  owner_type: string;
}

const addressTable = "addresses";
const addressFields = [
  "id",
  "created_at",
  "updated_at",
  "street",
  "city",
  "state",
  "zip_code",
  "apartment",
  "owner_id",
  "owner_type",
];

export const addressLoader = new ObjectLoaderFactory<AddressDBData>({
  tableName: addressTable,
  fields: addressFields,
  key: "id",
});

export const addressOwnerIDLoader = new ObjectLoaderFactory<AddressDBData>({
  tableName: addressTable,
  fields: addressFields,
  key: "owner_id",
});

export const addressLoaderInfo = {
  tableName: addressTable,
  fields: addressFields,
  nodeType: NodeType.Address,
  loaderFactory: addressLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    Street: {
      dbCol: "street",
      inputKey: "street",
    },
    City: {
      dbCol: "city",
      inputKey: "city",
    },
    State: {
      dbCol: "state",
      inputKey: "state",
    },
    ZipCode: {
      dbCol: "zip_code",
      inputKey: "zipCode",
    },
    Apartment: {
      dbCol: "apartment",
      inputKey: "apartment",
    },
    OwnerID: {
      dbCol: "owner_id",
      inputKey: "ownerID",
    },
    OwnerType: {
      dbCol: "owner_type",
      inputKey: "ownerType",
    },
  },
};

addressLoader.addToPrime(addressOwnerIDLoader);
addressOwnerIDLoader.addToPrime(addressLoader);

export interface AuthCodeDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  code: string;
  guest_id: ID;
  email_address: string;
  sent_code: boolean;
}

const authCodeTable = "auth_codes";
const authCodeFields = [
  "id",
  "created_at",
  "updated_at",
  "code",
  "guest_id",
  "email_address",
  "sent_code",
];

export const authCodeLoader = new ObjectLoaderFactory<AuthCodeDBData>({
  tableName: authCodeTable,
  fields: authCodeFields,
  key: "id",
});

export const authCodeGuestIDLoader = new ObjectLoaderFactory<AuthCodeDBData>({
  tableName: authCodeTable,
  fields: authCodeFields,
  key: "guest_id",
});

export const authCodeLoaderInfo = {
  tableName: authCodeTable,
  fields: authCodeFields,
  nodeType: NodeType.AuthCode,
  loaderFactory: authCodeLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    code: {
      dbCol: "code",
      inputKey: "code",
    },
    guestID: {
      dbCol: "guest_id",
      inputKey: "guestID",
    },
    emailAddress: {
      dbCol: "email_address",
      inputKey: "emailAddress",
    },
    sentCode: {
      dbCol: "sent_code",
      inputKey: "sentCode",
    },
  },
};

authCodeLoader.addToPrime(authCodeGuestIDLoader);
authCodeGuestIDLoader.addToPrime(authCodeLoader);

export interface EventDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  name: string;
  slug: string | null;
  creator_id: ID;
}

const eventTable = "events";
const eventFields = [
  "id",
  "created_at",
  "updated_at",
  "name",
  "slug",
  "creator_id",
];

export const eventLoader = new ObjectLoaderFactory<EventDBData>({
  tableName: eventTable,
  fields: eventFields,
  key: "id",
});

export const eventSlugLoader = new ObjectLoaderFactory<EventDBData>({
  tableName: eventTable,
  fields: eventFields,
  key: "slug",
});

export const eventLoaderInfo = {
  tableName: eventTable,
  fields: eventFields,
  nodeType: NodeType.Event,
  loaderFactory: eventLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    Name: {
      dbCol: "name",
      inputKey: "name",
    },
    Slug: {
      dbCol: "slug",
      inputKey: "slug",
    },
    creatorID: {
      dbCol: "creator_id",
      inputKey: "creatorID",
    },
  },
};

eventLoader.addToPrime(eventSlugLoader);
eventSlugLoader.addToPrime(eventLoader);

export interface EventActivityDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  address_id: ID | null;
  name: string;
  event_id: ID;
  start_time: Date;
  end_time: Date | null;
  location: string;
  description: string | null;
  invite_all_guests: boolean;
}

const eventActivityTable = "event_activities";
const eventActivityFields = [
  "id",
  "created_at",
  "updated_at",
  "address_id",
  "name",
  "event_id",
  "start_time",
  "end_time",
  "location",
  "description",
  "invite_all_guests",
];

export const eventActivityLoader = new ObjectLoaderFactory<EventActivityDBData>(
  {
    tableName: eventActivityTable,
    fields: eventActivityFields,
    key: "id",
  },
);

export const eventActivityLoaderInfo = {
  tableName: eventActivityTable,
  fields: eventActivityFields,
  nodeType: NodeType.EventActivity,
  loaderFactory: eventActivityLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    address_id: {
      dbCol: "address_id",
      inputKey: "addressId",
    },
    Name: {
      dbCol: "name",
      inputKey: "name",
    },
    eventID: {
      dbCol: "event_id",
      inputKey: "eventID",
    },
    StartTime: {
      dbCol: "start_time",
      inputKey: "startTime",
    },
    EndTime: {
      dbCol: "end_time",
      inputKey: "endTime",
    },
    Location: {
      dbCol: "location",
      inputKey: "location",
    },
    Description: {
      dbCol: "description",
      inputKey: "description",
    },
    InviteAllGuests: {
      dbCol: "invite_all_guests",
      inputKey: "inviteAllGuests",
    },
  },
};

export interface GuestDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  address_id: ID | null;
  name: string;
  event_id: ID;
  email_address: string | null;
  guest_group_id: ID;
  title: string | null;
}

const guestTable = "guests";
const guestFields = [
  "id",
  "created_at",
  "updated_at",
  "address_id",
  "name",
  "event_id",
  "email_address",
  "guest_group_id",
  "title",
];

export const guestLoader = new ObjectLoaderFactory<GuestDBData>({
  tableName: guestTable,
  fields: guestFields,
  key: "id",
});

export const guestLoaderInfo = {
  tableName: guestTable,
  fields: guestFields,
  nodeType: NodeType.Guest,
  loaderFactory: guestLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    address_id: {
      dbCol: "address_id",
      inputKey: "addressId",
    },
    Name: {
      dbCol: "name",
      inputKey: "name",
    },
    eventID: {
      dbCol: "event_id",
      inputKey: "eventID",
    },
    EmailAddress: {
      dbCol: "email_address",
      inputKey: "emailAddress",
    },
    guestGroupID: {
      dbCol: "guest_group_id",
      inputKey: "guestGroupID",
    },
    title: {
      dbCol: "title",
      inputKey: "title",
    },
  },
};

export interface GuestDataDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  guest_id: ID;
  event_id: ID;
  dietary_restrictions: string;
  source: GuestDataSource | null;
}

const guestDataTable = "guest_data";
const guestDataFields = [
  "id",
  "created_at",
  "updated_at",
  "guest_id",
  "event_id",
  "dietary_restrictions",
  "source",
];

export const guestDataLoader = new ObjectLoaderFactory<GuestDataDBData>({
  tableName: guestDataTable,
  fields: guestDataFields,
  key: "id",
});

export const guestDataLoaderInfo = {
  tableName: guestDataTable,
  fields: guestDataFields,
  nodeType: NodeType.GuestData,
  loaderFactory: guestDataLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    guestID: {
      dbCol: "guest_id",
      inputKey: "guestID",
    },
    eventID: {
      dbCol: "event_id",
      inputKey: "eventID",
    },
    dietaryRestrictions: {
      dbCol: "dietary_restrictions",
      inputKey: "dietaryRestrictions",
    },
    source: {
      dbCol: "source",
      inputKey: "source",
    },
  },
};

export interface GuestGroupDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  invitation_name: string;
  event_id: ID;
}

const guestGroupTable = "guest_groups";
const guestGroupFields = [
  "id",
  "created_at",
  "updated_at",
  "invitation_name",
  "event_id",
];

export const guestGroupLoader = new ObjectLoaderFactory<GuestGroupDBData>({
  tableName: guestGroupTable,
  fields: guestGroupFields,
  key: "id",
});

export const guestGroupLoaderInfo = {
  tableName: guestGroupTable,
  fields: guestGroupFields,
  nodeType: NodeType.GuestGroup,
  loaderFactory: guestGroupLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    InvitationName: {
      dbCol: "invitation_name",
      inputKey: "invitationName",
    },
    EventID: {
      dbCol: "event_id",
      inputKey: "eventID",
    },
  },
};

export interface UserDBData {
  id: ID;
  created_at: Date;
  updated_at: Date;
  first_name: string;
  last_name: string;
  email_address: string;
  password: string;
}

const userTable = "users";
const userFields = [
  "id",
  "created_at",
  "updated_at",
  "first_name",
  "last_name",
  "email_address",
  "password",
];

export const userLoader = new ObjectLoaderFactory<UserDBData>({
  tableName: userTable,
  fields: userFields,
  key: "id",
});

export const userEmailAddressLoader = new ObjectLoaderFactory<UserDBData>({
  tableName: userTable,
  fields: userFields,
  key: "email_address",
});

export const userLoaderInfo = {
  tableName: userTable,
  fields: userFields,
  nodeType: NodeType.User,
  loaderFactory: userLoader,
  fieldInfo: {
    ID: {
      dbCol: "id",
      inputKey: "id",
    },
    createdAt: {
      dbCol: "created_at",
      inputKey: "createdAt",
    },
    updatedAt: {
      dbCol: "updated_at",
      inputKey: "updatedAt",
    },
    FirstName: {
      dbCol: "first_name",
      inputKey: "firstName",
    },
    LastName: {
      dbCol: "last_name",
      inputKey: "lastName",
    },
    EmailAddress: {
      dbCol: "email_address",
      inputKey: "emailAddress",
    },
    Password: {
      dbCol: "password",
      inputKey: "password",
    },
  },
};

userLoader.addToPrime(userEmailAddressLoader);
userEmailAddressLoader.addToPrime(userLoader);

export function getLoaderInfoFromSchema(schema: string) {
  switch (schema) {
    case "Address":
      return addressLoaderInfo;
    case "AuthCode":
      return authCodeLoaderInfo;
    case "Event":
      return eventLoaderInfo;
    case "EventActivity":
      return eventActivityLoaderInfo;
    case "Guest":
      return guestLoaderInfo;
    case "GuestData":
      return guestDataLoaderInfo;
    case "GuestGroup":
      return guestGroupLoaderInfo;
    case "User":
      return userLoaderInfo;
    default:
      throw new Error(
        `invalid schema ${schema} passed to getLoaderInfoFromSchema`,
      );
  }
}

export function getLoaderInfoFromNodeType(nodeType: NodeType) {
  switch (nodeType) {
    case NodeType.Address:
      return addressLoaderInfo;
    case NodeType.AuthCode:
      return authCodeLoaderInfo;
    case NodeType.Event:
      return eventLoaderInfo;
    case NodeType.EventActivity:
      return eventActivityLoaderInfo;
    case NodeType.Guest:
      return guestLoaderInfo;
    case NodeType.GuestData:
      return guestDataLoaderInfo;
    case NodeType.GuestGroup:
      return guestGroupLoaderInfo;
    case NodeType.User:
      return userLoaderInfo;
    default:
      throw new Error(
        `invalid nodeType ${nodeType} passed to getLoaderInfoFromNodeType`,
      );
  }
}
