// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  ChangesetOptions,
  Observer,
  Trigger,
  Validator,
  WriteOperation,
} from "@snowtop/ent/action";
import { AuthCode, Guest } from "src/ent/";
import { AuthCodeBuilder } from "src/ent/generated/auth_code/actions/auth_code_builder";

export interface AuthCodeCreateInput {
  code: string;
  guestID: ID | Builder<Guest, Viewer>;
  emailAddress: string;
  sentCode?: boolean;
}

export type CreateAuthCodeActionTriggers = (
  | Trigger<
      AuthCode,
      AuthCodeBuilder<AuthCodeCreateInput, AuthCode | null>,
      Viewer,
      AuthCodeCreateInput,
      AuthCode | null
    >
  | Trigger<
      AuthCode,
      AuthCodeBuilder<AuthCodeCreateInput, AuthCode | null>,
      Viewer,
      AuthCodeCreateInput,
      AuthCode | null
    >[]
)[];

export type CreateAuthCodeActionObservers = Observer<
  AuthCode,
  AuthCodeBuilder<AuthCodeCreateInput, AuthCode | null>,
  Viewer,
  AuthCodeCreateInput,
  AuthCode | null
>[];

export type CreateAuthCodeActionValidators = Validator<
  AuthCode,
  AuthCodeBuilder<AuthCodeCreateInput, AuthCode | null>,
  Viewer,
  AuthCodeCreateInput,
  AuthCode | null
>[];

export class CreateAuthCodeActionBase
  implements
    Action<
      AuthCode,
      AuthCodeBuilder<AuthCodeCreateInput, AuthCode | null>,
      Viewer,
      AuthCodeCreateInput,
      AuthCode | null
    >
{
  public readonly builder: AuthCodeBuilder<
    AuthCodeCreateInput,
    AuthCode | null
  >;
  public readonly viewer: Viewer;
  protected input: AuthCodeCreateInput;

  constructor(viewer: Viewer, input: AuthCodeCreateInput) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new AuthCodeBuilder(
      this.viewer,
      WriteOperation.Insert,
      this,
      null,
    );
  }

  getPrivacyPolicy(): PrivacyPolicy<AuthCode, Viewer> {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getTriggers(): CreateAuthCodeActionTriggers {
    return [];
  }

  getObservers(): CreateAuthCodeActionObservers {
    return [];
  }

  getValidators(): CreateAuthCodeActionValidators {
    return [];
  }

  getInput(): AuthCodeCreateInput {
    return this.input;
  }

  async changeset(): Promise<Changeset> {
    return this.builder.build();
  }

  async changesetWithOptions_BETA(
    options: ChangesetOptions,
  ): Promise<Changeset> {
    return this.builder.buildWithOptions_BETA(options);
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<AuthCode | null> {
    await this.builder.save();
    return this.builder.editedEnt();
  }

  async saveX(): Promise<AuthCode> {
    await this.builder.saveX();
    return this.builder.editedEntX();
  }

  static create<T extends CreateAuthCodeActionBase>(
    this: new (
      viewer: Viewer,
      input: AuthCodeCreateInput,
    ) => T,
    viewer: Viewer,
    input: AuthCodeCreateInput,
  ): T {
    return new this(viewer, input);
  }
}
