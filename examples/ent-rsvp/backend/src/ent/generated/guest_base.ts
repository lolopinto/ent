// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerPrivacyPolicy,
  Context,
  CustomQuery,
  Data,
  Ent,
  ID,
  LoadEntOptions,
  PrivacyPolicy,
  Viewer,
  loadCustomCount,
  loadCustomData,
  loadCustomEnts,
  loadEnt,
  loadEntX,
  loadEnts,
} from "@snowtop/ent";
import { Field, getFields } from "@snowtop/ent/schema";
import {
  GuestDBData,
  guestLoader,
  guestLoaderInfo,
} from "src/ent/generated/loaders";
import { GuestTag, NodeType } from "src/ent/generated/types";
import {
  Address,
  Event,
  GuestData,
  GuestGroup,
  GuestToAttendingEventsQuery,
  GuestToAuthCodesQuery,
  GuestToDeclinedEventsQuery,
  GuestToGuestDataQuery,
  IWithAddress,
  WithAddressMixin,
} from "src/ent/internal";
import schema from "src/schema/guest_schema";

export class GuestBase
  extends WithAddressMixin(class {})
  implements Ent<Viewer>, IWithAddress
{
  protected readonly data: GuestDBData;
  readonly nodeType = NodeType.Guest;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly name: string;
  readonly eventID: ID;
  readonly emailAddress: string | null;
  readonly guestGroupID: ID;
  readonly title: string | null;
  readonly guestDataId: ID | null;
  readonly tag: GuestTag | null;

  constructor(public viewer: Viewer, data: Data) {
    // @ts-ignore pass to mixin
    super(viewer, data);
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.name = data.name;
    this.eventID = data.event_id;
    this.emailAddress = data.email_address;
    this.guestGroupID = data.guest_group_id;
    this.title = data.title;
    this.guestDataId = data.guest_data_id;
    this.tag = data.tag;
    // @ts-expect-error
    this.data = data;
  }

  __setRawDBData<GuestDBData>(data: GuestDBData) {}

  /** used by some ent internals to get access to raw db data. should not be depended on. may not always be on the ent **/
  ___getRawDBData(): GuestDBData {
    return this.data;
  }

  getPrivacyPolicy(): PrivacyPolicy<this, Viewer> {
    return AllowIfViewerPrivacyPolicy;
  }

  static async load<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return (await loadEnt(
      viewer,
      id,
      GuestBase.loaderOptions.apply(this),
    )) as T | null;
  }

  static async loadX<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return (await loadEntX(
      viewer,
      id,
      GuestBase.loaderOptions.apply(this),
    )) as T;
  }

  static async loadMany<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<Map<ID, T>> {
    return (await loadEnts(
      viewer,
      GuestBase.loaderOptions.apply(this),
      ...ids,
    )) as Map<ID, T>;
  }

  static async loadCustom<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    viewer: Viewer,
    query: CustomQuery<GuestDBData>,
  ): Promise<T[]> {
    return (await loadCustomEnts(
      viewer,
      {
        ...GuestBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
    )) as T[];
  }

  static async loadCustomData<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    query: CustomQuery<GuestDBData>,
    context?: Context,
  ): Promise<GuestDBData[]> {
    return loadCustomData<GuestDBData, GuestDBData>(
      {
        ...GuestBase.loaderOptions.apply(this),
        prime: true,
      },
      query,
      context,
    );
  }

  static async loadCustomCount<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    query: CustomQuery<GuestDBData>,
    context?: Context,
  ): Promise<number> {
    return loadCustomCount(
      {
        ...GuestBase.loaderOptions.apply(this),
      },
      query,
      context,
    );
  }

  static async loadRawData<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<GuestDBData | null> {
    return guestLoader.createLoader(context).load(id);
  }

  static async loadRawDataX<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
    id: ID,
    context?: Context,
  ): Promise<GuestDBData> {
    const row = await guestLoader.createLoader(context).load(id);
    if (!row) {
      throw new Error(`couldn't load row for ${id}`);
    }
    return row;
  }

  static loaderOptions<T extends GuestBase>(
    this: new (
      viewer: Viewer,
      data: Data,
    ) => T,
  ): LoadEntOptions<T, Viewer, GuestDBData> {
    return {
      tableName: guestLoaderInfo.tableName,
      fields: guestLoaderInfo.fields,
      ent: this,
      loaderFactory: guestLoader,
    };
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (GuestBase.schemaFields != null) {
      return GuestBase.schemaFields;
    }
    return (GuestBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return GuestBase.getSchemaFields().get(key);
  }

  queryGuestToAttendingEvents(): GuestToAttendingEventsQuery {
    return GuestToAttendingEventsQuery.query(this.viewer, this.id);
  }

  queryGuestToDeclinedEvents(): GuestToDeclinedEventsQuery {
    return GuestToDeclinedEventsQuery.query(this.viewer, this.id);
  }

  queryAuthCodes(): GuestToAuthCodesQuery {
    return GuestToAuthCodesQuery.query(this.viewer, this.id);
  }

  queryGuestData(): GuestToGuestDataQuery {
    return GuestToGuestDataQuery.query(this.viewer, this.id);
  }

  async loadAddress(): Promise<Address | null> {
    if (!this.addressId) {
      return null;
    }

    return loadEnt(this.viewer, this.addressId, Address.loaderOptions());
  }

  async loadEvent(): Promise<Event | null> {
    return loadEnt(this.viewer, this.eventID, Event.loaderOptions());
  }

  loadEventX(): Promise<Event> {
    return loadEntX(this.viewer, this.eventID, Event.loaderOptions());
  }

  async loadGuestGroup(): Promise<GuestGroup | null> {
    return loadEnt(this.viewer, this.guestGroupID, GuestGroup.loaderOptions());
  }

  loadGuestGroupX(): Promise<GuestGroup> {
    return loadEntX(this.viewer, this.guestGroupID, GuestGroup.loaderOptions());
  }

  async loadGuestData(): Promise<GuestData | null> {
    if (!this.guestDataId) {
      return null;
    }

    return loadEnt(this.viewer, this.guestDataId, GuestData.loaderOptions());
  }
}
