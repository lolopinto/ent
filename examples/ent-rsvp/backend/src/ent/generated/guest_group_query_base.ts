// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  CustomEdgeQueryBase,
  EdgeQuerySource,
  ID,
  OrderBy,
  Viewer,
} from "@snowtop/ent";
import { EdgeType } from "src/ent/generated/types";
import {
  EventActivity,
  EventActivityToAttendingQuery,
  EventActivityToDeclinedQuery,
  EventActivityToInvitesQuery,
  Guest,
  GuestGroup,
  GuestGroupToInvitedEventsEdge,
} from "src/ent/internal";

export const guestGroupToInvitedEventsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.GuestGroupToInvitedEvents);
export const guestGroupToInvitedEventsDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.GuestGroupToInvitedEvents,
    () => GuestGroupToInvitedEventsEdge,
  );

export abstract class GuestGroupToInvitedEventsQueryBase extends AssocEdgeQueryBase<
  GuestGroup,
  EventActivity,
  GuestGroupToInvitedEventsEdge,
  Viewer
> {
  constructor(
    viewer: Viewer,
    src: EdgeQuerySource<GuestGroup, EventActivity, Viewer>,
  ) {
    super(
      viewer,
      src,
      guestGroupToInvitedEventsCountLoaderFactory,
      guestGroupToInvitedEventsDataLoaderFactory,
      EventActivity.loaderOptions(),
    );
  }

  static query<T extends GuestGroupToInvitedEventsQueryBase>(
    this: new (
      viewer: Viewer,
      src: EdgeQuerySource<GuestGroup, EventActivity>,
    ) => T,
    viewer: Viewer,
    src: EdgeQuerySource<GuestGroup, EventActivity>,
  ): T {
    return new this(viewer, src);
  }

  sourceEnt(id: ID) {
    return GuestGroup.load(this.viewer, id);
  }

  queryAttending(): EventActivityToAttendingQuery {
    return EventActivityToAttendingQuery.query(this.viewer, this);
  }

  queryDeclined(): EventActivityToDeclinedQuery {
    return EventActivityToDeclinedQuery.query(this.viewer, this);
  }

  queryInvites(): EventActivityToInvitesQuery {
    return EventActivityToInvitesQuery.query(this.viewer, this);
  }
}

export class GuestGroupToGuestsQueryBase<
  TEnt extends GuestGroup = GuestGroup,
> extends CustomEdgeQueryBase<TEnt, Guest, Viewer> {
  constructor(viewer: Viewer, src: TEnt | ID, sortColumn?: string | OrderBy) {
    super(viewer, {
      src: src,
      groupCol: "guest_group_id",
      loadEntOptions: Guest.loaderOptions(),
      name: "GuestGroupToGuestsQuery",
      sortColumn: typeof sortColumn === "string" ? sortColumn : undefined,
      orderby: typeof sortColumn === "string" ? undefined : sortColumn,
    });
  }

  static query<
    T extends GuestGroupToGuestsQueryBase,
    TEnt extends GuestGroup = GuestGroup,
  >(
    this: new (
      viewer: Viewer,
      src: TEnt | ID,
    ) => T,
    viewer: Viewer,
    src: TEnt | ID,
  ): T {
    return new this(viewer, src);
  }

  async sourceEnt(id: ID) {
    return GuestGroup.load(this.viewer, id);
  }
}
