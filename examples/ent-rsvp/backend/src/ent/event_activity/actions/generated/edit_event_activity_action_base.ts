// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/snowtop-ts";
import {
  Action,
  Builder,
  Changeset,
  WriteOperation,
} from "@snowtop/snowtop-ts/action";
import { Event, EventActivity } from "src/ent/";
import {
  EventActivityBuilder,
  EventActivityInput,
} from "src/ent/event_activity/actions/event_activity_builder";

export interface EventActivityEditInput {
  name?: string;
  eventID?: ID | Builder<Event>;
  startTime?: Date;
  endTime?: Date | null;
  location?: string;
  description?: string | null;
  inviteAllGuests?: boolean;
}

export class EditEventActivityActionBase implements Action<EventActivity> {
  public readonly builder: EventActivityBuilder;
  public readonly viewer: Viewer;
  protected input: EventActivityEditInput;
  protected eventActivity: EventActivity;

  constructor(
    viewer: Viewer,
    eventActivity: EventActivity,
    input: EventActivityEditInput,
  ) {
    this.viewer = viewer;
    this.input = input;
    this.builder = new EventActivityBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      eventActivity,
    );
    this.eventActivity = eventActivity;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): EventActivityInput {
    return this.input;
  }

  async changeset(): Promise<Changeset<EventActivity>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<EventActivity | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<EventActivity> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends EditEventActivityActionBase>(
    this: new (
      viewer: Viewer,
      eventActivity: EventActivity,
      input: EventActivityEditInput,
    ) => T,
    viewer: Viewer,
    eventActivity: EventActivity,
    input: EventActivityEditInput,
  ): EditEventActivityActionBase {
    return new this(viewer, eventActivity, input);
  }

  static async saveXFromID<T extends EditEventActivityActionBase>(
    this: new (
      viewer: Viewer,
      eventActivity: EventActivity,
      input: EventActivityEditInput,
    ) => T,
    viewer: Viewer,
    id: ID,
    input: EventActivityEditInput,
  ): Promise<EventActivity> {
    let eventActivity = await EventActivity.loadX(viewer, id);
    return await new this(viewer, eventActivity, input).saveX();
  }
}
