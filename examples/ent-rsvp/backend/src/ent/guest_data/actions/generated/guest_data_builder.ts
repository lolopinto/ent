// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { Event, Guest, GuestData } from "src/ent/";
import schema from "src/schema/guest_data";

export interface GuestDataInput {
  guestID?: ID | Builder<Guest>;
  eventID?: ID | Builder<Event>;
  dietaryRestrictions?: string;
}

export interface GuestDataAction extends Action<GuestData> {
  getInput(): GuestDataInput;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class GuestDataBuilder implements Builder<GuestData> {
  orchestrator: Orchestrator<GuestData>;
  readonly placeholderID: ID;
  readonly ent = GuestData;
  private input: GuestDataInput;

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: GuestDataAction,
    public readonly existingEnt?: GuestData | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-GuestData`;
    this.input = action.getInput();
    const updateInput = (d: GuestDataInput) =>
      this.updateInput.apply(this, [d]);

    this.orchestrator = new Orchestrator({
      viewer,
      operation: this.operation,
      tableName: "guest_data",
      key: "id",
      loaderOptions: GuestData.loaderOptions(),
      builder: this,
      action,
      schema,
      editedFields: () => this.getEditedFields.apply(this),
      updateInput,
    });
  }

  getInput(): GuestDataInput {
    return this.input;
  }

  updateInput(input: GuestDataInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  async build(): Promise<Changeset<GuestData>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<GuestData | null> {
    return this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<GuestData> {
    return this.orchestrator.editedEntX();
  }

  private getEditedFields(): Map<string, any> {
    const fields = this.input;

    const result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("guestID", fields.guestID);
    addField("eventID", fields.eventID);
    addField("dietaryRestrictions", fields.dietaryRestrictions);
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of guestID. Retrieves it from the input if specified or takes it from existingEnt
  getNewGuestIDValue(): ID | Builder<Guest> | undefined {
    return this.input.guestID || this.existingEnt?.guestID;
  }

  // get value of eventID. Retrieves it from the input if specified or takes it from existingEnt
  getNewEventIDValue(): ID | Builder<Event> | undefined {
    return this.input.eventID || this.existingEnt?.eventID;
  }

  // get value of dietaryRestrictions. Retrieves it from the input if specified or takes it from existingEnt
  getNewDietaryRestrictionsValue(): string | undefined {
    return (
      this.input.dietaryRestrictions || this.existingEnt?.dietaryRestrictions
    );
  }
}
