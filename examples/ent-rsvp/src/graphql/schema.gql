type Query {
  node(id: ID!): Node
}

"""node interface"""
interface Node {
  id: ID!
}

type Mutation {
  addressCreate(input: AddressCreateInput!): AddressCreatePayload!
  addressDelete(input: AddressDeleteInput!): AddressDeletePayload!
  addressEdit(input: AddressEditInput!): AddressEditPayload!
  eventActivityCreate(input: EventActivityCreateInput!): EventActivityCreatePayload!
  eventActivityDelete(input: EventActivityDeleteInput!): EventActivityDeletePayload!
  eventActivityEdit(input: EventActivityEditInput!): EventActivityEditPayload!
  eventCreate(input: EventCreateInput!): EventCreatePayload!
  guestCreate(input: GuestCreateInput!): GuestCreatePayload!
  guestDelete(input: GuestDeleteInput!): GuestDeletePayload!
  guestEdit(input: GuestEditInput!): GuestEditPayload!
  guestGroupCreate(input: GuestGroupCreateInput!): GuestGroupCreatePayload!
  guestGroupDelete(input: GuestGroupDeleteInput!): GuestGroupDeletePayload!
  guestGroupEdit(input: GuestGroupEditInput!): GuestGroupEditPayload!
  userCreate(input: UserCreateInput!): UserCreatePayload!
}

type AddressCreatePayload {
  address: Address!
}

type Address implements Node {
  owner: Node
  id: ID!
  street: String!
  city: String!
  state: String!
  zipCode: String!
  apartment: String
}

input AddressCreateInput {
  street: String!
  city: String!
  state: String!
  zipCode: String!
  apartment: String
  ownerID: ID!
  ownerType: String!
}

type AddressDeletePayload {
  deletedAddressID: ID
}

input AddressDeleteInput {
  addressID: ID!
}

type AddressEditPayload {
  address: Address!
}

input AddressEditInput {
  addressID: ID!
  street: String
  city: String
  state: String
  zipCode: String
  apartment: String
  ownerID: ID
  ownerType: String
}

type EventActivityCreatePayload {
  eventActivity: EventActivity!
}

type EventActivity implements Node {
  event: Event
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  location: String!
}

type Event implements Node {
  creator: User
  id: ID!
  name: String!
  guests: [Guest!]!
  guestGroups: [GuestGroup!]!
  eventActivities: [EventActivity!]!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  events: [Event!]!
}

type Guest implements Node {
  event: Event
  guestGroup: GuestGroup
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
}

type GuestGroup implements Node {
  event: Event
  id: ID!
  invitationName: String!
  guests: [Guest!]!
}

"""Time scalar type"""
scalar Time

input EventActivityCreateInput {
  name: String!
  eventID: ID!
  startTime: Time!
  endTime: Time
  location: String!
}

type EventActivityDeletePayload {
  deletedEventActivityID: ID
}

input EventActivityDeleteInput {
  eventActivityID: ID!
}

type EventActivityEditPayload {
  eventActivity: EventActivity!
}

input EventActivityEditInput {
  eventActivityID: ID!
  name: String
  eventID: ID
  startTime: Time
  endTime: Time
  location: String
}

type EventCreatePayload {
  event: Event!
}

input EventCreateInput {
  name: String!
  creatorID: ID!
}

type GuestCreatePayload {
  guest: Guest!
}

input GuestCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  eventID: ID!
  guestGroupID: ID!
}

type GuestDeletePayload {
  deletedGuestID: ID
}

input GuestDeleteInput {
  guestID: ID!
}

type GuestEditPayload {
  guest: Guest!
}

input GuestEditInput {
  guestID: ID!
  firstName: String
  lastName: String
  emailAddress: String
  eventID: ID
  guestGroupID: ID
}

type GuestGroupCreatePayload {
  guestGroup: GuestGroup!
}

input GuestGroupCreateInput {
  invitationName: String!
  eventID: ID!
}

type GuestGroupDeletePayload {
  deletedGuestGroupID: ID
}

input GuestGroupDeleteInput {
  guestGroupID: ID!
}

type GuestGroupEditPayload {
  guestGroup: GuestGroup!
}

input GuestGroupEditInput {
  guestGroupID: ID!
  invitationName: String
}

type UserCreatePayload {
  user: User!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
}
