type Query {
  node(id: ID!): Node
}

"""node interface"""
interface Node {
  id: ID!
}

type Mutation {
  eventActivityCreate(input: EventActivityCreateInput!): EventActivityCreatePayload!
  eventActivityDelete(input: EventActivityDeleteInput!): EventActivityDeletePayload!
  eventActivityEdit(input: EventActivityEditInput!): EventActivityEditPayload!
  eventCreate(input: EventCreateInput!): EventCreatePayload!
  eventDelete(input: EventDeleteInput!): EventDeletePayload!
  eventEdit(input: EventEditInput!): EventEditPayload!
}

type EventActivityCreatePayload {
  eventActivity: EventActivity!
}

type EventActivity implements Node {
  event: Event
  id: ID!
  name: String!
  startTime: Time!
  endTime: Time
  location: String!
}

type Event implements Node {
  creator: User
  id: ID!
  name: String!
  eventActivities: [EventActivity!]!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  emailAddress: String!
  events: [Event!]!
}

"""Time scalar type"""
scalar Time

input EventActivityCreateInput {
  name: String!
  eventID: ID!
  startTime: Time!
  endTime: Time
  location: String!
}

type EventActivityDeletePayload {
  deletedEventActivityID: ID
}

input EventActivityDeleteInput {
  eventActivityID: ID!
}

type EventActivityEditPayload {
  eventActivity: EventActivity!
}

input EventActivityEditInput {
  eventActivityID: ID!
  name: String
  eventID: ID
  startTime: Time
  endTime: Time
  location: String
}

type EventCreatePayload {
  event: Event!
}

input EventCreateInput {
  name: String!
  creatorID: ID!
}

type EventDeletePayload {
  deletedEventID: ID
}

input EventDeleteInput {
  eventID: ID!
}

type EventEditPayload {
  event: Event!
}

input EventEditInput {
  eventID: ID!
  name: String
  creatorID: ID
}
