// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  GraphQLObjectType,
  GraphQLID,
  GraphQLString,
  GraphQLNonNull,
  GraphQLInt,
  GraphQLFieldConfigMap,
} from "graphql";
import { RequestContext } from "@lolopinto/ent";
import {
  GraphQLNodeInterface,
  nodeIDEncoder,
  GraphQLEdgeConnection,
} from "@lolopinto/ent/graphql";
import {
  EventType,
  GuestGroupType,
  GuestToAttendingEventsConnectionType,
  GuestToDeclinedEventsConnectionType,
} from "src/graphql/resolvers/";
import {
  Guest,
  GuestToAttendingEventsQuery,
  GuestToDeclinedEventsQuery,
} from "src/ent/";

export const GuestType = new GraphQLObjectType({
  name: "Guest",
  fields: (): GraphQLFieldConfigMap<Guest, RequestContext> => ({
    event: {
      type: EventType,
      resolve: (guest: Guest, args: {}) => {
        return guest.loadEvent();
      },
    },
    guestGroup: {
      type: GuestGroupType,
      resolve: (guest: Guest, args: {}) => {
        return guest.loadGuestGroup();
      },
    },
    id: {
      type: GraphQLNonNull(GraphQLID),
      resolve: nodeIDEncoder,
    },
    firstName: {
      type: GraphQLNonNull(GraphQLString),
    },
    lastName: {
      type: GraphQLNonNull(GraphQLString),
    },
    emailAddress: {
      type: GraphQLNonNull(GraphQLString),
    },
    guestToAttendingEvents: {
      type: GraphQLNonNull(GuestToAttendingEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (guest: Guest, args: {}) => {
        return new GraphQLEdgeConnection(
          guest.viewer,
          guest,
          GuestToAttendingEventsQuery,
          args,
        );
      },
    },
    guestToDeclinedEvents: {
      type: GraphQLNonNull(GuestToDeclinedEventsConnectionType()),
      args: {
        first: {
          description: "",
          type: GraphQLInt,
        },
        after: {
          description: "",
          type: GraphQLString,
        },
        last: {
          description: "",
          type: GraphQLInt,
        },
        before: {
          description: "",
          type: GraphQLString,
        },
      },
      resolve: (guest: Guest, args: {}) => {
        return new GraphQLEdgeConnection(
          guest.viewer,
          guest,
          GuestToDeclinedEventsQuery,
          args,
        );
      },
    },
  }),
  interfaces: [GraphQLNodeInterface],
  isTypeOf(obj) {
    return obj instanceof Guest;
  },
});
