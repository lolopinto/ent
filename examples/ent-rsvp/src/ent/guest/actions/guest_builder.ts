// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { Viewer, ID, Ent } from "@lolopinto/ent";
import {
  Action,
  Builder,
  WriteOperation,
  Changeset,
  saveBuilder,
  saveBuilderX,
  Orchestrator,
} from "@lolopinto/ent/action";
import schema from "src/schema/guest";
import { Guest, Event, GuestGroup } from "src/ent/";

export interface GuestInput {
  firstName?: string;
  lastName?: string;
  emailAddress?: string;
  eventID?: ID | Builder<Event>;
  guestGroupID?: ID | Builder<GuestGroup>;
}

export interface GuestAction extends Action<Guest> {
  getInput(): GuestInput;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class GuestBuilder implements Builder<Guest> {
  private orchestrator: Orchestrator<Guest>;
  readonly placeholderID: ID;
  readonly ent = Guest;
  private input: GuestInput;

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: GuestAction,
    public readonly existingEnt?: Guest | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}`;
    this.input = action.getInput();

    this.orchestrator = new Orchestrator({
      viewer: viewer,
      operation: this.operation,
      tableName: "guests",
      ent: Guest,
      builder: this,
      action: action,
      schema: schema,
      editedFields: () => {
        return this.getEditedFields.apply(this);
      },
    });
  }

  getInput(): GuestInput {
    return this.input;
  }

  updateInput(input: GuestInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  async build(): Promise<Changeset<Guest>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<Guest | null> {
    return await this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<Guest> {
    return await this.orchestrator.editedEntX();
  }

  private getEditedFields(): Map<string, any> {
    const fields = this.input;

    let result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("FirstName", fields.firstName);
    addField("LastName", fields.lastName);
    addField("EmailAddress", fields.emailAddress);
    addField("eventID", fields.eventID);
    addField("guestGroupID", fields.guestGroupID);
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }
}
