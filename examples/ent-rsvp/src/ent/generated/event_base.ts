// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  loadEnt,
  ID,
  Data,
  Viewer,
  loadEntX,
  loadEnts,
  LoadEntOptions,
  loadEntsFromClause,
  loadRow,
  loadRowX,
  AlwaysDenyRule,
  AllowIfViewerRule,
  PrivacyPolicy,
  query,
} from "@lolopinto/ent";
import { Field, getFields } from "@lolopinto/ent/schema";
import {
  NodeType,
  Guest,
  GuestGroup,
  EventActivity,
  User,
} from "src/ent/internal";
import schema from "src/schema/event";

const tableName = "events";

export class EventBase {
  readonly nodeType = NodeType.Event;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly name: string;
  readonly creatorID: ID;

  constructor(public viewer: Viewer, id: ID, data: Data) {
    this.id = id;
    // TODO don't double read id
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.name = data.name;
    this.creatorID = data.creator_id;
  }

  // by default, we always deny and it's up to the ent
  // to overwrite this privacy policy in its subclasses

  privacyPolicy: PrivacyPolicy = {
    rules: [AllowIfViewerRule, AlwaysDenyRule],
  };

  static async load<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return loadEnt(viewer, id, EventBase.loaderOptions.apply(this));
  }

  static async loadX<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return loadEntX(viewer, id, EventBase.loaderOptions.apply(this));
  }

  static async loadMany<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<T[]> {
    return loadEnts(viewer, EventBase.loaderOptions.apply(this), ...ids);
  }

  static async loadRawData<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    id: ID,
  ): Promise<Data | null> {
    return await loadRow({
      ...EventBase.loaderOptions.apply(this),
      clause: query.Eq("id", id),
    });
  }

  static async loadRawDataX<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    id: ID,
  ): Promise<Data> {
    return await loadRowX({
      ...EventBase.loaderOptions.apply(this),
      clause: query.Eq("id", id),
    });
  }

  static loaderOptions<T extends EventBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
  ): LoadEntOptions<T> {
    return {
      tableName: tableName,
      fields: EventBase.getFields(),
      ent: this,
    };
  }

  private static getFields(): string[] {
    return ["id", "created_at", "updated_at", "name", "creator_id"];
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (EventBase.schemaFields != null) {
      return EventBase.schemaFields;
    }
    return (EventBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return EventBase.getSchemaFields().get(key);
  }

  async loadGuests(): Promise<Guest[]> {
    let map = await loadEntsFromClause(
      this.viewer,
      query.Eq("event_id", this.id),
      Guest.loaderOptions(),
    );
    let results: Guest[] = [];
    map.forEach((ent) => {
      results.push(ent);
    });
    return results;
  }

  async loadGuestGroups(): Promise<GuestGroup[]> {
    let map = await loadEntsFromClause(
      this.viewer,
      query.Eq("event_id", this.id),
      GuestGroup.loaderOptions(),
    );
    let results: GuestGroup[] = [];
    map.forEach((ent) => {
      results.push(ent);
    });
    return results;
  }

  async loadEventActivities(): Promise<EventActivity[]> {
    let map = await loadEntsFromClause(
      this.viewer,
      query.Eq("event_id", this.id),
      EventActivity.loaderOptions(),
    );
    let results: EventActivity[] = [];
    map.forEach((ent) => {
      results.push(ent);
    });
    return results;
  }

  async loadCreator(): Promise<User | null> {
    return loadEnt(this.viewer, this.creatorID, User.loaderOptions());
  }

  loadCreatorX(): Promise<User> {
    return loadEntX(this.viewer, this.creatorID, User.loaderOptions());
  }
}
