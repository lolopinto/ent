// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  loadEnt,
  ID,
  Data,
  Viewer,
  loadEntX,
  loadEnts,
  LoadEntOptions,
  AssocEdge,
  loadEdges,
  loadRawEdgeCountX,
  loadNodesByEdge,
  loadEdgeForID2,
  loadRow,
  loadRowX,
  AlwaysDenyRule,
  AllowIfViewerRule,
  PrivacyPolicy,
  query,
  getEdgeTypeInGroup,
} from "@lolopinto/ent";
import { Field, getFields } from "@lolopinto/ent/schema";
import { EdgeType, NodeType, Guest, GuestGroup, Event } from "src/ent/internal";
import schema from "src/schema/event_activity";

const tableName = "event_activities";

export enum EventActivityRsvpStatus {
  Attending = "attending",
  Declined = "declined",
  CanRsvp = "canRsvp",
  CannotRsvp = "cannotRsvp",
}

export function getEventActivityRsvpStatusValues() {
  return [
    EventActivityRsvpStatus.Attending,
    EventActivityRsvpStatus.Declined,
    EventActivityRsvpStatus.CanRsvp,
    EventActivityRsvpStatus.CannotRsvp,
  ];
}

export class EventActivityBase {
  readonly nodeType = NodeType.EventActivity;
  readonly id: ID;
  readonly createdAt: Date;
  readonly updatedAt: Date;
  readonly name: string;
  readonly eventID: ID;
  readonly startTime: Date;
  readonly endTime: Date | null;
  readonly location: string;

  constructor(public viewer: Viewer, id: ID, data: Data) {
    this.id = id;
    // TODO don't double read id
    this.id = data.id;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
    this.name = data.name;
    this.eventID = data.event_id;
    this.startTime = data.start_time;
    this.endTime = data.end_time;
    this.location = data.location;
  }

  // by default, we always deny and it's up to the ent
  // to overwrite this privacy policy in its subclasses

  privacyPolicy: PrivacyPolicy = {
    rules: [AllowIfViewerRule, AlwaysDenyRule],
  };

  static async load<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T | null> {
    return loadEnt(viewer, id, EventActivityBase.loaderOptions.apply(this));
  }

  static async loadX<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    id: ID,
  ): Promise<T> {
    return loadEntX(viewer, id, EventActivityBase.loaderOptions.apply(this));
  }

  static async loadMany<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    viewer: Viewer,
    ...ids: ID[]
  ): Promise<T[]> {
    return loadEnts(
      viewer,
      EventActivityBase.loaderOptions.apply(this),
      ...ids,
    );
  }

  static async loadRawData<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    id: ID,
  ): Promise<Data | null> {
    return await loadRow({
      ...EventActivityBase.loaderOptions.apply(this),
      clause: query.Eq("id", id),
    });
  }

  static async loadRawDataX<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
    id: ID,
  ): Promise<Data> {
    return await loadRowX({
      ...EventActivityBase.loaderOptions.apply(this),
      clause: query.Eq("id", id),
    });
  }

  static loaderOptions<T extends EventActivityBase>(
    this: new (viewer: Viewer, id: ID, data: Data) => T,
  ): LoadEntOptions<T> {
    return {
      tableName: tableName,
      fields: EventActivityBase.getFields(),
      ent: this,
    };
  }

  private static getFields(): string[] {
    return [
      "id",
      "created_at",
      "updated_at",
      "name",
      "event_id",
      "start_time",
      "end_time",
      "location",
    ];
  }

  private static schemaFields: Map<string, Field>;

  private static getSchemaFields(): Map<string, Field> {
    if (EventActivityBase.schemaFields != null) {
      return EventActivityBase.schemaFields;
    }
    return (EventActivityBase.schemaFields = getFields(schema));
  }

  static getField(key: string): Field | undefined {
    return EventActivityBase.getSchemaFields().get(key);
  }

  // this should be overwritten by subclasses as needed.
  protected async rsvpStatus() {
    return EventActivityRsvpStatus.CanRsvp;
  }

  getEventActivityRsvpStatusMap() {
    let m: Map<EventActivityRsvpStatus, EdgeType> = new Map();
    m.set(EventActivityRsvpStatus.Attending, EdgeType.EventActivityToAttending);
    m.set(EventActivityRsvpStatus.Declined, EdgeType.EventActivityToDeclined);
    return m;
  }

  async viewerRsvpStatus(): Promise<EventActivityRsvpStatus> {
    const ret = await this.rsvpStatus();
    if (!this.viewer.viewerID) {
      return ret;
    }
    const g = await getEdgeTypeInGroup(
      this.viewer,
      this.id,
      this.viewer.viewerID!,
      this.getEventActivityRsvpStatusMap(),
    );
    if (g) {
      return g[0];
    }
    return ret;
  }

  loadAttendingEdges(): Promise<AssocEdge[]> {
    return loadEdges({
      id1: this.id,
      edgeType: EdgeType.EventActivityToAttending,
      context: this.viewer.context,
    });
  }

  loadAttending(): Promise<Guest[]> {
    return loadNodesByEdge(
      this.viewer,
      this.id,
      EdgeType.EventActivityToAttending,
      Guest.loaderOptions(),
    );
  }

  loadAttendingRawCountX(): Promise<number> {
    return loadRawEdgeCountX({
      id1: this.id,
      edgeType: EdgeType.EventActivityToAttending,
      context: this.viewer.context,
    });
  }

  loadAttendingEdgeFor(id2: ID): Promise<AssocEdge | undefined> {
    return loadEdgeForID2({
      id1: this.id,
      edgeType: EdgeType.EventActivityToAttending,
      id2,
      context: this.viewer.context,
    });
  }

  loadDeclinedEdges(): Promise<AssocEdge[]> {
    return loadEdges({
      id1: this.id,
      edgeType: EdgeType.EventActivityToDeclined,
      context: this.viewer.context,
    });
  }

  loadDeclined(): Promise<Guest[]> {
    return loadNodesByEdge(
      this.viewer,
      this.id,
      EdgeType.EventActivityToDeclined,
      Guest.loaderOptions(),
    );
  }

  loadDeclinedRawCountX(): Promise<number> {
    return loadRawEdgeCountX({
      id1: this.id,
      edgeType: EdgeType.EventActivityToDeclined,
      context: this.viewer.context,
    });
  }

  loadDeclinedEdgeFor(id2: ID): Promise<AssocEdge | undefined> {
    return loadEdgeForID2({
      id1: this.id,
      edgeType: EdgeType.EventActivityToDeclined,
      id2,
      context: this.viewer.context,
    });
  }

  loadInvitesEdges(): Promise<AssocEdge[]> {
    return loadEdges({
      id1: this.id,
      edgeType: EdgeType.EventActivityToInvites,
      context: this.viewer.context,
    });
  }

  loadInvites(): Promise<GuestGroup[]> {
    return loadNodesByEdge(
      this.viewer,
      this.id,
      EdgeType.EventActivityToInvites,
      GuestGroup.loaderOptions(),
    );
  }

  loadInvitesRawCountX(): Promise<number> {
    return loadRawEdgeCountX({
      id1: this.id,
      edgeType: EdgeType.EventActivityToInvites,
      context: this.viewer.context,
    });
  }

  loadInviteEdgeFor(id2: ID): Promise<AssocEdge | undefined> {
    return loadEdgeForID2({
      id1: this.id,
      edgeType: EdgeType.EventActivityToInvites,
      id2,
      context: this.viewer.context,
    });
  }

  async loadEvent(): Promise<Event | null> {
    return loadEnt(this.viewer, this.eventID, Event.loaderOptions());
  }

  loadEventX(): Promise<Event> {
    return loadEntX(this.viewer, this.eventID, Event.loaderOptions());
  }
}
